{
  "$schema": "https://dataexplorer.azure.com/static/d/schema/60/dashboard.json",
  "id": "0b39de3b-0038-4231-b1aa-369ed6d3a5aa",
  "eTag": "50756b28-2770-4a8a-8338-ec92a09a5144",
  "title": "Single Tenant OnPrem Dashboard",
  "tiles": [
    {
      "id": "a27ec310-3bcb-4145-bfa1-f4232ff89717",
      "title": "Long Running SQL Queries (ms)",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 20, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "7c74aece-21e1-4a6d-90b0-825a43a5c4ec"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "0d9c7c7d-3fb5-4fa6-9308-286adf620062",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Duration", "values": ["1000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "0535abcc-a405-47b9-8118-5787a9a1ae9e",
            "ruleType": "colorByCondition",
            "applyToColumn": "Type",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "!=", "column": "Type", "values": ["SELECT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "1a872015-351b-43e9-b9c9-391e815f22bc",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "!=", "column": "Type", "values": ["SELECT"] },
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "or",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "d059eab6-9c59-4551-9b41-9c4ebf002bf7",
      "title": "Lock Snapshot",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 69, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "f43372a7-7170-4770-9f26-79301146336b"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "2cfd710a-43f7-4cf7-8d94-193e2beb3b46",
      "title": "SQL Execution Chart",
      "visualType": "stackedcolumn",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 39, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "f4720c55-949d-4faf-96aa-ed4eb39fd3bf"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "3d67e785-f63c-44f6-bb04-a96f2472565b",
      "title": "Top 20 Objects Used during the Long SQL Queries",
      "visualType": "pie",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 30, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "a5aae1b9-fdc2-4c5a-a4b4-cc652e525c0f"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "c618b79b-de37-42af-8657-f788c44c53ae",
      "title": "Top 20 Slowest AL Methods (in ms)",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 11, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "54dd6244-f609-44e5-8c71-50192e95d219"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "11402fde-e050-4e5e-b767-e73f173801d6",
            "ruleType": "colorByCondition",
            "applyToColumn": "Avg Duration",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg Duration", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg Duration > 5000",
            "visualType": "table"
          },
          {
            "id": "92160ff2-25ce-4514-bfe6-7b8229c827ac",
            "ruleType": "colorByCondition",
            "applyToColumn": "Avg Duration",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg Duration", "values": ["750"] },
              { "operator": "<=", "column": "Avg Duration", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg Duration > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "872dc80f-a7e1-4361-9e23-8c7796a2821e",
      "title": "Long Running SQL Queries for the defined Time Range",
      "visualType": "markdown",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 0, "y": 0, "width": 10, "height": 5 },
      "queryRef": {
        "kind": "query",
        "queryId": "1e26b01a-62c1-44d1-a86d-6ba732299042"
      },
      "visualOptions": { "xColumn": null }
    },
    {
      "id": "7c89e962-0e32-418f-b16c-01b8da9ab560",
      "title": "Long Running AL Methods by Object Type for the defined Time Range",
      "visualType": "markdown",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 10, "y": 5, "width": 14, "height": 4 },
      "queryRef": {
        "kind": "query",
        "queryId": "05ccee90-4d97-45e2-91fb-73600551f195"
      },
      "visualOptions": { "xColumn": null }
    },
    {
      "id": "d896aaa6-beca-4d1c-af8f-e8e6024d0391",
      "title": "Job Queue Overview",
      "visualType": "markdown",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 0, "y": 5, "width": 10, "height": 4 },
      "queryRef": {
        "kind": "query",
        "queryId": "77c9d9a0-582e-4434-8210-f7342f7fa5b7"
      },
      "visualOptions": { "xColumn": null }
    },
    {
      "id": "19c1b81f-7fc8-4925-b18d-7b3765b21102",
      "title": "Lock Timeouts (5 min buckets)",
      "visualType": "stackedcolumn",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 32, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "cd991eff-fbbb-4394-9c7a-174e418ceccd"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "70559276-6c87-453d-a9f8-e7e181115fbe",
      "title": "Top 20 SQL Queries that holds Database Locks",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 25, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "121c57ec-aed6-48b9-b653-a942150c5114"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "7b5f9890-013d-41af-a076-328230096649",
      "title": "Job Queue Status",
      "visualType": "column",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "87ee0328-cee4-4a08-802d-72a1d6972d12"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "1a76223b-a537-4b1e-9c73-5be23636e06c",
      "title": "Job Queue Entries",
      "visualType": "table",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 9, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "439ecd5e-8de1-451a-8ae8-c9e49d59af30"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "3b9e6177-c18e-455f-8eb1-023748b11cbf",
            "ruleType": "colorByCondition",
            "applyToColumn": "State",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "==", "column": "State", "values": ["Started"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "State = Started",
            "visualType": "table"
          },
          {
            "id": "23a81bd6-7fc9-4720-a830-95a74ede0f5b",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "==", "column": "State", "values": ["Finished"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "green",
            "tag": "",
            "icon": null,
            "ruleName": "State = Finished",
            "visualType": "table"
          },
          {
            "id": "4ceeab8c-870f-4c07-92d9-f86681efd0e6",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "==", "column": "State", "values": ["Failed"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "State = Failed",
            "visualType": "table"
          },
          {
            "id": "b4059a58-dfcc-4b25-b3c6-4398ea4469c5",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "==", "column": "State", "values": ["Enqueued"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "State = Enqueued",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "df42d57c-420e-4145-a824-27d34114c534",
      "title": "Web Service Usage (in ms) ",
      "visualType": "table",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "a758b880-5eb3-4112-8342-afe80c47ede4"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "8ef4ce1b-e009-4ad7-939e-7cd290cfbf1d",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 5000",
            "visualType": "table"
          },
          {
            "id": "0b1b883a-6153-437d-bc75-e7fbbceb0f6b",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["750"] },
              { "operator": "<=", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "99ea2a24-8370-4ef6-b036-d04eb3e955dd",
      "title": "Top 10 Web Service Calls by Duration (in ms)",
      "visualType": "bar",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 8, "width": 12, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "c2f868ce-8920-416e-bb53-c6832abe5607"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "0da4abc2-d47b-4c78-9d4c-b0bc195a8867",
      "title": "Top 10 Web Service Calls by Volume",
      "visualType": "bar",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 12, "y": 8, "width": 12, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "407eabec-8884-49da-8fc7-c1aac24c8990"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "e28cece8-7858-427e-a00d-001cb911edf5",
      "title": "Top 20 Page Usage",
      "visualType": "pie",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 30, "width": 12, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "9699638f-7e28-40a7-bf5b-6dfa10f3ff24"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "47c5e32b-b2eb-4dd0-b268-4ce48ecbc6a7",
      "title": "Top 20 Report Usage",
      "visualType": "pie",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 12, "y": 30, "width": 12, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "a3ea5331-e1cb-4877-a147-ad506cf7a4cc"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "e70239e5-f63c-4ebe-a4c7-e47c79d57293",
      "title": "Job Queue Execution Statistics",
      "visualType": "table",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 18, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "258b4492-214b-4d45-9d75-2c0ca4d3f964"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "b3a85703-bc48-434f-9056-e7620d61a2d0",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 5000",
            "visualType": "table"
          },
          {
            "id": "a6c2202f-6c70-4e78-ad27-98ca48ebb95a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["750"] },
              { "values": ["5000"], "operator": "<=", "column": "Avg. Time" }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "1a631a53-08dc-4f8b-8d7d-a86c383b19df",
      "title": "Web Service Calls Overview for past 24 hrs.",
      "visualType": "markdown",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 0, "y": 9, "width": 24, "height": 4 },
      "queryRef": {
        "kind": "query",
        "queryId": "80b645cf-ec6f-467d-88fd-032b47a21a63"
      },
      "visualOptions": { "xColumn": null }
    },
    {
      "id": "e2225a85-d095-4232-994d-2692a8c20af4",
      "title": "Index Lifecycle",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 33, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "d8db92cb-55c2-43da-8ba1-4c67226ad4c9"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "dd772426-c109-465a-9231-826b82fbc4f1",
      "title": "Page View Count",
      "visualType": "table",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "68c4f059-5e65-46e7-8e56-2990003f6606"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "d1dd2755-b9b9-4d80-bc6f-560a20a489fb",
      "title": "Top 20 Codeunit Usage",
      "visualType": "pie",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 42, "width": 12, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "2a16e45d-a842-4f0d-b4f7-dab7c0588f11"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "bcdbed35-53ac-4227-9d48-707a43ff7a03",
      "title": "Top 20 Query Usage",
      "visualType": "pie",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 12, "y": 42, "width": 12, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "19c07d8e-398b-41b0-b071-af30040bd538"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "93435685-c962-420c-8e59-e73714c43185",
      "title": "Errors Dialog",
      "visualType": "table",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 21, "width": 24, "height": 6 },
      "queryRef": {
        "kind": "query",
        "queryId": "c195cc44-c181-4d75-935b-8148da47addd"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "d092bd8f-bed0-4e5f-ae2e-d3a539c6b7c2",
      "title": "All Lifecycle Events",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 24, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "b233c41c-8c68-4050-9a1a-d0daa1621268"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "610ad1a1-6a17-4fb5-a8c2-17de446cb342",
      "title": "Active Users by Day",
      "visualType": "table",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 0, "width": 9, "height": 5 },
      "queryRef": {
        "kind": "query",
        "queryId": "1d416764-ef37-462a-9b3f-f1b996f70745"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "f3d10b30-5268-4c56-8514-b73d8494bb48",
      "title": "Active Users Graph (60d)",
      "visualType": "timechart",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 9, "y": 0, "width": 15, "height": 5 },
      "queryRef": {
        "kind": "query",
        "queryId": "471dacd1-edc8-402a-b94a-67f1b4d4dc06"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": ["Daily"],
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": true,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "b22c19cb-1d19-405b-b739-b5e2b1acd4c7",
      "title": "Period Data Ingestion",
      "visualType": "stackedcolumn",
      "pageId": "1a9f99e5-2026-4f32-a914-3ee9e64ce31e",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "df441131-1d11-4f11-b5ce-02ece11b6831"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": true,
        "xColumnTitle": "",
        "xColumn": "Day",
        "yColumns": null,
        "seriesColumns": ["EventId"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "a151f9f7-1afa-4ba9-920c-9199cc329a36",
      "title": "Data Ingestion",
      "visualType": "table",
      "pageId": "1a9f99e5-2026-4f32-a914-3ee9e64ce31e",
      "layout": { "x": 0, "y": 12, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "78a415a3-f897-4b00-adfc-1192c389b6d4"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "aa814387-a986-4a8e-8812-8ec77579319e",
      "title": "No. of Long Running SQL Queries",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 0, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "335527d7-bcf6-4894-acd3-95bc87776be6"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "886fe569-ef19-4521-bc4e-47ebec9e54db",
      "title": "No. of Long Running AL Methods",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 14, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "3ff78530-b9de-4519-ba65-8f7cd8114c57"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": true,
        "drillthroughDisabled": false,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "bf5393aa-e26a-4396-94b3-62e65c1dab98",
      "title": "No. of Sessions by Client",
      "visualType": "timechart",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 53, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "18ef025b-9a5f-40d7-b7c3-a32c919e933e"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "8b72f5f9-23af-455a-807f-a2b465577cc1",
      "title": "No. of SQL Lock Timeout",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 36, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "45db4dc1-bdb8-435c-97d5-aeff2d98fe64"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "4a396f63-ed5f-47c6-9265-2a1589623d59",
      "title": "SQL Deadlocks by Process",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "62d8759b-9e1a-4f0c-b1dc-9cb5e3ac74c6"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "1861e1dc-ee3b-45f4-b42f-3370a429cefc",
      "title": "No. of  SQL Deadlocks",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 28, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "7f70a74c-32cc-4c02-b172-e9433d925dd8"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "2cd7db76-28c3-4914-a54e-907883f7ee66",
      "title": "Joins impact",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 53, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "be949600-78e5-4cc5-8f73-9aff2fc75c80"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "f01083eb-eee1-43d9-972b-1700db7658e6",
      "title": "LRAM by Day",
      "visualType": "table",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 13, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "4c8e4569-0d9e-4374-9e2a-02ea00ef8f69"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "4ce42f55-3f25-4b5a-aa54-671cd07b285f",
      "title": "LRAM by Process",
      "visualType": "table",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "8941d254-eb97-46ac-980a-0662fe8a4a88"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "81fc8700-6e7f-43c1-bd6d-036b61e48ba3",
      "title": "Lock by Calcsum",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 88, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "85c5dae6-dd5d-4d7a-b97e-8d8627d84d97"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "0ca7b891-2d18-4df8-b1fa-436c82c90017",
      "title": "Incoming WebServices Calls",
      "visualType": "timechart",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 43, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "4a01c986-f354-4ba3-a322-b1ff472babbb"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": true,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "430043db-0924-4275-96bd-7c2620dbf3d1",
      "title": "Lock by IsEmpty",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 96, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "99287ef5-8a1a-49ea-a24a-05b916a2a633"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b6ed5df9-e8cf-49db-b6db-404be057947a",
      "title": "LRQ Count and Average per Day buckets",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 63, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "42be5ec4-27bd-4f6e-aa64-1ded49417ff9"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "230bf4d2-9d35-46ec-a7b7-c3ee22a9e32d",
      "title": "LRQ Summarized by Object",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "91f62942-b52e-4cd3-ab1b-9a162d678f5d"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "0d9c7c7d-3fb5-4fa6-9308-286adf620062",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "avg_Duration", "values": ["1000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "4186711c-ee80-4f01-b933-caa6080b7c33",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              {
                "operator": "==",
                "column": "Isolation Level",
                "values": ["UPDLOCK"]
              },
              {
                "operator": "!=",
                "column": "Operation Type",
                "values": ["SELECT"]
              }
            ],
            "chainingOperator": "or",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "c0ffd532-c28a-4dcc-8eee-8dc83b4ea2d5",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              {
                "operator": "!=",
                "column": "Operation Type",
                "values": ["SELECT"]
              }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "6c7fe09d-8948-4d6a-b89f-dd20a39b8349",
      "title": "Today SQL Statistics",
      "visualType": "multistat",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 10, "y": 0, "width": 14, "height": 5 },
      "queryRef": {
        "kind": "query",
        "queryId": "4e2b032b-f06f-40ec-8859-f3666160edb8"
      },
      "visualOptions": {
        "multiStat__textSize": "large",
        "multiStat__valueColumn": null,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "multiStat__displayOrientation": "horizontal",
        "multiStat__labelColumn": null,
        "multiStat__slot": { "width": 3, "height": 1 },
        "colorRules": []
      }
    },
    {
      "id": "9eb001bc-9d0f-43f7-9ad7-c82e7b6a5b0a",
      "title": "SQL Deadlocks by Table",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 8, "width": 12, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "45ab4230-8d9e-47ee-bdee-014893a33fd6"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b5ef2a52-4641-4f7f-8111-ecfad3ea65d1",
      "title": "Page performance per Day",
      "visualType": "stacked100column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 73, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "d733d2a3-deaa-4c78-9e16-f9ed23b83285"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["count_"],
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "65f3f1c6-55d9-4799-a87a-667780537c1b",
      "title": "Outgoing WS Errors",
      "visualType": "table",
      "pageId": "61a90ca3-7409-4c63-93a7-c415f15e4ea3",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "fe2a5f50-44de-470c-b376-9fe6ec37ff82"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "9f1a080f-e85b-4a2a-b944-3ff24df8966b",
      "title": "LRAM by Process per hour",
      "visualType": "timechart",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 26, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "73d73f3f-9e5c-4af8-a824-6fadc1187b37"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "a692c101-13f5-4664-be6d-8202441261b7",
      "title": "LRQ By Process",
      "visualType": "table",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 39, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "a54e587f-077b-435b-8e83-1377540a52d2"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "ada8ab7e-45d0-4c85-b21f-48550df5ad8a",
      "title": "LRQ by Process per hour",
      "visualType": "timechart",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 52, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "3bc2da41-54ed-4b8e-b97d-ee46706cef43"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": [
          "ObjectType",
          "ObjectId",
          "ObjectName",
          "Source Process"
        ],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "f984a491-0c12-4652-8cff-cb91a8c7a042",
      "title": "Web Service Errors",
      "visualType": "table",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 36, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "472793e2-cc80-4429-8db1-6197c07314d0"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "8ef4ce1b-e009-4ad7-939e-7cd290cfbf1d",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 5000",
            "visualType": "table"
          },
          {
            "id": "0b1b883a-6153-437d-bc75-e7fbbceb0f6b",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["750"] },
              { "operator": "<=", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "fcf4faf9-79b1-4918-935f-e1f298637b29",
      "title": "Sales Order AVG (15 mins bucket)",
      "visualType": "line",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 11, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "47381110-7f5f-4ee7-8c82-96edb08b1e7b"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["Min. Time", "Avg. Time", "Max. Time"],
        "seriesColumns": ["AL Object Name"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "9a208ae6-3899-4899-9865-01f66829e543",
      "title": "Outgoing WS Errors Details",
      "visualType": "table",
      "pageId": "61a90ca3-7409-4c63-93a7-c415f15e4ea3",
      "layout": { "x": 0, "y": 8, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "fac541d5-3bc4-4b3a-a36f-ceb3b6a9fb05"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "f803ea14-c961-4270-88c9-e606c986af30",
      "title": "Page performance per Hour",
      "visualType": "column",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 41, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "7f15414c-2648-45ad-9fc5-761244e60cf0"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["count_"],
        "seriesColumns": ["perfBucket"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "f37d3811-e8d2-4893-852f-a7effcff96a2",
      "title": "Sales Order Count (15 mins bucket)",
      "visualType": "column",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 22, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "4cd15688-e72e-4abf-ba00-ff1a0bd9610a"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["Execution Count"],
        "seriesColumns": ["AL Object Name"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "6527c03a-e18a-4bbb-9888-ee3d562cd742",
      "title": "No. of Long Running SQL Queries (weekly)",
      "visualType": "column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 85, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "188bda06-cc59-46ee-b20d-ab08ec7ec458"
      },
      "visualOptions": {
        "xColumn": null,
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "yColumns": null,
        "seriesColumns": null,
        "hideLegend": true,
        "xColumnTitle": "",
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "edeff75b-3f3e-402a-aa9e-6cf63da97c96",
      "title": "No. of Long Running AL Methods (weekly)",
      "visualType": "column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 85, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "775ed9c8-97e8-4360-82ac-f4abe48ba74e"
      },
      "visualOptions": {
        "xColumn": null,
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "yColumns": null,
        "seriesColumns": null,
        "hideLegend": true,
        "xColumnTitle": "",
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": true,
        "drillthroughDisabled": false,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "84038a84-f704-4346-a981-79b8222635bb",
      "title": "No. of  SQL Deadlocks (weekly)",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 99, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "76a0dea3-6f61-474c-b4ef-3a8a61aeab9b"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "9e12e864-db6c-4256-a647-fe18b87f7b3a",
      "title": "No. of SQL Lock Timeout (weekly)",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 99, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "7f141fb1-2ef6-4364-aedc-69a5da3f4c73"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "be945e60-dbfa-440f-9014-613e5db668f2",
      "title": "Sales Order AVG per day",
      "visualType": "column",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 30, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "f42269b7-6ce9-4a6e-960f-fa6a77d2b77f"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["Avg. Time"],
        "seriesColumns": ["AL Object Name"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "bcdfa0c5-5ad1-47ea-9bde-2b53324b6a1e",
      "title": "Lock Timeouts",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 16, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "6d878e30-2cb5-4234-9916-a6c1958d0765"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "7646f4b7-fe5e-4d80-8657-91fcef071258",
            "ruleType": "colorByCondition",
            "applyToColumn": "Snapshot ID",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Snapshot ID", "values": [""] }
            ],
            "chainingOperator": "and",
            "colorStyle": "light",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "Snapshot ID >",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "565ee164-0a6f-40d7-95d4-fa8e7e097669",
      "title": "SQL Deadlocks (5 min buckets)",
      "visualType": "stackedcolumn",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 41, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "c6a73cb5-67f8-4d7d-9c42-a9cb6f537690"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "be7aaeb8-48b5-4dc4-98af-5b53d4f67f34",
      "title": "Job Queue Errors",
      "visualType": "table",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 27, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "87a2f223-8069-4f3b-b4cb-b06dc218f140"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "5ab24045-9239-450a-bdda-8b2c60f88688",
      "title": "LRAM Count and Average per Day buckets",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 55, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "8c7a42c5-40e0-4815-8150-e7beff9b71e2"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "9aff8892-39e8-4e24-b94b-ab881639421d",
      "title": "Platform Update",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "11ba2112-b2d3-489e-8af3-01e49bdfabf8"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "f7263d2a-a536-497b-9e89-91f7fb85f621",
      "title": "Long Running AL Method",
      "visualType": "table",
      "pageId": "fcc9ad9b-1031-4112-a14d-0b7ef25e08f4",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "7ef51f24-58b4-4d6d-b577-f7fb5eda130d"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "3cf175f3-271f-49c0-9fae-263578bfeec4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "07d56e7c-c695-41ff-9879-07b1344c20fb",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "bb06ea6f-c91d-42da-ba3b-601d1b92ff03",
      "title": "Long Running SQL Query",
      "visualType": "table",
      "pageId": "fcc9ad9b-1031-4112-a14d-0b7ef25e08f4",
      "layout": { "x": 0, "y": 10, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "d9769c33-5578-4d45-9c93-e8e8a5bd7bb1"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "3cf175f3-271f-49c0-9fae-263578bfeec4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "07d56e7c-c695-41ff-9879-07b1344c20fb",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "8c51e3c0-cdde-4f70-b4f2-053005d317e7",
      "title": "Incoming Web Service",
      "visualType": "table",
      "pageId": "fcc9ad9b-1031-4112-a14d-0b7ef25e08f4",
      "layout": { "x": 0, "y": 20, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "1cf6dfe5-52f0-4165-a783-b637c9410473"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "3cf175f3-271f-49c0-9fae-263578bfeec4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "07d56e7c-c695-41ff-9879-07b1344c20fb",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "e1611b1c-1564-4e30-99ef-1fb1b3042c23",
      "title": "SQL Profiler",
      "visualType": "table",
      "pageId": "b7cbe405-8397-4e84-8b4e-26734deb9c97",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 15 },
      "queryRef": {
        "kind": "query",
        "queryId": "db2de84f-41c1-4c8e-b254-3e8dc001427b"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "23c2b458-601c-4565-8900-7b8c50b565c7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "FlowFields", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "2e7eb1b9-cbec-4a3c-9673-ef16c6b364a4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Columns", "values": ["10"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "e9a16bc3-9147-4d01-a653-87a46089eac3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "537bbda9-c70a-417d-9052-9304bf8d53b8",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["INSERT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "cde0931c-68ad-488d-91b0-10152f10bd6a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["UPDATE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3d638158-e8b9-4e9c-b15e-15a9e8539f8e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["DELETE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "b594409b-e37d-44d5-9d83-1a246971628b",
      "title": "FlowFields",
      "visualType": "table",
      "pageId": "b7cbe405-8397-4e84-8b4e-26734deb9c97",
      "layout": { "x": 0, "y": 53, "width": 24, "height": 6 },
      "queryRef": {
        "kind": "query",
        "queryId": "48f393c2-b1da-45ad-bed8-27e520e3050d"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "23c2b458-601c-4565-8900-7b8c50b565c7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "FlowFields", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "2e7eb1b9-cbec-4a3c-9673-ef16c6b364a4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Columns", "values": ["10"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "e9a16bc3-9147-4d01-a653-87a46089eac3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "537bbda9-c70a-417d-9052-9304bf8d53b8",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["INSERT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "cde0931c-68ad-488d-91b0-10152f10bd6a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["UPDATE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3d638158-e8b9-4e9c-b15e-15a9e8539f8e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["DELETE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "c05f03fa-2828-469c-93ae-4949c8e236b4",
      "title": "AL Method by Duration",
      "visualType": "table",
      "pageId": "b7cbe405-8397-4e84-8b4e-26734deb9c97",
      "layout": { "x": 0, "y": 25, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "1c89653f-cd52-4bda-a9d1-e54b7e43c586"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "23c2b458-601c-4565-8900-7b8c50b565c7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "FlowFields", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "2e7eb1b9-cbec-4a3c-9673-ef16c6b364a4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Columns", "values": ["10"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "e9a16bc3-9147-4d01-a653-87a46089eac3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "537bbda9-c70a-417d-9052-9304bf8d53b8",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["INSERT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "cde0931c-68ad-488d-91b0-10152f10bd6a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["UPDATE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3d638158-e8b9-4e9c-b15e-15a9e8539f8e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["DELETE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "d7edbb38-b631-4e66-838c-dda934384fd1",
      "title": "Number Of Columns",
      "visualType": "table",
      "pageId": "b7cbe405-8397-4e84-8b4e-26734deb9c97",
      "layout": { "x": 0, "y": 44, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "4382b4c3-b2a7-4111-b029-b4a164b6fc17"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "23c2b458-601c-4565-8900-7b8c50b565c7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "FlowFields", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "2e7eb1b9-cbec-4a3c-9673-ef16c6b364a4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Columns", "values": ["10"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "e9a16bc3-9147-4d01-a653-87a46089eac3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "537bbda9-c70a-417d-9052-9304bf8d53b8",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["INSERT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "cde0931c-68ad-488d-91b0-10152f10bd6a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["UPDATE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3d638158-e8b9-4e9c-b15e-15a9e8539f8e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["DELETE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "5de97cc7-6650-40db-b834-219ba9180ac0",
      "title": "SELECT with UPDLOCK",
      "visualType": "table",
      "pageId": "b7cbe405-8397-4e84-8b4e-26734deb9c97",
      "layout": { "x": 0, "y": 35, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "062ec28a-16d8-41ef-968b-e1e798e88134"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "23c2b458-601c-4565-8900-7b8c50b565c7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "FlowFields", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "2e7eb1b9-cbec-4a3c-9673-ef16c6b364a4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Columns", "values": ["10"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "e9a16bc3-9147-4d01-a653-87a46089eac3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "537bbda9-c70a-417d-9052-9304bf8d53b8",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["INSERT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "cde0931c-68ad-488d-91b0-10152f10bd6a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["UPDATE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3d638158-e8b9-4e9c-b15e-15a9e8539f8e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["DELETE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "04c9afcf-e1a1-41d6-93b1-e4e3016a44cc",
      "title": "Calcsums with UPDLOCK",
      "visualType": "table",
      "pageId": "b7cbe405-8397-4e84-8b4e-26734deb9c97",
      "layout": { "x": 0, "y": 68, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "d3ab8ee4-c4bb-494d-87ff-70a9155ccbde"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "23c2b458-601c-4565-8900-7b8c50b565c7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "FlowFields", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "2e7eb1b9-cbec-4a3c-9673-ef16c6b364a4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Columns", "values": ["10"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "e9a16bc3-9147-4d01-a653-87a46089eac3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "537bbda9-c70a-417d-9052-9304bf8d53b8",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["INSERT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "cde0931c-68ad-488d-91b0-10152f10bd6a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["UPDATE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3d638158-e8b9-4e9c-b15e-15a9e8539f8e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["DELETE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "521312d3-0937-4873-8bb5-1b2ed82405d1",
      "title": "IsEmpty with UPDLOCK",
      "visualType": "table",
      "pageId": "b7cbe405-8397-4e84-8b4e-26734deb9c97",
      "layout": { "x": 0, "y": 59, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "98b24489-2a70-45ed-90d8-b40dc2b1e18c"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "23c2b458-601c-4565-8900-7b8c50b565c7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "FlowFields", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "2e7eb1b9-cbec-4a3c-9673-ef16c6b364a4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Columns", "values": ["10"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "e9a16bc3-9147-4d01-a653-87a46089eac3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "537bbda9-c70a-417d-9052-9304bf8d53b8",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["INSERT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "cde0931c-68ad-488d-91b0-10152f10bd6a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["UPDATE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3d638158-e8b9-4e9c-b15e-15a9e8539f8e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["DELETE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "43f1acfc-48c3-4b5d-bc31-fb18aa8dc502",
      "title": "SQL Statement by Duration",
      "visualType": "table",
      "pageId": "b7cbe405-8397-4e84-8b4e-26734deb9c97",
      "layout": { "x": 0, "y": 15, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "f73ccd77-7f25-4ec2-8685-5621b2a141e6"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "23c2b458-601c-4565-8900-7b8c50b565c7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "FlowFields", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "2e7eb1b9-cbec-4a3c-9673-ef16c6b364a4",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Columns", "values": ["10"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "e9a16bc3-9147-4d01-a653-87a46089eac3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "537bbda9-c70a-417d-9052-9304bf8d53b8",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["INSERT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "cde0931c-68ad-488d-91b0-10152f10bd6a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["UPDATE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3d638158-e8b9-4e9c-b15e-15a9e8539f8e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Type", "values": ["DELETE"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "faebfd3b-f717-46a0-921e-da27d397149f",
      "title": "Active Users by Hour",
      "visualType": "stackedcolumn",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 5, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "6eea6c52-77da-4d97-8029-d5fc3569d6e6"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "988449c2-3bd4-4398-907e-0aee17d4e37f",
      "title": "Job Queue Errors",
      "visualType": "column",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 36, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "53ce9a45-b660-40f7-b19f-3998ad3fa22e"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["count_"],
        "seriesColumns": ["description"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "96487c2e-fde2-4bb3-8be1-1a193ff8ee9f",
      "title": "Scheduled Task Errors",
      "visualType": "table",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 45, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "f9dda5c8-43bb-4b6c-8d5d-034fe4b8415c"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "09a3c9e0-e727-4e75-8b87-ea8c0b506d48",
      "title": "What was running : LRAM",
      "visualType": "table",
      "pageId": "25783131-8d46-4a37-84c0-09b097e021b3",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "50b9b9ae-86d2-4505-ac1e-67d63c0f170c"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "d9178135-6b05-4a34-8281-b1084b6c1d22",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Outbound", "values": ["true"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Outbound Signal",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "a116d4b6-8a40-4af5-adaa-754f1136b90f",
      "title": "What was running : LRQ",
      "visualType": "table",
      "pageId": "25783131-8d46-4a37-84c0-09b097e021b3",
      "layout": { "x": 0, "y": 9, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "5d42d464-59b4-4d01-bda9-c7bfb5f3008e"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2d9211b5-fa1a-45fe-b8e6-7d4bc17b7905",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Outbound", "values": ["true"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Outbound Signal",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "17efeb66-e486-4cde-8cbc-d5cd0188aeea",
      "title": "What was running : Report",
      "visualType": "table",
      "pageId": "25783131-8d46-4a37-84c0-09b097e021b3",
      "layout": { "x": 0, "y": 18, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "a1eeaa0c-9497-4ba5-aed3-fd1ae2956cad"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "76c2956c-58f0-4b39-acae-bbdc7ae4735f",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Outbound", "values": ["true"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Outbound Signal",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "232867c1-aeba-402f-a974-47062c727cfa",
      "title": "Page performance per Day",
      "visualType": "stacked100column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 61, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "607ba1d3-3e27-4eee-b2c0-b6b7b6245869"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["count_"],
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "c00246aa-f0b8-4b9a-8e34-20a76ad32d38",
      "title": "SQL Execution Chart by Duration",
      "visualType": "stackedcolumn",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 46, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "d28fe19c-5c5e-4d94-9cc6-034bc6bd4f4c"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "4ff8cab0-74dc-496a-872c-205f953fdde0",
      "title": "SQL LockTimeout by Table",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 12, "y": 8, "width": 12, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "1d66ae92-b0e8-420a-98ff-2d8db6e7ba83"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "be7f49b0-04d4-476e-bb23-c189bfd7eac9",
      "title": "Object involved in Timeout",
      "visualType": "pie",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 51, "width": 11, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "7df66036-6901-4dde-bd32-3c5b79576214"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "42b8bb51-e60f-42dd-8fb4-53af9db22ee3",
      "title": "Locked Tables in Timeout",
      "visualType": "pie",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 11, "y": 51, "width": 13, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "8186a9d3-472a-4d4c-91c4-d2dddd07282c"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "0cc6e122-ed5d-4d53-a0a7-1786f0caa812",
      "title": "Lock Timeouts",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 59, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "0e6e3cf7-72f6-4440-b605-5b51063e5b44"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "6552aeea-009a-4d0e-b3c3-a51a932a1803",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Snapshot ID", "values": [""] }
            ],
            "chainingOperator": "and",
            "colorStyle": "light",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "Snapshot ID >",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "eecffcd5-5314-457a-ab0e-8e15cf918d6e",
      "title": "Top 50 SQL Queries that holds Database Locks",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 79, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "ea1f8e8f-e724-41fe-907d-aaef28d48013"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "cabc15a3-a959-455d-8971-0e55618be9e3",
      "title": "SetLoadFields",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 103, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "0000e61c-1399-43b1-883d-8b602f709d9d"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b44c1cd9-ad07-4e9c-9c52-667bab01965b",
      "title": "Long Running AL methods (ms)",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 20, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "9530d75b-41c7-424f-ac7a-1e1a52870369"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "fc2f1c60-3b4e-41b5-bbac-7c216e80d9a3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": ">", "column": "Duration", "values": ["30000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "Duration > 30000",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "29efe2ce-1423-4210-a33e-c0b2a798417a",
      "title": "Report Execution and Intent",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 65, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "f520cfa8-b490-431f-95f6-c5381fe9b886"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "f03a62de-35b9-4b3f-b40a-bea9a1940d4d",
      "title": "Page Views Count and Average per Day buckets",
      "visualType": "table",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 53, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "ad7a285b-9f4f-4510-91f6-2ad82dce4890"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "32ba0134-eaa0-4d3c-bb99-8b4e28d9f26a",
      "title": "Page performance < 3 sec.",
      "visualType": "pie",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 61, "width": 12, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "2f70c4e5-db21-41df-a7e7-fc699c3bc21c"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "951b8ad8-39af-4404-a21d-1c48819fc95b",
      "title": "Page Performance > 3 sec.",
      "visualType": "pie",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 12, "y": 61, "width": 12, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "6f57d476-d803-4495-997c-52ec9ef8c3af"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "9c895c6e-70bb-48a5-896c-d7b5a9ccbebd",
      "title": "LRAM Summarized by Object",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "5f97ca3a-dea6-4981-a1f0-5952e4a2975c"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "7a9487c1-634e-4530-9986-da0e52f9c2d6",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "avg_Duration", "values": ["1000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "avg_Duration > 1000",
            "visualType": "table"
          },
          {
            "id": "6d4a660c-95eb-4183-b5c9-a80f707a1f41",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [{ "column": null, "operator": ">", "values": [""] }],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": null,
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "c7a0a993-85fb-48f7-95b8-e2babf99876f",
      "title": "Long Running SQL Queries: DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "99f7dad2-c900-46dd-89ee-d8f4f16678b2",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "86b4eaf1-8372-43f1-9545-5ea9bd175d1a"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "f4b151cd-ad53-4ee0-993f-46c0c1f29917",
      "title": "No. of Long Running AL Methods : DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "99f7dad2-c900-46dd-89ee-d8f4f16678b2",
      "layout": { "x": 0, "y": 12, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "b0460daa-52b3-4c4f-bd95-e34c9719f76f"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "fc65e0f0-417c-4729-9457-200faa923d37",
      "title": "No. of Deadlocks DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "99f7dad2-c900-46dd-89ee-d8f4f16678b2",
      "layout": { "x": 0, "y": 24, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "71399372-a651-4bb9-b614-eab2f47c2fe6"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "bfaa6ad3-fad6-4d10-81a6-1c8f202fed20",
      "title": "No. of SQL Lock Timeout DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "99f7dad2-c900-46dd-89ee-d8f4f16678b2",
      "layout": { "x": 0, "y": 36, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "dd5e5040-9fa0-4e3f-8457-d193cc285933"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "508c1613-bfcd-49b9-b79a-84eaaffb219e",
      "title": "Incoming WebServices Calls DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "99f7dad2-c900-46dd-89ee-d8f4f16678b2",
      "layout": { "x": 0, "y": 48, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "8abd7c53-7c34-4df3-94cd-67d13e1091de"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "938e33e8-3781-4f8e-ba82-484540410fe4",
      "title": "Avg. of Long Running SQL Queries",
      "visualType": "column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 113, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "a09196eb-96ed-4eff-a30b-029cfde537af"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "d3ae6277-6308-49e0-a1aa-4bb512dafff5",
      "title": "Avg. of Long Running AL Methods (weekly)",
      "visualType": "column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 113, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "2d497629-bc06-46ae-83a5-83b7cb4c6c41"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "c57af1d7-7699-4014-bad9-c3099398481e",
      "title": "Top 10 Objects used during the Long SQL Queries (LOCKING)",
      "visualType": "pie",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 84, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "1bf37e7f-1ff1-4c58-bb34-1edc82528873"
      },
      "visualOptions": {
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "1e948851-ed83-48fb-998d-be3a213594d8",
      "title": "Duration of Long Running SQL Queries",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 0, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "98e59d0f-4eab-4aa0-b40d-78ca26fbcad4"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "678867dd-b531-4f93-af4f-083ac7e718ad",
      "title": "Duration of Long Running AL Methods",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 14, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "26bc3608-4605-48a3-8fe3-999af0bda4c5"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "4837a4b5-3c76-41a1-ae1e-3e28d95e98c9",
      "title": "Active Sessions by Hour",
      "visualType": "stackedcolumn",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 13, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "6b55148f-054f-4283-a5ab-5d3d0eddb2a4"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "0fb6071e-08de-48bf-9640-ffcc534e23f3",
      "title": "Report Intent",
      "visualType": "table",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 27, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "c6e450e2-b751-4267-adff-2c68f9c835e4"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b178d213-eee0-465b-8f56-d4669cfdfb77",
      "title": "IVC Anlysis",
      "visualType": "table",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 38, "width": 11, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "b5bbf09f-b48f-42c7-b1ef-ebb258114abe"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b4b2626b-48c8-4e23-b72e-ff2e9a98df58",
      "title": "Lock by COUNT",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 111, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "24bd7f5c-46e1-42c5-be59-d40ed8d449b3"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "906e9cf2-8b43-44cd-9403-b34f8b1e59a8",
      "title": "IVC",
      "visualType": "table",
      "pageId": "0e3c325c-0417-43aa-a2cc-86316197769f",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "b312229d-931c-4c7e-a1c4-b27c68edd30f"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "a7f544f1-27b7-4089-a5cd-627a76a9bb2c",
      "title": "SPB Bonus Details",
      "visualType": "table",
      "pageId": "0e3c325c-0417-43aa-a2cc-86316197769f",
      "layout": { "x": 0, "y": 10, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "79f08fe2-bec9-49b8-8bad-1a4ab8dbd59d"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "82582032-7f10-47a4-80e1-83dd73908035",
      "title": "SPB Bonus by Bonus Line",
      "visualType": "table",
      "pageId": "0e3c325c-0417-43aa-a2cc-86316197769f",
      "layout": { "x": 0, "y": 19, "width": 11, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "c26ccea3-ba80-4dd8-923e-5e07eac1e896"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "e5ae6410-2916-4dc7-b692-12a9646d197c",
      "title": "SPB Bonus by Bonus Line Top 10",
      "visualType": "pie",
      "pageId": "0e3c325c-0417-43aa-a2cc-86316197769f",
      "layout": { "x": 11, "y": 19, "width": 13, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "47612ef9-517d-48f6-82f8-fc7b3bff3a96"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": "bonusLine",
        "yColumns": ["totalDuration"],
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "donut",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "7e6908a7-e022-4ec2-b37a-07b4042c79a3",
      "title": "SPB Bonus by Event",
      "visualType": "table",
      "pageId": "0e3c325c-0417-43aa-a2cc-86316197769f",
      "layout": { "x": 0, "y": 30, "width": 11, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "ecdcc6a3-57ef-4d60-bcdf-c4dafa5c382b"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "ff834421-e25a-442b-afb3-f0e8c06c9ebd",
      "title": "SPB Bonus by Event",
      "visualType": "bar",
      "pageId": "0e3c325c-0417-43aa-a2cc-86316197769f",
      "layout": { "x": 11, "y": 30, "width": 13, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "257c9bd2-cb7c-4031-8323-b01995d8c6b6"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": ["totalDuration"],
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "cc249578-14dc-4154-ba0d-e554832e63e0",
      "title": "SPB Bonus by LRAM",
      "visualType": "table",
      "pageId": "0e3c325c-0417-43aa-a2cc-86316197769f",
      "layout": { "x": 0, "y": 40, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "c7c1e1d2-46d0-42fd-b71e-a021ab2732c9"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "25e5789a-71c8-430c-8730-42e744818c59",
      "title": "SPB Bonus by LRQ",
      "visualType": "table",
      "pageId": "0e3c325c-0417-43aa-a2cc-86316197769f",
      "layout": { "x": 0, "y": 50, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "04e136af-6267-45de-ad65-8fbdad273132"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "89c79bae-e6ed-46a6-8ea4-968ab250da73",
      "title": "Web Service Calls Timeline by Duration",
      "visualType": "timechart",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 26, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "831129f3-8e39-4110-a643-036c885c2117"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [
            {
              "id": "886a1d89-b6dd-4e4b-bee6-825dd5457e4a",
              "columns": ["Duration"],
              "label": "",
              "yAxisMaximumValue": null,
              "yAxisMinimumValue": null,
              "yAxisScale": "linear",
              "horizontalLines": []
            }
          ],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": ["Occurrance", "Duration"],
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "c33a4b1b-24ec-4c54-9d57-461a7ca6241c",
      "title": "LRQ Count and Average per Day buckets",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 10, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "0de8c23c-399a-440b-9344-789083b1a505"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "8e747247-4a2d-4620-a5fc-2d7434a2b0b8",
      "title": "LRQ Count and Average per 5 min buckets",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 74, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "35220ce5-eeaf-43da-837a-ad7957c7b907"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "271b042f-1732-46d8-8e1c-7814560b368a",
      "title": "API Method by Duration",
      "visualType": "pie",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 17, "width": 12, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "b52f385a-2042-4f93-8cf5-9fd5f7aae3f0"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": ["Total Time"],
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "donut",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "bb28f324-f01f-42d6-a95b-11aeef39cc37",
      "title": "API Method by Occurrance",
      "visualType": "pie",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 12, "y": 17, "width": 12, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "95c06750-aedf-4c8d-8927-3b19046be80b"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": ["count_"],
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "donut",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    }
  ],
  "dataSources": [
    {
      "id": "99a3b70c-8819-4cce-844b-3c83734afb29",
      "kind": "manual-kusto",
      "scopeId": "kusto",
      "name": "bcinsight",
      "clusterUri": "https://ade.applicationinsights.io/subscriptions/YourSubscriptionHere",
      "database": "Mollo_Customer"
    }
  ],
  "schema_version": "60",
  "pagesNavWidth": 180.59999084472656,
  "autoRefresh": {
    "enabled": true,
    "defaultInterval": "30m",
    "minInterval": "1m"
  },
  "baseQueries": [
    {
      "id": "e659a76d-4249-4d98-af8b-88cd8fa0c8b7",
      "queryId": "de6744ba-af86-46a4-8dc3-eba07834e3fb",
      "variableName": "bctraces"
    },
    {
      "id": "c9bbae0c-e8d3-438d-88bc-11f00e92f8e3",
      "queryId": "72898c5b-5162-48a0-bc26-c4d1c582c9a3",
      "variableName": "bcpageviews"
    },
    {
      "id": "44751e61-649b-4c24-8a0b-60f616e7fb1e",
      "queryId": "5ccb0760-dfe7-4e49-8bea-b01bd3c4f20d",
      "variableName": "spbTraces"
    }
  ],
  "parameters": [
    {
      "kind": "duration",
      "id": "14f4fdfe-2079-4e7d-b5fd-a649cdba5516",
      "displayName": "Time Window",
      "description": "",
      "beginVariableName": "_startTime",
      "endVariableName": "_endTime",
      "defaultValue": { "kind": "dynamic", "count": 1, "unit": "hours" },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "string",
      "id": "b70bde5b-1300-48e1-95c9-1f8f1519fc67",
      "displayName": "Client Type",
      "description": "",
      "variableName": "_clientType",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Client Type" },
        "queryRef": {
          "kind": "query",
          "queryId": "6b394b72-66d0-4ee2-b924-84b8c11281d3"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "string",
      "id": "9afff05d-ae00-4050-8ade-5fede3b5648e",
      "displayName": "Company Name",
      "description": "",
      "variableName": "_companyName",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Company Name" },
        "queryRef": {
          "kind": "query",
          "queryId": "6e5245dc-e98d-4669-bd80-c0d4438b1dcd"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "string",
      "id": "9cc55dcf-17d4-4829-9340-37c385862cdf",
      "displayName": "Publisher",
      "description": "",
      "variableName": "_publisher",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Publisher" },
        "queryRef": {
          "kind": "query",
          "queryId": "f356a791-55f7-40f1-8657-e9bbcdb9a054"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "int",
      "selectionType": "freetext",
      "id": "79f54d5e-e6ca-454c-a1de-1b53601ae873",
      "displayName": "No. of Joins",
      "variableName": "_joins",
      "description": "",
      "defaultValue": { "kind": "value", "value": 0 },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["d1a3fbcf-a4a6-4912-ab95-fd07bfe32849"]
      }
    },
    {
      "kind": "real",
      "id": "373dbe29-1441-456c-9db1-78429b4a74fe",
      "displayName": "Object Id",
      "description": "",
      "variableName": "_objectID",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "AL Object ID", "label": "AL Object ID" },
        "queryRef": {
          "kind": "query",
          "queryId": "c7d1f045-43bc-4b64-9ba0-22f497bc70d1"
        }
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["a766ad41-9070-40d7-8dd7-70676512faaa"]
      }
    },
    {
      "kind": "string",
      "id": "b11d8163-c8dd-4f83-bbd3-705da109bdee",
      "displayName": "Session Id",
      "description": "",
      "variableName": "_sessionId",
      "selectionType": "scalar",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Session Id" },
        "queryRef": {
          "kind": "query",
          "queryId": "783e503b-3127-4304-88f5-702a7f19189a"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "datetime",
      "id": "faae011a-19c6-437e-a04c-d7de238ed7ad",
      "displayName": "Specific Date Time",
      "description": "",
      "variableName": "_SelectedDateTime",
      "selectionType": "scalar",
      "includeAllOption": true,
      "defaultValue": { "kind": "value", "value": 1672527600000 },
      "dataSource": {
        "kind": "static",
        "values": [{ "value": 1672527600000 }]
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["8ebc7a2e-d0e0-42ba-814e-d6fab6ad7332"]
      }
    },
    {
      "kind": "string",
      "id": "d55c2559-d898-4ea9-b5ba-c281fe7109fb",
      "displayName": "User Id",
      "description": "",
      "variableName": "_userId",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "User Id" },
        "queryRef": {
          "kind": "query",
          "queryId": "357c1cba-4b42-4104-b045-bd1c3c113473"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "duration",
      "id": "89ff7f49-0da4-4d40-89b8-4f627d70c3ca",
      "displayName": "Update Time Range",
      "description": "",
      "beginVariableName": "_previousUpdateStartTime",
      "endVariableName": "_updateStartTime",
      "defaultValue": { "kind": "dynamic", "count": 1, "unit": "hours" },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["fcc9ad9b-1031-4112-a14d-0b7ef25e08f4"]
      }
    },
    {
      "kind": "int",
      "selectionType": "freetext",
      "id": "62cff231-7106-41ae-a3b1-21046c9f0512",
      "displayName": "Count Limit",
      "variableName": "_countLimit",
      "description": "",
      "defaultValue": { "kind": "value", "value": 100 },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["fcc9ad9b-1031-4112-a14d-0b7ef25e08f4"]
      }
    },
    {
      "kind": "bool",
      "id": "4393d010-d1d8-498f-b16e-6cbdab053137",
      "displayName": "Working Hours",
      "description": "",
      "variableName": "_OnlyWorkingHours",
      "selectionType": "scalar",
      "includeAllOption": false,
      "defaultValue": { "kind": "value", "value": false },
      "dataSource": {
        "kind": "static",
        "values": [{ "value": true }, { "value": false }]
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "string",
      "id": "efd974c6-c410-4337-a403-4d6a5b444497",
      "displayName": "Web Service Type",
      "description": "Select the type of Web Services call you wanna see",
      "variableName": "_WSType",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "WS Type" },
        "queryRef": {
          "kind": "query",
          "queryId": "0adf4794-f9c0-41f3-8ae3-bfcb75b092b1"
        }
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": [
          "9bd8a199-ba41-40fa-87b8-f9833a040b03",
          "61a90ca3-7409-4c63-93a7-c415f15e4ea3"
        ]
      }
    },
    {
      "kind": "string",
      "id": "ef63d3ba-7cce-4405-8945-1a42233270ea",
      "displayName": "SPB Session Id",
      "description": "",
      "variableName": "_spbSessionId",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "query-result" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Session ID" },
        "queryRef": {
          "kind": "query",
          "queryId": "cd69903b-d3b3-4983-8af3-586f25750e6f"
        }
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["0e3c325c-0417-43aa-a2cc-86316197769f"]
      }
    }
  ],
  "pages": [
    { "name": "Overview", "id": "f5885bb6-1db1-42c3-888b-fa857a7b39fd" },
    { "name": "Statistics", "id": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e" },
    { "name": "SQL Query Usage", "id": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849" },
    {
      "name": "Deadlocks / Locks",
      "id": "5464aca4-0e79-4cc9-acaf-5bfcba11b235"
    },
    { "name": "AL Usage", "id": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8" },
    {
      "name": "Page Performance",
      "id": "41c2b22e-69f3-4513-9227-26c3c42e9a08"
    },
    { "name": "Incoming WS", "id": "9bd8a199-ba41-40fa-87b8-f9833a040b03" },
    { "name": "Outgoing WS", "id": "61a90ca3-7409-4c63-93a7-c415f15e4ea3" },
    { "name": "Job Queue", "id": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7" },
    { "name": "Miscellaneous", "id": "a766ad41-9070-40d7-8dd7-70676512faaa" },
    { "name": "Environment", "id": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4" },
    { "name": "Data Ingestion", "id": "1a9f99e5-2026-4f32-a914-3ee9e64ce31e" },
    { "name": "Details", "id": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54" },
    { "name": "Post Update", "id": "fcc9ad9b-1031-4112-a14d-0b7ef25e08f4" },
    {
      "name": "What Was Running",
      "id": "25783131-8d46-4a37-84c0-09b097e021b3"
    },
    { "name": "SQL Profiler", "id": "b7cbe405-8397-4e84-8b4e-26734deb9c97" },
    { "name": "Trends", "id": "99f7dad2-c900-46dd-89ee-d8f4f16678b2" },
    { "name": "EOS Apps", "id": "0e3c325c-0417-43aa-a2cc-86316197769f" }
  ],
  "queries": [
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| extend alObjectName = tostring(customDimensions.alObjectName)\n| extend extensionName = tostring(customDimensions.extensionName)\n| extend eventId = customDimensions.eventId \n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = tostring(customDimensions.clientType)\n, companyName = tostring(customDimensions.companyName)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n, extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement) )\n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Default'\n)\n| sort by timestamp desc \n| project timestamp, \n    [\"Client Type\"] = clientType, \n    [\"Company\"] = companyName,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Duration\"] = executionTimeInMS, \n    [\"Type\"] = operationType, \n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Object Information\"] = alObjectInfo, \n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"Extension Information\"] = extensionInfo,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Isolation Level\"] = isolationLevel,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id\n    ",
      "id": "7c74aece-21e1-4a6d-90b0-825a43a5c4ec",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let Timeouts = bctraces \n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , extensionName = tostring(customDimensions.extensionName)\n| extend snapshotId = tostring( customDimensions.snapshotId )\n| project snapshotId, timestamp\n, [\"AL Object Type\"] = customDimensions.alObjectType\n, [\"AL Object Id\"] = customDimensions.alObjectId\n, [\"AL Object Name\"] = alObjectName\n, [\"AL Stack Trace\"] = stackTrace\n, [\"AL Execution Method\"] = customDimensions.alExecutingMethodScope\n, [\"Extension Name\"] = customDimensions.extensionName\n, [\"Extension Version\"] = customDimensions.extensionVersion\n, [\"User Telemetry Id\"] = case(\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n;\nTimeouts\n| join (bctraces\n| where customDimensions.eventId == 'RT0013'\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , extensionName = tostring(customDimensions.extensionName)\n| extend snapshotId = tostring( customDimensions.snapshotId )\n| project snapshotId\n, alObjectTypeHoldingLock = customDimensions.alObjectType\n, alObjectIdHoldingLock = customDimensions.alObjectId\n, alObjectNameHoldingLock = alObjectName\n, alStackTraceHoldingLock = stackTrace\n, alExecutionMethodHoldingLock = customDimensions.alExecutingMethodScope\n, sqlTableLocked = customDimensions.sqlTableName\n, sqlLockResourceType = customDimensions.sqlLockResourceType\n, sqlLockRequestMode = customDimensions.sqlLockRequestMode\n, sqlLockRequestStatus = customDimensions.sqlLockRequestStatus\n, sqlServerSessionId = customDimensions.sqlServerSessionId\n, alSessionIdHoldingLock = customDimensions.sessionId\n, extensionNameHoldingLock = extensionName\n, extensionVersionHoldingLock = customDimensions.extensionVersion\n, clientTypeHoldingLock = customDimensions.clientType\n)\non $left.snapshotId == $right.snapshotId\n| order by snapshotId\n| project-away snapshotId1\n",
      "id": "f43372a7-7170-4770-9f26-79301146336b",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , \"OTHERS\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n| extend isLocking = iff(withUPDLOCK == 'Yes', 'Yes', \n     iff(operationType in (\"UPDATE\",\"DELETE\",\"INSERT\"), 'Yes', 'No'))\n| project timestamp, isLocking\n| summarize count() by bin(timestamp, 10min),isLocking\n| render timechart",
      "id": "f4720c55-949d-4faf-96aa-ed4eb39fd3bf",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nbctraces\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| extend alObjectName = tostring(customDimensions.alObjectName)\n| extend alObjectInfo = strcat(tostring(customDimensions.alObjectType), ' ', tostring(customDimensions.alObjectId), ' - ',alObjectName)\n| summarize count() by alObjectInfo\n| sort by count_\n| limit _maxCount ",
      "id": "a5aae1b9-fdc2-4c5a-a4b4-cc652e525c0f",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nbctraces\n| where customDimensions.eventId == 'RT0018'\n| extend extensionName = tostring(customDimensions.extensionName)\n  , alObjectName = tostring(customDimensions.alObjectName)\n  , alMethod = tostring( customDimensions.alMethod) \n| extend environmentName = tostring(customDimensions.environmentName)\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, suspendedTime = customDimensions.suspendedTime // will come on 22.x\n, extensionInfo = strcat( extensionName, ' ', customDimensions.extensionVersion)\n, clientType = tostring(customDimensions.clientType)\n, exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n, exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n, alStackTrace = tostring(customDimensions.alStackTrace)\n, longRunningThreshold = tostring(customDimensions.longRunningThreshold)\n, longRunningThresholdInMS = toreal(totimespan(customDimensions.longRunningThreshold))/10000 //the datatype for executionTime is timespan \n, sqlExecutes = toint(customDimensions.sqlExecutes) // This dimension was introduced in Business Central 2023 release wave 1, version 22.0\n, sqlRowsRead = toint(customDimensions.sqlRowsRead) // This dimension was introduced in Business Central 2023 release wave 1, version 22.0\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A')\n| summarize count(), sum( executionTimeInMS ), avg( executionTimeInMS ), sum(exclusiveTimeInMS), avg(exclusiveTimeInMS) by environmentName, alObjectInfo, alMethod, extensionInfo, clientType, alStackTrace, longRunningThreshold, longRunningThresholdInMS, sqlExecutes, sqlRowsRead, usertelemetryId, session_Id\n| order by avg_executionTimeInMS desc \n| project \n    [\"Environment Name\"] = environmentName,\n    [\"AL Object Information\"] = alObjectInfo,\n    [\"Extension Information\"] = extensionInfo,\n    [\"Client Type\"] = clientType,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInMS, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInMS,2),\n    [\"Avg Exclusive Time\"] = round(avg_exclusiveTimeInMS,2),\n    [\"Total Exclusive Time\"] = round(sum_exclusiveTimeInMS,2),\n    [\"SQL Executes\"] = sqlExecutes,\n    [\"SQL Rows Read\"] = sqlRowsRead,\n    [\"AL Method\"] = alMethod,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"User Telemetry ID\"] = usertelemetryId,\n    [\"Session Id\"] = session_Id\n| limit _maxCount",
      "id": "54dd6244-f609-44e5-8c71-50192e95d219",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _upperLimit = 5000;\nlet _appInsightsTraces = materialize  (\n    bctraces\n    | where customDimensions.eventId == \"RT0005\"\n    | where customDimensions.alObjectId > 0\n);\nlet _lowerThresholdinMs = toscalar (\n    _appInsightsTraces\n    | limit 1\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | extend _longRunningThresholdInMS = iff(toreal(customDimensions.longRunningThresholdInMs) > 0, \n            toreal(customDimensions.longRunningThresholdInMs),\n            toreal(totimespan(customDimensions.longRunningThreshold))/10000)\n    | project tostring(toint(_longRunningThresholdInMS))\n);\nlet _totalQueries = toscalar (\n    _appInsightsTraces\n    | count \n);\nlet _tooManyJoins = toscalar (\n    _appInsightsTraces\n    | extend sqlStatement = tostring(customDimensions.sqlStatement)\n    | extend _numberOfJoins = countof(sqlStatement, \"JOIN\")\n    | where _numberOfJoins > 5\n    | count \n);\nlet _longQueries = toscalar (\n    _appInsightsTraces\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | where _executionTimeInMS > toint(customDimensions.longRunningThresholdInMs) and _executionTimeInMS < _upperLimit\n    | count \n);\nlet _veryLongQueries = toscalar (\n    _appInsightsTraces\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | where _executionTimeInMS >= _upperLimit\n    | count \n);\n_appInsightsTraces\n| limit 1\n| project strcat(\n                \"|\",\"Total Queries\", \n                \"|\", \"Long Running Queries\", \n                \"|\", \"Very Long Running Queries\", \n                \"|\", \"Queries with  many Joins\", \"|\\n\", \n                \"|------------------|:---------------|:---------------|:---------------|\\n\",\n                \"|\", _totalQueries, \"|\", _longQueries, \"|\", _veryLongQueries, \"|\", _tooManyJoins, \"\\n\",\n                \"\\n **Note:** \\n\",\n                \"- The **Lower Threshold** is defined as greater than \", _lowerThresholdinMs, \" ms and less than \", _upperLimit, \" ms\\n\",\n                \"- The **Upper Threshold** is defined greater than or equal to \", _upperLimit, \" ms\\n\")\n\n\n",
      "id": "1e26b01a-62c1-44d1-a86d-6ba732299042",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize  (\n    bctraces\n    | where customDimensions.eventId == \"RT0018\"\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | extend _longRunningThresholdInMS = iff(toreal(customDimensions.longRunningThresholdInMs) > 0, \n            toreal(customDimensions.longRunningThresholdInMs),\n            toreal(totimespan(customDimensions.longRunningThreshold))/10000)\n    | where _executionTimeInMS > _longRunningThresholdInMS\n    | project timestamp, message, [\"alObjectType\"] = toupper(customDimensions.alObjectType), customDimensions          \n);\nlet _thresholdInMs = toscalar (\n    _appInsightsTraces\n    | limit 1\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | extend _longRunningThresholdInMS = iff(toreal(customDimensions.longRunningThresholdInMs) > 0, \n            toreal(customDimensions.longRunningThresholdInMs),\n            toreal(totimespan(customDimensions.longRunningThreshold))/10000)\n    | project tostring(toint(_longRunningThresholdInMS))\n);\nlet _longPages = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"PAGE\" \n    | count \n);\nlet _longCodeunits = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"CODEUNIT\" \n    | count \n);\nlet _longReports = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"REPORT\" \n    | count \n);\nlet _longQueries = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"QUERY\" \n    | count \n);\nlet _longXMLPorts = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"XMLPORT\" \n    | count \n);\nlet _longTables = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"TABLE\" \n    | count \n);\nlet _longPageExtensions = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"PAGEEXTENSION\" \n    | count \n);\nlet _longTableExtensions = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"TABLEEXTENSION\" \n    | count \n);\nlet _longReportExtensions = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"REPORTEXTENSION\" \n    | count \n);\n_appInsightsTraces\n| limit 1\n| extend Md = strcat('|', _longTables, \n                     '|', _longPages, \n                     '|', _longCodeunits, \n                     '|', _longReports, \n                     '|', _longXMLPorts,\n                     '|', _longQueries,\n                     '|', _longTableExtensions,\n                     '|', _longPageExtensions,\n                     '|', _longReportExtensions)\n| summarize Md = make_list(Md)\n| extend Md = strcat_array(Md, ' \\n')\n| extend Md = strcat('| Table | Page | Codeunit | Report | XMLport | Query | Table Extension | Page Extension | Report Extension |\\n|'\n                      '-------|-------|-------|-------|-------|-------|-------|-------|-------|\\n ', Md)",
      "id": "05ccee90-4d97-45e2-91fb-73600551f195",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize  (\n    bctraces\n    | where customDimensions.eventId in (\"AL0000E24\", \"AL0000E25\", \"AL0000E26\")\n);\nlet _startedEntries = toscalar (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E25\"\n    | count\n);\nlet _successEntries = toscalar (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E26\"\n    | where customDimensions.alJobQueueResult == 'Success'\n    | count\n);\nlet _failedEntries = toscalar (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E26\"\n    | where customDimensions.alJobQueueResult == 'Fail'\n    | count\n);\nlet _enqueuedEntries = toscalar (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E24\"\n    | count\n);\nlet _recurringEntries = toscalar (\n     _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E24\"\n    | where tostring(customDimensions.alJobQueueIsRecurring) == 'Yes'\n    | count \n);\n_appInsightsTraces\n| distinct tostring(customDimensions.alJobQueueId)\n| limit 1\n| extend Md = strcat('|', _startedEntries, \n                     '|', _successEntries, \n                     '|',  _failedEntries,\n                     '|', (_startedEntries - _successEntries - _failedEntries), \n                     '|', (_enqueuedEntries - _recurringEntries), \n                     '|', _recurringEntries)\n| summarize Md = make_list(Md)\n| extend Md = strcat_array(Md, ' \\n')\n| extend Md = strcat('| Started | Successful | Failed | In Progress | Enqueued | Recurring|\\n|'\n                      '-------|-------|-------|-------|-------|-------|\\n ', Md)",
      "id": "77c9d9a0-582e-4434-8210-f7342f7fa5b7",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , extensionName = tostring(customDimensions.extensionName)\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n  , timestamp\n| summarize count() by bin(timestamp,5min), clientType\n",
      "id": "cd991eff-fbbb-4394-9c7a-174e418ceccd",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _searchSting = 'AL CallStack: ';\nbctraces\n| where customDimensions.eventId == 'RT0005'\n| where customDimensions.sqlStatement has 'UPDLOCK'\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , extensionName = tostring(customDimensions.extensionName)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablenamewithjoins: string \"\\\\$\" space: string\n| parse kind=regex tablenamewithjoins with tablenaamenojoins: string \"\\\\$\" newspace : string \n| parse kind=regex tablenaamenojoins with space2: string \"\\\\$\" onlytablenamenojoins: string \n//| parse kind=regex tablenamewithjoins with stringtoeliminate: string \"\\\\$\" tablenamewithoutjoins: string\n| extend tablename = case(\n    tablenamewithjoins contains \"$\", onlytablenamenojoins\n    , tablenamewithjoins \n)\n| project timestamp\n, [\"Client Type\"] = tostring(customDimensions.clientType)\n, [\"Duration (sec)\"] = toreal(totimespan(customDimensions.executionTime))/10000000 \n, [\"Object Information\"] = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' ', \n    alObjectName)\n, [\"Stack Trace\"] = substring(stackTrace, \n                            indexof(customDimensions.alStackTrace, _searchSting) + strlen(_searchSting))\n, [\"Extension Information\"] = strcat(extensionName, ' ' , customDimensions.extensionVersion, ' - ',\n    customDimensions.extensionPublisher)\n, Table = tablename\n| summarize [\"Count\"] = count(), [\"Avg (sec)\"] = round(avg(['Duration (sec)']),0) by ['Stack Trace'], ['Client Type'], ['Extension Information'], ['Object Information'], Table\n| top 20 by ['Avg (sec)'] * Count desc",
      "id": "121c57ec-aed6-48b9-b653-a942150c5114",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize (\n    bctraces\n);\nlet _enqueuedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E24\"\n    | summarize [\"Enqueued Count\"] = count() by bin(timestamp, 30min) \n);\nlet _startedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E25\"\n    | summarize [\"Started Count\"] = count() by bin(timestamp, 30min)\n);\nlet _finishedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E26\"\n    | summarize [\"Finished Count\"] = count() by bin(timestamp, 30min)\n);\nlet _failedToBeEnqueuedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FNY\"\n    | summarize [\"Failed to be enqueued Count\"] = count() by bin(timestamp, 30min)\n);\nlet _failedCanBeRetriedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000HE7\"\n    | summarize [\"Failed Can Be Retried Count\"] = count() by bin(timestamp, 30min)\n);\nlet _RescheduledOnLoginJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000I49\"\n    | summarize [\"Rescheduled On Login Count\"] = count() by bin(timestamp, 30min)\n);\nlet _RunOnceByUserJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FMG\"\n    | summarize [\"Run Once By User Count\"] = count() by bin(timestamp, 30min)\n);\nlet _FailedAndStoppedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000JRG\"\n    | summarize [\"Failed And Stopped Count\"] = count() by bin(timestamp, 30min)\n);\n_startedJQ\n| join kind=leftouter ( _finishedJQ) on timestamp\n| join kind=leftouter (_enqueuedJQ) on timestamp\n| join kind=leftouter (_failedToBeEnqueuedJQ) on timestamp\n| join kind=leftouter (_failedCanBeRetriedJQ) on timestamp\n| join kind=leftouter (_RescheduledOnLoginJQ) on timestamp\n| join kind=leftouter (_RunOnceByUserJQ) on timestamp\n| join kind=leftouter (_FailedAndStoppedJQ) on timestamp\n| project-away timestamp1, timestamp2, timestamp3, timestamp4, timestamp5, timestamp6, timestamp7\n| sort by timestamp asc \n",
      "id": "87ee0328-cee4-4a08-802d-72a1d6972d12",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _searchString = 'Job queue entry';\nbctraces\n| where customDimensions.eventId in (\"AL0000E24\", \"AL0000E25\", \"AL0000E26\",\"AL0000FNY\",\"AL0000HE7\",\"AL0000I49\",\"AL0000FMG\",\"AL0000FNY\")\n| extend _stateDescription = substring(message, strlen(_searchString), indexof(message, ':')-strlen(_searchString))\n| extend alObjectName = tostring(customDimensions.alJobQueueObjectName)\n| project  \n    [\"Entry Id\"] = tostring(customDimensions.alJobQueueId),\n    timestamp,\n    [\"Environment Type\"] = tostring(customDimensions.environmentType),\n    [\"State\"] = strcat(toupper(substring(_stateDescription, 1, 1)), substring(_stateDescription, 2)),\n    [\"Status\"] = customDimensions.alJobQueueStatus, \n    [\"Object Id\"]  = customDimensions.alJobQueueObjectId,\n    [\"Object Type\"] = customDimensions.alJobQueueObjectType,\n    [\"Object Name\"]  = alObjectName,\n    [\"Recurring\"] = customDimensions.alJobQueueIsRecurring,\n    [\"Task ID\"] = customDimensions.alJobQueueScheduledTaskId,\n    [\"Session ID\"] = session_Id,\n    [\"Telemetry ID\"] = user_Id\n| sort by timestamp asc\n\n\n\n\n\n",
      "id": "439ecd5e-8de1-451a-8ae8-c9e49d59af30",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == \"RT0008\"\n| where isempty(['_WSType']) or toupper(customDimensions.category) in (['_WSType'])\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| project [\"Endpoint\"] = _endpoint, \n        [\"Object Type\"] = tostring(customDimensions.alObjectType), \n        [\"Object No.\"] = tostring(customDimensions.alObjectId), \n        _processingTimeMS, \n        [\"Filters\"] = tostring(customDimensions.queryFilter),\n        [\"Method\"] = tostring(customDimensions.httpMethod),\n        Category = tostring(customDimensions.category)\n| summarize count(), [\"Avg. Time\"] = round(avg(_processingTimeMS),2), [\"Total Time\"] = round(sum(_processingTimeMS),2) by Category, [\"Endpoint\"], [\"Object Type\"], [\"Object No.\"], Method, Filters\n| sort by count_\n\n\n",
      "id": "a758b880-5eb3-4112-8342-afe80c47ede4",
      "usedVariables": ["_WSType", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 10;\nbctraces \n| where customDimensions.eventId == \"RT0008\"\n| where isempty(['_WSType']) or toupper(customDimensions.category) in (['_WSType'])\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| summarize [\"API Duration\"] = round(sum(_processingTimeMS),2) by [\"Endpoint\"] = _endpoint\n| sort by [\"API Duration\"] desc \n| limit _maxCount",
      "id": "c2f868ce-8920-416e-bb53-c6832abe5607",
      "usedVariables": ["_WSType", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 10;\nbctraces \n| where customDimensions.eventId == \"RT0008\"\n| where isempty(['_WSType']) or toupper(customDimensions.category) in (['_WSType'])\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| summarize [\"WS Calls\"] = count() by [\"Endpoint\"] = _endpoint\n| sort by [\"WS Calls\"] desc \n| limit _maxCount\n",
      "id": "407eabec-8884-49da-8fc7-c1aac24c8990",
      "usedVariables": ["_WSType", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nlet _searchType = toupper('PAGE');\nbctraces\n| where customDimensions.eventId == 'RT0018'\n| where toupper(customDimensions.alObjectType) == _searchType\n| extend extensionName = tostring(customDimensions.extensionName)\n  , alObjectName = tostring(customDimensions.alObjectName)\n  , alMethod = tostring( customDimensions.alMethod) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTime = customDimensions.executionTime\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend executionTimeInSec = executionTimeInMS / 1000\n| summarize count(), sum( executionTimeInSec ), avg( executionTimeInSec ) by alObjectInfo\n| order by avg_executionTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInSec,2)\n| sort by Ocurrance desc\n| limit _maxCount",
      "id": "9699638f-7e28-40a7-bf5b-6dfa10f3ff24",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nlet _searchType = toupper('REPORT');\nbctraces\n| where customDimensions.eventId == 'RT0018'\n| where toupper(customDimensions.alObjectType) == _searchType\n| extend extensionName = tostring(customDimensions.extensionName)\n  , alObjectName = tostring(customDimensions.alObjectName)\n  , alMethod = tostring( customDimensions.alMethod)\n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTime = customDimensions.executionTime\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend executionTimeInSec = executionTimeInMS / 1000\n| summarize count(), sum( executionTimeInSec ), avg( executionTimeInSec ) by alObjectInfo\n| order by avg_executionTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInSec,2)\n| sort by Ocurrance desc\n| limit _maxCount\n",
      "id": "a3ea5331-e1cb-4877-a147-ad506cf7a4cc",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId in ('AL0000E26')\n| extend alJobQueueObjectName = tostring(customDimensions.alJobQueueObjectName)\n| extend alJobQueueObjectId = toint(customDimensions.alJobQueueObjectId)\n    , alJobQueueObjectType = tostring(customDimensions.alJobQueueObjectType)\n    , alJobQueueExecutionTimeInSec = toreal(customDimensions.alJobQueueExecutionTimeInMs) /1000\n| summarize \n    mintime = round(min(alJobQueueExecutionTimeInSec),0),\n    avgTime = round(avg(alJobQueueExecutionTimeInSec),0),\n    maxTime = round(max(alJobQueueExecutionTimeInSec),0),\n    ExecutionCount = toint(count())\n    by\n    alJobQueueObjectId,\n    alJobQueueObjectType,\n    alJobQueueObjectName\n| order by maxTime\n| project\n    [\"Job Queue Object ID\"] = alJobQueueObjectId,\n    [\"Job Queue Object Type\"] = alJobQueueObjectType,\n    [\"Job Queue Object Name\"] = alJobQueueObjectName,\n    [\"Execution Count\"] = toint(ExecutionCount),\n    [\"Min. Time (sec)\"] = mintime,\n    [\"Avg. Time (sec)\"] = avgTime,\n    [\"Max. Time (sec)\"] = maxTime\n| sort by ['Execution Count'] desc",
      "id": "258b4492-214b-4d45-9d75-2c0ca4d3f964",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _limit = 4;\nlet _appInsightsTraces = materialize  (\n    bctraces\n    | where customDimensions.eventId == \"RT0008\"\n    | project timestamp, message, customDimensions\n);\nlet _soapThreshold = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"SOAP\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | summarize round(avg(_processingTimeMS),2)\n);\nlet _soapCalls = toscalar( \n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"SOAP\"\n    | count\n);\nlet _longRunningSoapCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"SOAP\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | where _processingTimeMS > (_soapThreshold * _limit)\n    | count\n);\nlet _odataThreshold = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) contains \"ODATA\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | summarize round(avg(_processingTimeMS),2)\n);\nlet _odataCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) contains \"ODATA\"\n    | count\n);\nlet _longRunningOdataCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"ODATA\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | where _processingTimeMS > (_odataThreshold * _limit)\n    | count\n);\nlet _apiThreshold = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"API\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | summarize round(avg(_processingTimeMS),2)\n);\nlet _apiCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"API\"\n    | count\n);\nlet _longRunningApiCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"API\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | where _processingTimeMS > (_apiThreshold * _limit)\n    | count\n);\n_appInsightsTraces\n| limit 1\n| project strcat(\"|\",\"SOAP Calls\", \n                 \"|\", \"Average\", \n                 \"|\", \"Long Running\", \n                 \"|\", \" \", \n                 \"|\", \"OData Calls\", \n                 \"|\", \"Average\", \n                 \"|\", \"Long Running\", \n                 \"|\", \" \", \n                 \"|\", \"API Calls\", \n                 \"|\", \"Average\", \n                 \"|\", \"Long Running|\\n\",\n                \"|------------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|\\n\",\n                \"|\", _soapCalls, \n                \"|\", _soapThreshold, \n                \"|\", _longRunningSoapCalls, \n                \"|\", \"\", \n                \"|\", _odataCalls, \n                \"|\", _odataThreshold, \n                \"|\", _longRunningOdataCalls, \n                \"|\", \"\",\n                \"|\", _apiCalls, \n                \"|\", _apiThreshold, \n                \"|\", _longRunningApiCalls, \"\\n\",\n                \"- **Long Running calls are those that are greater than 4x the Average**\")",
      "id": "80b645cf-ec6f-467d-88fd-032b47a21a63",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId in ('LC0024', 'LC0025') \n| project \n  timestamp\n, eventId = tostring(customDimensions.eventId)\n, environmentType = tostring(customDimensions.environmentType)\n, environmentName = tostring(customDimensions.environmentName)\n, alObjectId = toint(customDimensions.alObjectId)\n, alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n, extensionId = tostring(customDimensions.extensionId)\n, extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n, keyMaintainSIFTIndex = tostring(customDimensions.keyMaintainSIFTIndex)\n, keyMaintainSQLIndex = tostring(customDimensions.keyMaintainSQLIndex)\n, keyFields = tostring(customDimensions.keyFields)\n, keyName = replace_string(tostring(customDimensions.keyName),'GMK','')\n, message",
      "id": "d8db92cb-55c2-43da-8ba1-4c67226ad4c9",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where customDimensions.alObjectId > 0\n| extend alObjectName = tostring(customDimensions.alObjectName)\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n| summarize \n    ExecutionCount = count(),\n    minTime = toint(min(duration)),\n    avgTime = toint(avg(duration)),\n    maxTime = toint(max(duration))\n    by\n    alObjectId,\n    alObjectName,\n    eventId,\n//    pageMode,\n    pageType\n| project\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Page Type\"] = pageType,\n//    [\"Page Mode\"] = pageMode,\n    [\"Execution Count\"] = ExecutionCount,\n    [\"Min. Time\"] = minTime,\n    [\"Avg. Time\"] = avgTime,\n    [\"Max. Time\"] = maxTime\n| order by ['Execution Count'] desc ",
      "id": "68c4f059-5e65-46e7-8e56-2990003f6606",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nlet _searchType = toupper('CODEUNIT');\nbctraces\n| where customDimensions.eventId == 'RT0018'\n| where toupper(customDimensions.alObjectType) == _searchType\n| extend extensionName = tostring(customDimensions.extensionName)\n  , alObjectName = tostring(customDimensions.alObjectName)\n  , alMethod = tostring( customDimensions.alMethod)\n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTime = customDimensions.executionTime\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend executionTimeInSec = executionTimeInMS / 1000\n| summarize count(), sum( executionTimeInSec ), avg( executionTimeInSec ) by alObjectInfo\n| order by avg_executionTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInSec,2)\n| sort by Ocurrance desc\n| limit _maxCount\n",
      "id": "2a16e45d-a842-4f0d-b4f7-dab7c0588f11",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nlet _searchType = 'QUERY';\nbctraces\n| where customDimensions.eventId == 'RT0018'\n| where toupper(customDimensions.alObjectType) == _searchType\n| extend extensionName = tostring(customDimensions.extensionName)\n  , alObjectName = tostring(customDimensions.alObjectName)\n  , alMethod = tostring( customDimensions.alMethod) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTime = customDimensions.executionTime\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend executionTimeInSec = executionTimeInMS / 1000\n| summarize count(), sum( executionTimeInSec ), avg( executionTimeInSec ) by alObjectInfo\n| order by avg_executionTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInSec,2)\n| sort by Ocurrance desc\n| limit _maxCount",
      "id": "19c07d8e-398b-41b0-b071-af30040bd538",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'CL0002'\n| where customDimensions.userFeedback in ('Yes', 'No')\n| project timestamp\n, ClientType = tostring( customDimensions.clientType )\n, ErrorMessage = tostring( customDimensions.errorMessage )\n, StackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n, HostType = customDimensions.hostType\n, UserFeedback = customDimensions.userFeedback\n, UserLocale = customDimensions.userLocale\n",
      "id": "c195cc44-c181-4d75-935b-8148da47addd",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let environment_lifecycle_events = \nbctraces\n| where customDimensions has 'Dynamics 365 Business Central Control Plane'\n| where customDimensions.eventId in ( 'LC0106', 'LC0114', 'LC0117', 'LC0120', 'LC0126', 'LC0134', 'LC0141', 'LC0142', 'LC0146', 'LC0150', 'LC0153', 'LC0159', 'LC0181' )\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Environment'\n, operation = case(\n    customDimensions.eventId == 'LC0106', 'Updated'\n  , customDimensions.eventId == 'LC0114', 'Started'\n  , customDimensions.eventId == 'LC0117', 'Stopped'\n  , customDimensions.eventId == 'LC0120', 'Copied'\n  , customDimensions.eventId == 'LC0126', 'Point-in-time restored' \n  , customDimensions.eventId == 'LC0134', 'Moved to different AAD tenant' \n  , customDimensions.eventId == 'LC0141', 'Database exported' \n  , customDimensions.eventId == 'LC0142', 'Configuration key updated' \n  , customDimensions.eventId == 'LC0146', 'Update window modified'         \n  , customDimensions.eventId == 'LC0150', 'Deleted (permanently)'\n  , customDimensions.eventId == 'LC0153', 'Renamed'\n  , customDimensions.eventId == 'LC0159', 'App hotfix applied'\n  , customDimensions.eventId == 'LC0181', 'Deleted (marked for deletion)'\n  , customDimensions.eventId == 'LC0184', 'Recovered (un-deleted)'            \n  , 'Unknown event'\n)\n, onWhat = tostring( customDimensions.environmentName ) // which environment\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n;\nlet extension_lifecycle_events = \nbctraces\n| where customDimensions has 'RT0010'\n     or customDimensions has 'LC0010'\n     or customDimensions has 'LC0011'\n     or customDimensions has 'LC0012'\n     or customDimensions has 'LC0013'\n     or customDimensions has 'LC0014'\n     or customDimensions has 'LC0015'\n     or customDimensions has 'LC0016'\n     or customDimensions has 'LC0017'\n     or customDimensions has 'LC0018'\n     or customDimensions has 'LC0019'\n     or customDimensions has 'LC0020'\n     or customDimensions has 'LC0021'\n     or customDimensions has 'LC0022'\n     or customDimensions has 'LC0023'\n| where customDimensions.eventId in ('RT0010', 'LC0010', 'LC0011', 'LC0012', 'LC0013', 'LC0014', 'LC0015', 'LC0016', 'LC0017', 'LC0018', 'LC0019', 'LC0020', 'LC0021', 'LC0022', 'LC0023')    \n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Extension'\n, operation = case(\n    customDimensions.eventId=='RT0010', 'Update failed (upgrade code)'\n  , customDimensions.eventId=='LC0010', 'Install succeeded'\n  , customDimensions.eventId=='LC0011', 'Install failed'\n  , customDimensions.eventId=='LC0010', 'Install succeeded'\n  , customDimensions.eventId=='LC0012', 'Synch succeeded'\n  , customDimensions.eventId=='LC0013', 'Synch failed'           \n  , customDimensions.eventId=='LC0014', 'Publish succeeded'\n  , customDimensions.eventId=='LC0015', 'Publish failed'\n  , customDimensions.eventId=='LC0016', 'Un-install succeeded'\n  , customDimensions.eventId=='LC0017', 'Un-install failed'\n  , customDimensions.eventId=='LC0018', 'Un-publish succeeded'\n  , customDimensions.eventId=='LC0019', 'Un-publish failed'\n  , customDimensions.eventId=='LC0020', 'Compilation succeeded'\n  , customDimensions.eventId=='LC0021', 'Compilation failed'\n  , customDimensions.eventId=='LC0022', 'Update succeeded'\n  , customDimensions.eventId=='LC0023', 'Update failed (other)'\n  , 'Unknown message'\n)\n, onWhat = replace_string(tostring( customDimensions.extensionName ),'GMK','') // which extension\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n;\nlet index_lifecycle_events = \nbctraces\n| where customDimensions has 'LC0024' \n     or customDimensions has 'LC0025'\n| where customDimensions.eventId in ('LC0024', 'LC0025')\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Index'\n, operation = case(\n    customDimensions.eventId == 'LC0024', 'Added'\n  , customDimensions.eventId == 'LC0025', 'Removed'\n  , 'Unknown message'\n)\n, onWhat = replace_string(tostring( customDimensions.alObjectName ),'GMK','') // which table\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n;\nlet company_lifecycle_events = \nbctraces\n| where customDimensions has 'LC0001' \n     or customDimensions has 'LC0004' \n     or customDimensions has 'LC0007'\n| where customDimensions.eventId in ('LC0001', 'LC0004', 'LC0007')\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Company'\n, operation = case(\n    customDimensions.eventId == 'LC0001', 'Company created'\n  , customDimensions.eventId == 'LC0004', 'Company copied'\n  , customDimensions.eventId == 'LC0007', 'Company deleted'    \n  ,                    'Unknown message'\n)\n, onWhat = case(\n    customDimensions.eventId == 'LC0001', tostring( 'Redacted CompanyName' )\n  , customDimensions.eventId == 'LC0004', tostring( 'Redacted CompanyNameSource' )\n  , customDimensions.eventId == 'LC0007', tostring( 'Redacted CompanyName' )\n  ,                    'Unknown message'\n) // which company\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n) // who did it\n;\nlet feature_management_state_changes = \n// Feature management state changes\n// Available from 22.0\nbctraces\n| where customDimensions has 'AL0000JT3'\n| where customDimensions.eventId == 'AL0000JT3'\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Feature'\n, operation = tostring( customDimensions.alStatus) // enabled/disabled\n, onWhat = tostring( customDimensions.alFeatureDescription ) // which feature\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n, usertelemetryId = user_Id // who did it\n;\nlet retention_policy_deletes = \nbctraces\n| where customDimensions has 'AL0000D6H'\n| where customDimensions.eventId == 'AL0000D6H'\n| extend RecordsDeleted = toint(customDimensions.alRecordsDeleted)\n, TableNumber = customDimensions.alTableNo\n, TableName = replace_string(tostring( customDimensions.alTableName ),'GMK','')\n| where RecordsDeleted > 0\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Data'\n, operation = 'Data deleted'\n, onWhat = TableName // which table\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n) // who did it\n;\nlet field_changes = \nbctraces\n| where customDimensions has 'AL0000CTE'\n| where customDimensions.eventId == 'AL0000CTE'\n| extend TableName = replace_string(tostring(customDimensions.altableCaption),'GMK','')\n  , FieldName = replace_string(tostring(customDimensions.alfieldCaption),'GMK','')\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Data'\n, operation = 'Data changed'\n, onWhat = strcat( TableName, '.', FieldName ) // which table.field\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n) // who did it\n;\nenvironment_lifecycle_events\n| union extension_lifecycle_events\n| union index_lifecycle_events\n| union company_lifecycle_events\n| union feature_management_state_changes\n| union retention_policy_deletes\n| union field_changes",
      "id": "b233c41c-8c68-4050-9a1a-d0daa1621268",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let dau_mau = \ntraces\n| evaluate activity_engagement(user_Id, timestamp, ago(40d), now(), 1d, 28d)\n| project-rename Daily=dcount_activities_inner, Monthly=dcount_activities_outer\n| project-away activity_ratio\n| extend timestamp_truncated = startofday(timestamp)\n;\nlet dau_wau = \ntraces\n| where timestamp > ago(10d) //bctraces selection must be > 10d\n| evaluate activity_engagement(user_Id, timestamp, ago(40d), now(), 1d, 7d)\n| project-rename Daily=dcount_activities_inner, Weekly=dcount_activities_outer\n| project-away activity_ratio\n| extend timestamp_truncated = startofday(timestamp)\n;\ndau_mau\n| join kind=inner dau_wau \non $left.timestamp_truncated == $right.timestamp_truncated\n| project-away timestamp_truncated1, timestamp, timestamp1, Daily1\n| project-rename timestamp=timestamp_truncated\n| project format_datetime(timestamp, 'dd-MM-yyyy'), Daily, Monthly, Weekly",
      "id": "1d416764-ef37-462a-9b3f-f1b996f70745",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let dau_mau = \ntraces\n| where timestamp > ago(60d) \n| evaluate activity_engagement(user_Id, timestamp, ago(40d), now(), 1d, 28d)\n| project-rename Daily=dcount_activities_inner, Monthly=dcount_activities_outer\n| project-away activity_ratio\n| extend timestamp_truncated = startofday(timestamp)\n;\nlet dau_wau = \ntraces\n| where timestamp > ago(10d)\n| evaluate activity_engagement(user_Id, timestamp, ago(40d), now(), 1d, 7d)\n| project-rename Daily=dcount_activities_inner, Weekly=dcount_activities_outer\n| project-away activity_ratio\n| extend timestamp_truncated = startofday(timestamp)\n;\ndau_mau\n| join kind=inner dau_wau \non $left.timestamp_truncated == $right.timestamp_truncated\n| project-away timestamp_truncated1, timestamp, timestamp1, Daily1\n| project-rename timestamp=timestamp_truncated\n| project timestamp, Daily, Monthly, Weekly",
      "id": "471dacd1-edc8-402a-b94a-67f1b4d4dc06",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// change lookback, limit, ... as needed \n// EventStatistics\nlet traceEvents = bctraces\n| extend \n  AadTenantId = tostring( customDimensions.aadTenantId )\n, EnvironmentName = tostring( customDimensions.environmentName )\n| extend TenantId = strcat( toupper(AadTenantId), toupper(EnvironmentName) )\n| project timestamp\n, AadTenantId, EnvironmentName\n, EnvironmentType = tostring( customDimensions.environmentType )\n, TenantId\n, EventId = tostring( customDimensions.eventId )\n| summarize EventCount=count() by AadTenantId, EnvironmentName, EnvironmentType, TenantId, EventId, Day=bin(timestamp, 1d)\n;\nlet pageViewEvents = \nbcpageviews\n| extend AadTenantId = tostring( customDimensions.aadTenantId )\n, EnvironmentName = tostring( customDimensions.environmentName )\n| extend TenantId = strcat( toupper(AadTenantId), toupper(EnvironmentName) )\n| project timestamp\n, AadTenantId, EnvironmentName\n, EnvironmentType = tostring( customDimensions.environmentType )\n, TenantId\n, EventId = tostring( iff(isempty(customDimensions.eventId), customDimensions.eventID, customDimensions.eventId) )\n| summarize EventCount=count() by AadTenantId, EnvironmentName, EnvironmentType, TenantId, EventId, Day=bin(timestamp, 1d)\n;\ntraceEvents\n| union pageViewEvents",
      "id": "df441131-1d11-4f11-b5ce-02ece11b6831",
      "usedVariables": ["bcpageviews", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// EventStatistics\nlet signalDefinitionTable = externaldata(EventID :string, Area:string, Message:string)[h@'https://raw.githubusercontent.com/duiliotacconi/DT.Telemetry/main/JSON/SignalDefinitions.json']with(format='multijson');\nlet traceEvents = bctraces\n| project timestamp\n, EventId = tostring( customDimensions.eventId )\n| summarize EventCount=count() by EventId\n;\nlet pageViewEvents = \nbcpageviews\n| project timestamp\n, EventId = tostring( iff(isempty(customDimensions.eventId), customDimensions.eventID, customDimensions.eventId) )\n| summarize EventCount=count() by EventId\n;\ntraceEvents\n| union pageViewEvents\n| join kind=leftouter  signalDefinitionTable\non\n$left.EventId == $right.EventID\n| project \n  [\"Event Id\"] = EventId,\n  [\"Area\"] = Area,\n  [\"Message\"] = Message,\n  [\"Event Count\"] = EventCount\n| sort by ['Event Count'] desc  \n\n\n\n",
      "id": "78a415a3-f897-4b00-adfc-1192c389b6d4",
      "usedVariables": ["bcpageviews", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0005'\n| summarize count() by bin(timestamp, 1d), clientType",
      "id": "335527d7-bcf6-4894-acd3-95bc87776be6",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0018'\n| where customDimensions.alObjectId <> \"18122317\"\n| summarize count() by bin(timestamp, 1d), clientType\n| render columnchart  title= 'Number of long running AL Methods'",
      "id": "3ff78530-b9de-4519-ba65-8f7cd8114c57",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0004'\n| extend clientType = tostring( customDimensions.clientType )\n| summarize request_count=count() by clientType, bin(timestamp, 1d)",
      "id": "18ef025b-9a5f-40d7-b7c3-a32c919e933e",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0012'\n| project timestamp\n, componentVersion = customDimensions.componentVersion\n, environmentType = customDimensions.environmentType\n, environmentName = customDimensions.environmentName\n, aadTenantId = tostring(customDimensions.aadTenantId)\n, alObjectId = customDimensions.alObjectId\n, companyName = customDimensions.companyName\n, clientType\n, alObjectType = customDimensions.alObjectType\n, alObjectName = customDimensions.alObjectName\n, extensionVersion = customDimensions.extensionVersion\n, extensionName = customDimensions.extensionName\n, extensionId = customDimensions.extensionId\n, alStackTrace = customDimensions.alStackTrace\n// use the KQL snippet parseStackTrace to get bottom of the stack trace details\n, sqlStatement = customDimensions.sqlStatement\n, sqlServerSessionId = customDimensions.sqlServerSessionId\n, snapshotId = customDimensions.snapshotId\n, sessionId = customDimensions.sessionId\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n| summarize count() by bin(timestamp,1d), clientType\n",
      "id": "45db4dc1-bdb8-435c-97d5-aeff2d98fe64",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectName = tostring(customDimensions.alObjectName)\n    , ExtensionName = tostring(customDimensions.extensionName)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| extend TenantId = strcat(customDimensions.aadTenantId)\n    , ExtensionId = tostring(customDimensions.extensionId)\n    , ExtensionVersion = tostring(customDimensions.extensionVersion)\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(StackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project\n    timestamp,\n    TenantId,\n    ExtensionId,\n    ExtensionName,\n    ExtensionVersion,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    LockingObjectId,\n    LockingObjectMethod,\n    LockingObjectExtension,    \n    SourceProcess,\n    StackTrace,\n    sqlStatement,\n    customDimensions\n| summarize count = count() by tostring(SourceProcess), ExtensionId, tostring(LockingObjectExtension), ExtensionVersion, tostring(LockingObject), tostring(LockingObjectId), tostring(LockingObjectMethod),tostring(operationType),tostring(StackTrace),tostring(sqlStatement)\n| order by ['count'],SourceProcess desc",
      "id": "62d8759b-9e1a-4f0c-b1dc-9cb5e3ac74c6",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| summarize count() by bin(timestamp, 1d), clientType\n| order by timestamp asc",
      "id": "7f70a74c-32cc-4c02-b172-e9433d925dd8",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where isnotempty(customDimensions.sqlStatement)\n| where isnotempty(customDimensions.alStackTrace)\n| extend numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n| where numberOfJoins > _joins \n| where not(customDimensions.alObjectType in (\"Page\", \"PageExtension\"))\n| where customDimensions.sqlStatement startswith \"SELECT\"\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend objectName = tostring(customDimensions.alObjectName)\n| extend extensionName = tostring(customDimensions.extensionName)\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = tostring(customDimensions.extensionId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, numberOfJoins, executionTimeInMS, ObjectType, ObjectId, objectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN\n| summarize [\"Count\"] = count() by extensionName, ObjectType, ObjectId, objectName, numberOfColumnsSelected, numberOfJoins, tablename, extensionIdsFromJOIN, sqlStatement, StackTrace, clientType\n| sort by numberOfJoins, Count , numberOfColumnsSelected, tablename\n| project extensionName, ObjectType, ObjectId, objectName, numberOfColumnsSelected, numberOfJoins, Count, tablename, extensionIdsFromJOIN, sqlStatement, StackTrace, clientType",
      "id": "be949600-78e5-4cc5-8f73-9aff2fc75c80",
      "usedVariables": ["_joins", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 1;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_startTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_endTime));\nbctraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0018'\n| where customDimensions.eventId == 'RT0018'\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project timestamp = timestamp\n, alMethod = tostring(customDimensions.alMethod)\n, alObjectId = customDimensions.alObjectId\n, objectName = tostring(customDimensions.alObjectName)\n, alObjectType = customDimensions.alObjectType\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = customDimensions.clientType\n, exclusiveTime = customDimensions.exclusiveTime \n, exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 \n, totalTime = customDimensions.executionTime\n, totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, extensionId = customDimensions.extensionId\n, extensionInfo = tostring(customDimensions.extensionInfo)\n, extensionName = tostring(customDimensions.extensionName)\n, extensionPublisher = customDimensions.extensionPublisher\n, extensionVersion = customDimensions.extensionVersion\n, longRunningThreshold = customDimensions.longRunningThreshold\n, longRunningThresholdInMS = toreal(totimespan(customDimensions.longRunningThreshold))/10000 //the datatype for executionTime is timespan \n, sqlExecutes = customDimensions.sqlExecutes // This dimension was introduced in Business Central 2023 release wave 1, version 22.0\n, sqlRowsRead = customDimensions.sqlRowsRead // This dimension was introduced in Business Central 2023 release wave 1, version 22.0\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n| order by timestamp desc ",
      "id": "4c8e4569-0d9e-4374-9e2a-02ea00ef8f69",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Long running queries by Source Process - still needs some work\n// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 1;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_startTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_endTime));\nbctraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where session_Id has_any (_sessionId)\n| where user_Id has_any (_userId)\n| where customDimensions has 'RT0018'\n| where customDimensions.eventId == 'RT0018'\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n    , exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n    // exclusiveTime is the total time of the operation, including wait time due to client callback\n    , totalTime = customDimensions.executionTime\n    , totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| project\n    timestamp,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    totalTimeInMS\n| summarize count = count(), avgTotalTimeInMS = toint(avg(totalTimeInMS)) by SourceProcess\n| order by ['count'] desc ",
      "id": "8941d254-eb97-46ac-980a-0662fe8a4a88",
      "usedVariables": [
        "_endTime",
        "_sessionId",
        "_startTime",
        "_userId",
        "bctraces"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Any CalcSum that we can find in Telemetry that is locking\nbctraces\n| where isnotempty(customDimensions.sqlStatement)\n| where customDimensions.eventId == 'RT0005'\n| where isnotempty(customDimensions.alStackTrace) // only interested in parts in the code we can change\n//| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT SUM\" //It's an intentional SUM\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , extensionName = tostring(customDimensions.extensionName)\n| parse kind=regex sqlStatement with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , TenantId = strcat(customDimensions.aadTenantId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, tablename, executionTimeInMS, ObjectType, ObjectId, alObjectName, stackTrace, eventId, clientType, sqlStatement, extensionIdsFromJOIN",
      "id": "85c5dae6-dd5d-4d7a-b97e-8d8627d84d97",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == \"RT0008\" // starting from version 16.1, the eventId is used to identity signal types\n| summarize count() by bin(timestamp,1m)",
      "id": "4a01c986-f354-4ba3-a322-b1ff472babbb",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Any CalcSum that we can find in Telemetry that is locking\nbctraces\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // only interested in parts in the code we can change\n//| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT TOP 1 NULL\" //It's an intentional isEmpty\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\",\"Page Extension\"))\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , extensionName = tostring(customDimensions.extensionName)\n| parse kind=regex sqlStatement with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, tablename, executionTimeInMS, ObjectType, ObjectId, alObjectName, StackTrace, eventId, clientType, sqlStatement, extensionIdsFromJOIN",
      "id": "99287ef5-8a1a-49ea-a24a-05b916a2a633",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableCount = (\nbctraces\n| where customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")),\" (Count)\") \n| project-away timestamp, dayBin, executionTimeInMS\n| sort by day asc \n| evaluate pivot(day, count())\n);\nTableCount\n| join\n(bctraces\n| where customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")), \" (avg)\")\n| project-away timestamp, dayBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, operationType, sqlStatement, day\n| sort by day asc \n| evaluate pivot(day,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.operationType == $right.operationType,\n$left.sqlStatement == $right.sqlStatement\t\t\t\t\t\t\t\t\t\t \n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, operationType1, sqlStatement1",
      "id": "42be5ec4-27bd-4f6e-aa64-1ded49417ff9",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let ObjectNameAndClientLRQCount= ( \nbctraces\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| extend alObjectName = tostring(customDimensions.alObjectName)\n| extend eventId = customDimensions.eventId \n, environmentName = customDimensions.environmentName\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, companyName = tostring(customDimensions.companyName)\n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(customDimensions.extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', customDimensions.alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n, extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement) )\n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = tostring(case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Default'\n))\n| sort by executionTimeInMS desc \n| project timestamp, \n    [\"Environment Name\"] = environmentName,\n    [\"Client Type\"] = clientType, \n    [\"AL Object ID\"] = tostring(alObjectId),\n    [\"AL Object Type\"] = tostring(alObjectType),\n    [\"AL Object Name\"] = tostring(alObjectName),\n    [\"Duration\"] = executionTimeInMS, \n    [\"Type\"] = operationType, \n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"Company Name\"] = companyName, \n    [\"AL Object Information\"] = alObjectInfo, \n    [\"Extension Information\"] = extensionInfo,\n    [\"Operation Type\"] = operationType,\n    [\"Isolation Level\"] = isolationLevel,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"AL Stack Trace\"] = alStackTrace\n| summarize count(), round(avg(Duration),0) by ['AL Object ID'], ['AL Object Type'], ['AL Object Name'], ['Client Type'], ['Operation Type'], ['Isolation Level'], ['SQL Statement'], ['AL Stack Trace']\n| sort by count_ desc \n);\nObjectNameAndClientLRQCount\n| extend Percentage = round(count_ *100 / toscalar(ObjectNameAndClientLRQCount | summarize sum(count_)),2)\n| sort by count_ desc",
      "id": "91f62942-b52e-4cd3-ab1b-9a162d678f5d",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let utcOffsetHours = 2;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(now()));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(now()));\nlet data = bctraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend Title = tostring(message);\ndata\n| where customDimensions.eventId in~ ('RT0028', 'RT0005', 'RT0012')\n| summarize count() by Title\n\n\n",
      "id": "4e2b032b-f06f-40ec-8859-f3666160edb8",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableDeadlocked = (\nbctraces\n| where customDimensions.eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend TenantId = strcat(customDimensions.aadTenantId)\n    , ExtensionId = tostring(customDimensions.extensionId)\n    , ExtensionName = tostring(customDimensions.extensionName)\n    , ExtensionVersion = tostring(customDimensions.extensionVersion)\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where tablename <> \"\"\n| summarize Count = count() by tablename\n);\nTableDeadlocked\n| extend Percentage = round(Count *100 / toscalar(TableDeadlocked | summarize sum(Count)),2)\n| sort by Count desc \n",
      "id": "45ab4230-8d9e-47ee-bdee-014893a33fd6",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n//| where customDimensions.designerLevel == \"None\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \"11\"\n    , performanceBucket == \"2min-5min\", \"10\"\n    , performanceBucket == \"1min-2min\", \"09\"\n    , performanceBucket == \"30sec-1min\", \"08\"\n    , performanceBucket == \"15sec-30sec\", \"07\"\n    , performanceBucket == \"7sec-15sec\", \"06\"\n    , performanceBucket == \"3sec-7sec\", \"05\"\n    , performanceBucket == \"1sec-3sec\", \"04\"\n    , performanceBucket == \"500ms-1sec\", \"03\"\n    , performanceBucket == \"250ms-500ms\", \"02\"\n    , performanceBucket == \"<250ms\", \"01\"\n    , \"00\")\n| extend perfBucket = strcat(bucketIndex, ': ', performanceBucket)\n| summarize count() by perfBucket, bin(timestamp,1d)\n| sort by perfBucket asc ",
      "id": "d733d2a3-deaa-4c78-9e16-f9ed23b83285",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0019'\n| extend extensionId = tostring(customDimensions.extensionId)\n    , extensionName = tostring(customDimensions.extensionName)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , httpStatusCode = toint(customDimensions.httpStatusCode)\n    , clientType = tostring(customDimensions.clientType)\n    , method = tostring(customDimensions.httpMethod)\n    , endpoint = tostring(customDimensions.endpoint)\n| where httpStatusCode !between (200 .. 299)\n| summarize count() by httpStatusCode, clientType, method, endpoint, extensionPublisher, extensionName, extensionId, alObjectType, alObjectId, alObjectName\n| project httpStatusCode, count_, endpoint, clientType, method, alObjectId, alObjectName, alObjectType, extensionName, extensionId\n\n\n",
      "id": "fe2a5f50-44de-470c-b376-9fe6ec37ff82",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Long running queries by Source Process - still needs some work\n// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 1;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_startTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_endTime));\nbctraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0018'\n| where customDimensions.eventId == 'RT0018'\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n    , exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n    // exclusiveTime is the total time of the operation, including wait time due to client callback\n    , totalTime = customDimensions.executionTime\n    , totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| project\n    timestamp,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    totalTimeInMS\n| summarize count = count() by [\"Source Process\"] = replace_string(replace_string(replace_string(SourceProcess,'GMK',''),'cafe','xxx'),'tores','yyyyy'), bin(timestamp,1h)\n| render timechart ",
      "id": "73d73f3f-9e5c-4af8-a824-6fadc1187b37",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Long running queries by Source Process - still needs some work\n// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 1;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_startTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_endTime));\nbctraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0005'\n| where customDimensions.eventId == 'RT0005'\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n    , exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n    // exclusiveTime is the total time of the operation, including wait time due to client callback\n    , totalTime = customDimensions.executionTime\n    , totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| project\n    timestamp,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    totalTimeInMS\n| summarize count = count(), avgTotalTimeInMS = toint(avg(totalTimeInMS)) by ObjectType, ObjectId, ObjectName, SourceMethod = replace_string(replace_string(replace_string(SourceProcess,'GMK',''),'cafe','xxx'),'tores','yyyyy')\n| order by ['count'] desc \n\n\n\n\n",
      "id": "a54e587f-077b-435b-8e83-1377540a52d2",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Long running queries by Source Process - still needs some work\n// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 2;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_startTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_endTime));\nbctraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0005'\n| where customDimensions.eventId == 'RT0005'\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = replace_string(replace_string(replace_string(tostring(customDimensions.alObjectName),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = replace_string(replace_string(replace_string(tostring(customDimensions.alStackTrace),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n    , exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n    // exclusiveTime is the total time of the operation, including wait time due to client callback\n    , totalTime = customDimensions.executionTime\n    , totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| where ObjectId <> \"18122317\"\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| project\n    timestamp,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    totalTimeInMS\n| where SourceProcess <> \" -    ()\"\n| summarize count = count() by ObjectType, ObjectId, ObjectName, [\"Source Process\"] = replace_string(replace_string(replace_string(SourceProcess,'GMK',''),'cafe','xxx'),'tores','yyyyy'), bin(timestamp,1h)\n| render timechart ",
      "id": "3bc2da41-54ed-4b8e-b97d-ee46706cef43",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces \n| where customDimensions.eventId == \"RT0008\"\n| where isempty(['_WSType']) or toupper(customDimensions.category) in (['_WSType'])\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| extend _httpStatusCode = toint(customDimensions.httpStatusCode)\n| where _httpStatusCode !between (200..299)\n| project [\"Endpoint\"] = _endpoint, \n        [\"Http Status Code\"] = _httpStatusCode,\n        [\"Object Type\"] = tostring(customDimensions.alObjectType), \n        [\"Object No.\"] = tostring(customDimensions.alObjectId), \n        _processingTimeMS, \n        [\"Environment Type\"] = tostring(customDimensions.environmentType)\n| summarize count(), [\"Avg. Time\"] = round(avg(_processingTimeMS),2), [\"Total Time\"] = round(sum(_processingTimeMS),2) by [\"Endpoint\"], ['Http Status Code'], [\"Object Type\"], [\"Object No.\"], [\"Environment Type\"]\n| sort by count_ desc\n",
      "id": "472793e2-cc80-4429-8db1-6197c07314d0",
      "usedVariables": ["_WSType", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where customDimensions.alObjectId > 0\n| extend alObjectName = tostring(customDimensions.alObjectName)\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n| summarize \n    ExecutionCount = count(),\n    minTime = toint(min(duration)),\n    avgTime = toint(avg(duration)),\n    maxTime = toint(max(duration))\n    by\n    alObjectId,\n    alObjectName,\n    eventId,\n//    pageMode,\n    pageType,\n    environmentName,\n    bin(timestamp,15min)\n| project\n    timestamp,\n    [\"Environment Name\"] = environmentName,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Page Type\"] = pageType,\n    [\"Execution Count\"] = ExecutionCount,\n    [\"Min. Time\"] = minTime,\n    [\"Avg. Time\"] = avgTime,\n    [\"Max. Time\"] = maxTime\n| where ['AL Object ID'] in (\"9305\",\"42\")\n| order by ['Execution Count'] desc ",
      "id": "47381110-7f5f-4ee7-8c82-96edb08b1e7b",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0019'\n| extend extensionId = tostring(customDimensions.extensionId)\n    , extensionName = tostring(customDimensions.extensionName)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , httpStatusCode = toint(customDimensions.httpStatusCode)\n    , clientType = tostring(customDimensions.clientType)\n    , method = tostring(customDimensions.httpMethod)\n    , endpoint = tostring(customDimensions.endpoint)\n| where httpStatusCode !between (200 .. 299)\n| project timestamp, httpStatusCode, endpoint, clientType, method, alObjectId, alObjectName, alObjectType, extensionName, extensionId\n| sort by timestamp desc \n\n\n",
      "id": "fac541d5-3bc4-4b3a-a36f-ceb3b6a9fb05",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n//| where customDimensions.designerLevel == \"None\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \"11\"\n    , performanceBucket == \"2min-5min\", \"10\"\n    , performanceBucket == \"1min-2min\", \"09\"\n    , performanceBucket == \"30sec-1min\", \"08\"\n    , performanceBucket == \"15sec-30sec\", \"07\"\n    , performanceBucket == \"7sec-15sec\", \"06\"\n    , performanceBucket == \"3sec-7sec\", \"05\"\n    , performanceBucket == \"1sec-3sec\", \"04\"\n    , performanceBucket == \"500ms-1sec\", \"03\"\n    , performanceBucket == \"250ms-500ms\", \"02\"\n    , performanceBucket == \"<250ms\", \"01\"\n    , \"00\")\n| extend perfBucket = strcat(bucketIndex, ': ', performanceBucket)\n| summarize count() by perfBucket, bin(timestamp,1h)\n| sort by perfBucket asc ",
      "id": "7f15414c-2648-45ad-9fc5-761244e60cf0",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where customDimensions.alObjectId > 0\n| extend alObjectName = tostring(customDimensions.alObjectName)\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n| summarize \n    ExecutionCount = count(),\n    minTime = toint(min(duration)),\n    avgTime = toint(avg(duration)),\n    maxTime = toint(max(duration))\n    by\n    alObjectId,\n    alObjectName,\n    eventId,\n//    pageMode,\n    pageType,\n    environmentName,\n    bin(timestamp,15min)\n| project\n    timestamp,\n    [\"Environment Name\"] = environmentName,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Page Type\"] = pageType,\n    [\"Execution Count\"] = ExecutionCount,\n    [\"Min. Time\"] = minTime,\n    [\"Avg. Time\"] = avgTime,\n    [\"Max. Time\"] = maxTime\n| where ['AL Object ID'] in (\"9305\",\"42\")\n| order by ['Execution Count'] desc ",
      "id": "4cd15688-e72e-4abf-ba00-ff1a0bd9610a",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0005'\n| summarize count() by bin(timestamp, 7d)",
      "id": "188bda06-cc59-46ee-b20d-ab08ec7ec458",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0018'\n| summarize count() by bin(timestamp, 7d)\n| render columnchart  title= 'Number of long running AL Methods'",
      "id": "775ed9c8-97e8-4360-82ac-f4abe48ba74e",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| summarize count() by bin(timestamp, 7d), clientType\n| order by timestamp asc",
      "id": "76a0dea3-6f61-474c-b4ef-3a8a61aeab9b",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0012'\n| project timestamp\n, componentVersion = customDimensions.componentVersion\n, environmentType = customDimensions.environmentType\n, environmentName = customDimensions.environmentName\n, aadTenantId = customDimensions.aadTenantId\n, alObjectId = customDimensions.alObjectId\n, companyName = customDimensions.companyName\n, clientType\n, alObjectType = customDimensions.alObjectType\n, alObjectName = customDimensions.alObjectName\n, extensionVersion = customDimensions.extensionVersion\n, extensionName = customDimensions.extensionName\n, extensionId = customDimensions.extensionId\n, alStackTrace = customDimensions.alStackTrace\n// use the KQL snippet parseStackTrace to get bottom of the stack trace details\n, sqlStatement = customDimensions.sqlStatement\n, sqlServerSessionId = customDimensions.sqlServerSessionId\n, snapshotId = customDimensions.snapshotId\n, sessionId = customDimensions.sessionId\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n| summarize count() by bin(timestamp,7d), clientType\n",
      "id": "7f141fb1-2ef6-4364-aedc-69a5da3f4c73",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where customDimensions.alObjectId > 0\n| extend alObjectName = tostring(customDimensions.alObjectName)\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n| summarize \n    ExecutionCount = count(),\n    avgTime = toint(avg(duration))\n    by\n    alObjectId,\n    alObjectName,\n//    environmentName,\n    bin(timestamp,1d)\n| project\n    timestamp,\n//    [\"Environment Name\"] = environmentName,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Execution Count\"] = ExecutionCount,\n    [\"Avg. Time\"] = avgTime\n| where ['AL Object ID'] in (\"9305\",\"42\",\"143\",\"132\")\n| where ['AL Object Name'] != \"\"\n| order by ['Execution Count'] desc ",
      "id": "f42269b7-6ce9-4a6e-960f-fa6a77d2b77f",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , extensionName = tostring(customDimensions.extensionName)\n    , sqlstatement = tostring(customDimensions.sqlStatement)\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n| project timestamp, \n    [\"Session ID\"] = session_Id, \n    [\"Client Type\"] = clientType, \n    [\"AL Object Info\"] = strcat(alObjectType, ' ', alObjectId, ' - ', alObjectName), \n    [\"Extension Info\"] = extensionInfo, \n    [\"AL Stack Trace\"] =  stackTrace, \n    [\"SQL Statement\"] = sqlstatement,\n    [\"Snapshot ID\"] =  snapshotId",
      "id": "6d878e30-2cb5-4234-9916-a6c1958d0765",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend TenantId = strcat(customDimensions.aadTenantId)\n    , ExtensionId = tostring(customDimensions.extensionId)\n    , ExtensionName = tostring(customDimensions.extensionName)\n    , ExtensionVersion = tostring(customDimensions.extensionVersion)\n    , clientType = tostring(customDimensions.clientType)\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablenamewithjoins: string \"\\\\$\" space: string\n| parse kind=regex tablenamewithjoins with stringtoeliminate: string \"\\\\$\" tablenamewithoutjoins: string\n| extend tablename = case(\n    tablenamewithjoins contains \"$\", tablenamewithoutjoins\n    , tablenamewithjoins \n)\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| summarize count() by bin(timestamp,5min), clientType\n| project timestamp, count_, clientType\n| render columnchart\n",
      "id": "c6a73cb5-67f8-4d7d-9c42-a9cb6f537690",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize (\n    bctraces\n);\nlet _failedToBeEnqueuedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FNY\"\n    | extend errorType = \"Not Enqueued\"\n);\nlet _failedCanBeRetriedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000HE7\"\n    | extend errorType = \"Can be Retried\"\n);\nlet _RescheduledOnLoginJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000I49\"\n    | extend errorType = \"Rescheduled On Login\"\n);\nlet _RunOnceByUserJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FMG\"\n    | extend errorType = \"Run Once By User\"\n);\nlet _FailedAndStoppedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000JRG\"\n    | extend errorType = \"Stopped\"\n);\n_failedToBeEnqueuedJQ\n| union (_failedToBeEnqueuedJQ) \n| union (_failedCanBeRetriedJQ) \n| union (_RescheduledOnLoginJQ)\n| union (_RunOnceByUserJQ) \n| union (_FailedAndStoppedJQ) \n| project timestamp\n    , errorType\n    , description = customDimensions.alJobQueueObjectDescription\n    , objectId = customDimensions.alJobQueueObjectId\n    , objectName = customDimensions.alJobQueueObjectName\n    , objectType = customDimensions.alJobQueueObjectType\n    , earliestStartDateTime = customDimensions.alJobQueueEarliestStartDateTime\n    , status = customDimensions.alJobQueueStatus\n    , id = customDimensions.alJobQueueId\n    , taskId = customDimensions.alJobQueueScheduledTaskId\n| sort by timestamp asc\n",
      "id": "87a2f223-8069-4f3b-b4cb-b06dc218f140",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableCount = (\nbctraces\n| where customDimensions.eventId == 'RT0018' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = tostring(customDimensions.extensionName)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectType = tostring(customDimensions.alObjectType)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")),\" (Count)\") \n| project-away timestamp, dayBin, executionTimeInMS\n| sort by day asc \n| evaluate pivot(day, count())\n);\nTableCount\n| join\n(bctraces\n| where customDimensions.eventId == 'RT0018' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = tostring(customDimensions.extensionName)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectType = tostring(customDimensions.alObjectType)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")), \" (avg)\")\n| project-away timestamp, dayBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, alObjectMethod, day\n| sort by day asc \n| evaluate pivot(day,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.alObjectMethod == $right.alObjectMethod\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, alObjectMethod1 ",
      "id": "8c7a42c5-40e0-4815-8150-e7beff9b71e2",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| extend componentVersion = tostring(customDimensions.componentVersion)\n| where componentVersion <> \"\"\n| summarize max(bin(timestamp,1min)) by componentVersion\n| sort by max_timestamp desc \n\n\n",
      "id": "11ba2112-b2d3-489e-8af3-01e49bdfabf8",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\nbctraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, stackTrace = tostring(customDimensions.alStackTrace)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = tostring(customDimensions.extensionName)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, alMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, executionTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(bctraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, stackTrace = tostring(customDimensions.alStackTrace)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = tostring(customDimensions.extensionName)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, alMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, alMethod, stackTrace, clientType, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n//$left.extensionPublisher == $right.extensionPublisher,\n//$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.clientType == $right.clientType,\n//$left.stackTrace == $right.stackTrace,\n$left.alMethod == $right.alMethod\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, stackTrace1, clientType1, alMethod1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc \n\n\n\n",
      "id": "7ef51f24-58b4-4d6d-b577-f7fb5eda130d",
      "usedVariables": [
        "_countLimit",
        "_previousUpdateStartTime",
        "_updateStartTime",
        "bctraces"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\nbctraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, stackTrace = tostring(customDimensions.alStackTrace)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = tostring(customDimensions.extensionName)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, executionTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(bctraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, stackTrace = tostring(customDimensions.alStackTrace)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = tostring(customDimensions.extensionName)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, operationType, sqlStatement, stackTrace, clientType, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.clientType == $right.clientType,\n$left.operationType == $right.operationType,\n$left.sqlStatement == $right.sqlStatement,\n$left.stackTrace == $right.stackTrace\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, operationType1, sqlStatement1, stackTrace1, clientType1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc",
      "id": "d9769c33-5578-4d45-9c93-e8e8a5bd7bb1",
      "usedVariables": [
        "_countLimit",
        "_previousUpdateStartTime",
        "_updateStartTime",
        "bctraces"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\nbctraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.eventId == 'RT0008' \n| where toupper(customDimensions.category) == \"API\"\n| extend endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| project timestamp\n, endpoint = endpoint\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, processingTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, processingTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(bctraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.eventId == 'RT0008' \n| where toupper(customDimensions.category) == \"API\"\n| extend endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n, endpoint = endpoint\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, processingTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(processingTimeInMS),0) by alObjectType, alObjectId, alObjectName, endpoint, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.endpoint == $right.endpoint\n| project-away alObjectType1, alObjectId1, alObjectName1, endpoint1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc",
      "id": "1cf6dfe5-52f0-4165-a783-b637c9410473",
      "usedVariables": [
        "_countLimit",
        "_previousUpdateStartTime",
        "_updateStartTime",
        "bctraces"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where message contains \"Executed a SQL statement\"\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , alStackTrace = tostring(customDimensions.alStackTrace)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Undefined'\n)\n| extend splitStacktrace = split(alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[2]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project timestamp, \n    [\"Extension Id\"] = customDimensions.extensionId,\n    [\"Extension Name\"] = customDimensions.extensionName,\n    [\"Extension Publisher\"] = customDimensions.extensionPublisher,\n    [\"Extension Version\"] = customDimensions.extensionVersion,\n    [\"Object Type\"] = alObjectType,\n    [\"Object Id\"] = alObjectId,\n    [\"Object Name\"] = alObjectName,\n    [\"Method\"] = topOfStackWhatWasCalled,\n    [\"Duration\"] = duration,\n    [\"Type\"] = operationType, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Columns\"] = numberOfColumnsSelected,\n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"Isolation Level\"] = isolationLevel\n| sort by timestamp asc \n\n",
      "id": "db2de84f-41c1-4c8e-b254-3e8dc001427b",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "\nbctraces\n| where message contains \"Executed a SQL statement\"\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , alStackTrace = tostring(customDimensions.alStackTrace)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Undefined'\n)\n| extend splitStacktrace = split(alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[2]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project timestamp, \n    [\"Extension Id\"] = tostring(customDimensions.extensionId),\n    [\"Extension Name\"] = tostring(customDimensions.extensionName),\n    [\"Extension Publisher\"] = tostring(customDimensions.extensionPublisher),\n    [\"Extension Version\"] = tostring(customDimensions.extensionVersion),\n    [\"Object Type\"] = alObjectType,\n    [\"Object Id\"] = alObjectId,\n    [\"Object Name\"] = alObjectName,\n    [\"Method\"] = topOfStackWhatWasCalled,\n    [\"Duration\"] = duration,\n    [\"Type\"] = operationType, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Columns\"] = numberOfColumnsSelected,\n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"Isolation Level\"] = isolationLevel\n| where FlowFields > 0\n| summarize SQLStatementNo = count(), AvgDurationInMs = round(avg(Duration),2), TotalDurationInMs = sum(Duration) by \n    ['Extension Id'], ['Extension Name'], ['Extension Publisher'], ['Extension Version'],\n    ['Object Type'], ['Object Id'], ['Object Name'], Method,\n    ['SQL Statement'], FlowFields, Columns, JOINs\n| sort by FlowFields desc \n\n",
      "id": "48f393c2-b1da-45ad-bed8-27e520e3050d",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where message contains \"Executed a SQL statement\"\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , alStackTrace = tostring(customDimensions.alStackTrace)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Undefined'\n)\n| extend splitStacktrace = split(alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[2]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project timestamp, \n    [\"Extension Id\"] = tostring(customDimensions.extensionId),\n    [\"Extension Name\"] = tostring(customDimensions.extensionName),\n    [\"Extension Publisher\"] = tostring(customDimensions.extensionPublisher),\n    [\"Extension Version\"] = tostring(customDimensions.extensionVersion),\n    [\"Object Type\"] = alObjectType,\n    [\"Object Id\"] = alObjectId,\n    [\"Object Name\"] = alObjectName,\n    [\"Method\"] = topOfStackWhatWasCalled,\n    [\"Duration\"] = duration,\n    [\"Type\"] = operationType, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Columns\"] = numberOfColumnsSelected,\n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"Isolation Level\"] = isolationLevel\n| summarize SqlStatementNo = count(), TotalDuration = sum(Duration) by \n    ['Extension Id'], ['Extension Name'], ['Extension Publisher'], ['Extension Version'],\n    ['Object Type'], ['Object Id'], ['Object Name'], Method\n| sort by TotalDuration desc  \n\n",
      "id": "1c89653f-cd52-4bda-a9d1-e54b7e43c586",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where message contains \"Executed a SQL statement\"\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , alStackTrace = tostring(customDimensions.alStackTrace)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Undefined'\n)\n| extend splitStacktrace = split(alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[2]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project timestamp, \n    [\"Extension Id\"] = tostring(customDimensions.extensionId),\n    [\"Extension Name\"] = tostring(customDimensions.extensionName),\n    [\"Extension Publisher\"] = tostring(customDimensions.extensionPublisher),\n    [\"Extension Version\"] = tostring(customDimensions.extensionVersion),\n    [\"Object Type\"] = alObjectType,\n    [\"Object Id\"] = alObjectId,\n    [\"Object Name\"] = alObjectName,\n    [\"Method\"] = topOfStackWhatWasCalled,\n    [\"Duration\"] = duration,\n    [\"Type\"] = operationType, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Columns\"] = numberOfColumnsSelected,\n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"Isolation Level\"] = isolationLevel\n| where Columns > 1\n| summarize SQLStatementNo = count(), AvgDurationInMs = round(avg(Duration),2), TotalDurationInMs = sum(Duration) by \n    ['Extension Id'], ['Extension Name'], ['Extension Publisher'], ['Extension Version'],\n    ['Object Type'], ['Object Id'], ['Object Name'], Method,\n    ['SQL Statement'], Columns, JOINs, FlowFields\n| sort by Columns desc \n\n",
      "id": "4382b4c3-b2a7-4111-b029-b4a164b6fc17",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where message contains \"Executed a SQL statement\"\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , alStackTrace = tostring(customDimensions.alStackTrace)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Undefined'\n)\n| extend splitStacktrace = split(alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[2]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project timestamp, \n    [\"Extension Id\"] = tostring(customDimensions.extensionId),\n    [\"Extension Name\"] = tostring(customDimensions.extensionName),\n    [\"Extension Publisher\"] = tostring(customDimensions.extensionPublisher),\n    [\"Extension Version\"] = tostring(customDimensions.extensionVersion),\n    [\"Object Type\"] = alObjectType,\n    [\"Object Id\"] = alObjectId,\n    [\"Object Name\"] = alObjectName,\n    [\"Method\"] = topOfStackWhatWasCalled,\n    [\"Duration\"] = duration,\n    [\"Type\"] = operationType, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Columns\"] = numberOfColumnsSelected,\n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"Isolation Level\"] = isolationLevel\n| where ['with UPDLOCK'] == \"Yes\"\n| summarize SQLStatementNo = count(), AvgDurationInMs = round(avg(Duration),2), TotalDurationInMs = sum(Duration) by \n    ['Extension Id'], ['Extension Name'], ['Extension Publisher'], ['Extension Version'],\n    ['Object Type'], ['Object Id'], ['Object Name'], Method,\n    ['SQL Statement'], Columns, JOINs, FlowFields, ['Isolation Level'], Type\n| sort by SQLStatementNo desc \n\n",
      "id": "062ec28a-16d8-41ef-968b-e1e798e88134",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where message contains \"Executed a SQL statement\"\n| where customDimensions.sqlStatement contains \"SELECT SUM\" //It's an intentional SUM\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , alStackTrace = tostring(customDimensions.alStackTrace)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Undefined'\n)\n| extend splitStacktrace = split(alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[2]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project timestamp, \n    [\"Extension Id\"] = tostring(customDimensions.extensionId),\n    [\"Extension Name\"] = tostring(customDimensions.extensionName),\n    [\"Extension Publisher\"] = tostring(customDimensions.extensionPublisher),\n    [\"Extension Version\"] = tostring(customDimensions.extensionVersion),\n    [\"Object Type\"] = alObjectType,\n    [\"Object Id\"] = alObjectId,\n    [\"Object Name\"] = alObjectName,\n    [\"Method\"] = topOfStackWhatWasCalled,\n    [\"Duration\"] = duration,\n    [\"Type\"] = operationType, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Columns\"] = numberOfColumnsSelected,\n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"Isolation Level\"] = isolationLevel\n| where ['with UPDLOCK'] == \"Yes\"\n| summarize SQLStatementNo = count(), AvgDurationInMs = round(avg(Duration),2), TotalDurationInMs = sum(Duration) by \n    ['Extension Id'], ['Extension Name'], ['Extension Publisher'], ['Extension Version'],\n    ['Object Type'], ['Object Id'], ['Object Name'], Method,\n    ['SQL Statement'], Columns, JOINs, FlowFields, ['Isolation Level'], Type\n| sort by SQLStatementNo desc \n\n",
      "id": "d3ab8ee4-c4bb-494d-87ff-70a9155ccbde",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where message contains \"Executed a SQL statement\"\n| where customDimensions.sqlStatement contains \"SELECT TOP 1 NULL\" //It's an intentional isEmpty\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\",\"Page Extension\"))\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , alStackTrace = tostring(customDimensions.alStackTrace)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Undefined'\n)\n| extend splitStacktrace = split(alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[2]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project timestamp, \n    [\"Extension Id\"] = tostring(customDimensions.extensionId),\n    [\"Extension Name\"] = tostring(customDimensions.extensionName),\n    [\"Extension Publisher\"] = tostring(customDimensions.extensionPublisher),\n    [\"Extension Version\"] = tostring(customDimensions.extensionVersion),\n    [\"Object Type\"] = alObjectType,\n    [\"Object Id\"] = alObjectId,\n    [\"Object Name\"] = alObjectName,\n    [\"Method\"] = topOfStackWhatWasCalled,\n    [\"Duration\"] = duration,\n    [\"Type\"] = operationType, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Columns\"] = numberOfColumnsSelected,\n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"Isolation Level\"] = isolationLevel\n| where ['with UPDLOCK'] == \"Yes\"\n| summarize SQLStatementNo = count(), AvgDurationInMs = round(avg(Duration),2), TotalDurationInMs = sum(Duration) by \n    ['Extension Id'], ['Extension Name'], ['Extension Publisher'], ['Extension Version'],\n    ['Object Type'], ['Object Id'], ['Object Name'], Method,\n    ['SQL Statement'], Columns, JOINs, FlowFields, ['Isolation Level'], Type\n| sort by SQLStatementNo desc \n\n",
      "id": "98b24489-2a70-45ed-90d8-b40dc2b1e18c",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where message contains \"Executed a SQL statement\"\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = tostring(customDimensions.alObjectName)\n    , alStackTrace = tostring(customDimensions.alStackTrace)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' \n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' \n  , 'Undefined'\n)\n| extend splitStacktrace = split(alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[2]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project timestamp, \n    [\"Extension Id\"] = tostring(customDimensions.extensionId),\n    [\"Extension Name\"] = tostring(customDimensions.extensionName),\n    [\"Extension Publisher\"] = tostring(customDimensions.extensionPublisher),\n    [\"Extension Version\"] = tostring(customDimensions.extensionVersion),\n    [\"Object Type\"] = alObjectType,\n    [\"Object Id\"] = alObjectId,\n    [\"Object Name\"] = alObjectName,\n    [\"Method\"] = topOfStackWhatWasCalled,\n    [\"Duration\"] = duration,\n    [\"Type\"] = operationType, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Columns\"] = numberOfColumnsSelected,\n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"Isolation Level\"] = isolationLevel\n| summarize SqlStatementNo = count(), TotalDuration = sum(Duration) by \n    ['Extension Id'], ['Extension Name'], ['Extension Publisher'], ['Extension Version'],\n    ['Object Type'], ['Object Id'], ['Object Name'], Method, ['SQL Statement'], Type, ['with UPDLOCK'], Columns, JOINs, FlowFields\n| sort by TotalDuration desc  \n\n",
      "id": "f73ccd77-7f25-4ec2-8685-5621b2a141e6",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| summarize by user_Id, bin(timestamp,1h), clientType\n| summarize count() by bin(timestamp,1h), clientType\n| where clientType != \"\"",
      "id": "6eea6c52-77da-4d97-8029-d5fc3569d6e6",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize (\n    bctraces\n);\nlet _failedToBeEnqueuedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FNY\"\n    | extend errorType = \"Not Enqueued\"\n);\nlet _failedCanBeRetriedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000HE7\"\n    | extend errorType = \"Can be Retried\"\n);\nlet _RescheduledOnLoginJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000I49\"\n    | extend errorType = \"Rescheduled On Login\"\n);\nlet _RunOnceByUserJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FMG\"\n    | extend errorType = \"Run Once By User\"\n);\nlet _FailedAndStoppedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000JRG\"\n    | extend errorType = \"Stopped\"\n);\n_failedToBeEnqueuedJQ\n| union (_failedToBeEnqueuedJQ) \n| union (_failedCanBeRetriedJQ) \n| union (_RescheduledOnLoginJQ)\n| union (_RunOnceByUserJQ) \n| union (_FailedAndStoppedJQ) \n| extend hourofday(timestamp)\n| summarize count() by errorType\n    , description = tostring( customDimensions.alJobQueueObjectDescription)\n    , objectId = toint(customDimensions.alJobQueueObjectId)\n    , objectName = tostring(customDimensions.alJobQueueObjectName)\n    , objectType = tostring(customDimensions.alJobQueueObjectType)\n    , bin(timestamp, 1h)\n| sort by timestamp asc\n",
      "id": "53ce9a45-b660-40f7-b19f-3998ad3fa22e",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize (\n    bctraces\n);\nlet _canceledTask = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"LC0044\"\n    | extend errorType = \"Canceled\"\n);\nlet _failedTask = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"LC0045\"\n    | extend errorType = \"Failed\"\n);\nlet _timeoutChangedTask = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"LC0057\"\n    | extend errorType = \"Timeout Changed\"\n);\n_canceledTask\n| union _failedTask\n| union _timeoutChangedTask\n| project timestamp\n    , errorType\n    , result = customDimensions.result\n    , message\n    , objectId = customDimensions.codeunitObjectId\n    , failedObjectId = customDimensions.codeunitFailedObjectId\n    , isReady = customDimensions.isReady\n    , notBefore = customDimensions.notBefore\n    , attemptNumber = customDimensions.attemptNumber\n    , cancelReason = tostring(customDimensions.cancelReason)\n    , cancelReasonMessage = tostring(customDimensions.cancelReasonMessage)\n    , serverExecutionTime = customDimensions.serverExecutionTime\n    , totalTime = customDimensions.totalTime\n    , sqlRowsRead = toint(customDimensions.sqlRowsRead)\n    , sqlExecutes = toint(customDimensions.sqlExecutes)\n    , sessionId = tostring(customDimensions.sessionId)\n    , timeout = customDimensions.timeout\n    , taskId = customDimensions.taskId\n| sort by timestamp asc\n",
      "id": "f9dda5c8-43bb-4b6c-8d5d-034fe4b8415c",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let correctedEndTime = datetime_add('hour',12,_endTime);\nbctraces\n| where timestamp <= (correctedEndTime)// adjust as needed\n| where customDimensions.eventId == 'RT0018' \n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toint(round(toreal(totimespan(customDimensions.executionTime))/10000,0)) \n, negativeExecutionTimeInMS = toint((round(toreal(totimespan(customDimensions.executionTime))/10000,0)) * -1) \n, alMethod = trim(@'GMK',tostring(customDimensions.alMethod))\n| extend correctedStartTime = datetime_add('millisecond',negativeExecutionTimeInMS, timestamp)\n| where correctedStartTime <= _endTime\n| extend runningDuration = iff(timestamp between (_startTime .. _endTime)\n    ,iff(correctedStartTime < _startTime, toint(round(toreal(totimespan(timestamp - _startTime))/10000,0)),toint(round(toreal(totimespan(timestamp - correctedStartTime))/10000,0)))\n    ,toint(round(toreal(totimespan(_endTime - correctedStartTime))/10000,0)))\n| extend outboundEvent = iff(correctedStartTime < _startTime, true, iff(timestamp > _endTime,true,false))\n| sort by correctedStartTime asc \n| project [\"Start Time\"] = correctedStartTime,\n    [\"End Time\"] = timestamp, \n    [\"Total Event Duration\"] = executionTimeInMS, \n    [\"Running Duration\"] = runningDuration, //Since when it was running, when the event happened\n    [\"Outbound\"] = outboundEvent,\n    [\"Client Type\"] = clientType, \n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"AL Object Method\"] = alMethod,\n    [\"Extension Information\"] = extensionInfo,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id,\n    [\"AL Stack Trace\"] = alStackTrace",
      "id": "50b9b9ae-86d2-4505-ac1e-67d63c0f170c",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let correctedEndTime = datetime_add('hour',12,_endTime);\nbctraces\n| where timestamp <= (correctedEndTime)// adjust as needed\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toint(round(toreal(totimespan(customDimensions.executionTime))/10000,0)) \n, negativeExecutionTimeInMS = toint((round(toreal(totimespan(customDimensions.executionTime))/10000,0)) * -1) \n| extend correctedStartTime = datetime_add('millisecond',negativeExecutionTimeInMS, timestamp)\n| where correctedStartTime <= _endTime\n| extend runningDuration = iff(timestamp between (_startTime .. _endTime)\n    ,iff(correctedStartTime < _startTime, toint(round(toreal(totimespan(timestamp - _startTime))/10000,0)),toint(round(toreal(totimespan(timestamp - correctedStartTime))/10000,0)))\n    ,toint(round(toreal(totimespan(_endTime - correctedStartTime))/10000,0)))\n| extend outboundEvent = iff(correctedStartTime < _startTime, true, iff(timestamp > _endTime,true,false))\n| sort by correctedStartTime asc \n| project [\"Start Time\"] = correctedStartTime,\n    [\"End Time\"] = timestamp, \n    [\"Total Event Duration\"] = executionTimeInMS, \n    [\"Running Duration\"] = runningDuration, //Since when it was running, when the event happened\n    [\"Outbound\"] = outboundEvent,\n    [\"Client Type\"] = clientType, \n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Extension Information\"] = extensionInfo,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement\n",
      "id": "5d42d464-59b4-4d01-bda9-c7bfb5f3008e",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let correctedEndTime = datetime_add('hour',12,_endTime);\nbctraces\n| where timestamp <= (correctedEndTime)// adjust as needed\n| where customDimensions.eventId == 'RT0006' \n| where customDimensions.alObjectId > 0 \n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toint(round(toreal(totimespan(customDimensions.totalTime))/10000,0)) \n, negativeExecutionTimeInMS = toint((round(toreal(totimespan(customDimensions.totalTime))/10000,0)) * -1) \n| extend correctedStartTime = datetime_add('millisecond',negativeExecutionTimeInMS, timestamp)\n| where correctedStartTime <= _endTime\n| extend runningDuration = iff(timestamp between (_startTime .. _endTime)\n    ,iff(correctedStartTime < _startTime, toint(round(toreal(totimespan(timestamp - _startTime))/10000,0)),toint(round(toreal(totimespan(timestamp - correctedStartTime))/10000,0)))\n    ,toint(round(toreal(totimespan(_endTime - correctedStartTime))/10000,0)))\n| extend outboundEvent = iff(correctedStartTime < _startTime, true, iff(timestamp > _endTime,true,false))\n| sort by correctedStartTime asc \n| project [\"Start Time\"] = correctedStartTime,\n    [\"End Time\"] = timestamp, \n    [\"Total Event Duration\"] = executionTimeInMS, \n    [\"Running Duration\"] = runningDuration, //Since when it was running, when the event happened\n    [\"Outbound\"] = outboundEvent,\n    [\"Client Type\"] = clientType, \n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Extension Information\"] = extensionInfo,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id\n",
      "id": "a1eeaa0c-9497-4ba5-aed3-fd1ae2956cad",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n//| where customDimensions.designerLevel == \"None\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \"3.BAD\"\n    , performanceBucket == \"2min-5min\", \"3.BAD\"\n    , performanceBucket == \"1min-2min\", \"3.BAD\"\n    , performanceBucket == \"30sec-1min\", \"3.BAD\"\n    , performanceBucket == \"15sec-30sec\", \"3.BAD\"\n    , performanceBucket == \"7sec-15sec\", \"3.BAD\"\n    , performanceBucket == \"3sec-7sec\", \"2.NO GOOD\"\n    , performanceBucket == \"1sec-3sec\", \"1.GOOD\"\n    , performanceBucket == \"500ms-1sec\", \"1.GOOD\"\n    , performanceBucket == \"250ms-500ms\", \"1.GOOD\"\n    , performanceBucket == \"<250ms\", \"1.GOOD\"\n    , \"00\")\n| summarize count() by bucketIndex, bin(timestamp,1d)",
      "id": "607ba1d3-3e27-4eee-b2c0-b6b7b6245869",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , \"OTHERS\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n| extend isLocking = iff(withUPDLOCK == 'Yes', 'Yes', \n     iff(operationType in (\"UPDATE\",\"DELETE\",\"INSERT\"), 'Yes', 'No'))\n| project timestamp, isLocking, duration\n| summarize sum(duration) by bin(timestamp, 10min), isLocking\n| render timechart",
      "id": "d28fe19c-5c5e-4d94-9cc6-034bc6bd4f4c",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableDeadlocked = (\nbctraces\n| where customDimensions.eventId == 'RT0012'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend TenantId = strcat(customDimensions.aadTenantId)\n    , ExtensionId = tostring(customDimensions.extensionId)\n    , ExtensionName = tostring(customDimensions.extensionName)\n    , ExtensionVersion = tostring(customDimensions.extensionVersion)\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where tablename <> \"\"\n| summarize Count = count() by tablename\n);\nTableDeadlocked\n| extend Percentage = round(Count *100 / toscalar(TableDeadlocked | summarize sum(Count)),2)\n| sort by Count desc \n",
      "id": "1d66ae92-b0e8-420a-98ff-2d8db6e7ba83",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let lockedTables = \nbctraces\n| where customDimensions.eventId == 'RT0013'\n| distinct tostring(customDimensions.snapshotId), tostring(customDimensions.sqlTableName)\n;\nlet timeouts =\nbctraces\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n;\ntimeouts\n| join kind=leftouter lockedTables on \n  $left.snapshotId == $right.customDimensions_snapshotId\n| project timestamp, \n    [\"Session ID\"] = session_Id, \n    [\"Client Type\"] = clientType, \n    [\"AL Object Info\"] = strcat(alObjectType, ' ', alObjectId, ' - ', alObjectName), \n    [\"Extension Info\"] = extensionInfo, \n    [\"AL Stack Trace\"] =  stackTrace, \n    [\"SQL Statement\"] = sqlStatement,\n    [\"Locked Table\"] = customDimensions_sqlTableName,\n    [\"SQL Session Holding Lock\"] = sqlServerSessionId,\n    [\"Snapshot ID\"] =  snapshotId\n| summarize count() by ['AL Object Info']",
      "id": "7df66036-6901-4dde-bd32-3c5b79576214",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n| project timestamp, \n    [\"Session ID\"] = session_Id, \n    [\"Client Type\"] = clientType, \n    [\"AL Object Info\"] = strcat(alObjectType, ' ', alObjectId, ' - ', alObjectName), \n    [\"Extension Info\"] = extensionInfo, \n    [\"AL Stack Trace\"] =  stackTrace, \n    [\"SQL Statement\"] = sqlStatement,\n    [\"Locked Table\"] = tablename,\n    [\"SQL Session Holding Lock\"] = sqlServerSessionId,\n    [\"Snapshot ID\"] =  snapshotId\n| summarize count() by ['Locked Table']\n| sort by count_ desc ",
      "id": "8186a9d3-472a-4d4c-91c4-d2dddd07282c",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n    , method = tostring(customDimensions.alExecutingMethodScope)\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n| project timestamp, \n    [\"Session ID\"] = session_Id, \n    [\"Client Type\"] = clientType, \n    [\"Extension Info\"] = extensionInfo, \n    [\"AL Object Info\"] = strcat(alObjectType, ' ', alObjectId, ' - ', alObjectName), \n    [\"AL Stack Trace\"] =  stackTrace, \n    [\"AL Method\"] = method,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Locked Table\"] = tablename,\n    [\"SQL Session Holding Lock\"] = sqlServerSessionId,\n    [\"Snapshot ID\"] =  snapshotId",
      "id": "0e6e3cf7-72f6-4440-b605-5b51063e5b44",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _searchSting = 'AL CallStack: ';\nbctraces\n| where customDimensions.eventId == 'RT0005'\n| where customDimensions.sqlStatement has 'UPDLOCK'\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablenamewithjoins: string \"\\\\$\" space: string\n| parse kind=regex tablenamewithjoins with tablenaamenojoins: string \"\\\\$\" newspace : string \n| parse kind=regex tablenaamenojoins with space2: string \"\\\\$\" onlytablenamenojoins: string \n//| parse kind=regex tablenamewithjoins with stringtoeliminate: string \"\\\\$\" tablenamewithoutjoins: string\n| extend tablename = case(\n    tablenamewithjoins contains \"$\", onlytablenamenojoins\n    , tablenamewithjoins \n)\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project timestamp\n, [\"Client Type\"] = tostring(customDimensions.clientType)\n, [\"Duration (sec)\"] = toreal(totimespan(customDimensions.executionTime))/10000000 \n, [\"Object Information\"] = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' ', \n    alObjectName)\n, [\"Stack Trace\"] = substring(stackTrace, \n                            indexof(customDimensions.alStackTrace, _searchSting) + strlen(_searchSting))\n, [\"Extension Information\"] = strcat(extensionName, ' ' , customDimensions.extensionVersion, ' - ',\n    customDimensions.extensionPublisher)\n, sqlStatement\n, Table = tablename\n| summarize [\"Count\"] = count(), [\"Avg (sec)\"] = round(avg(['Duration (sec)']),0) by ['Stack Trace'], sqlStatement, ['Client Type'], ['Extension Information'], ['Object Information'], Table\n| extend [\"Total Cost (sec)\"] = ['Avg (sec)'] * Count\n| top 50 by ['Total Cost (sec)'] desc",
      "id": "ea1f8e8f-e724-41fe-907d-aaef28d48013",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where isnotempty(customDimensions.sqlStatement)\n| where isnotempty(customDimensions.alStackTrace)\n| extend numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n| where numberOfJoins > _joins // adjust as needed\n| where not(customDimensions.alObjectType in (\"Page\", \"PageExtension\"))\n| where customDimensions.sqlStatement startswith \"SELECT\"\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend objectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim('GMK',tostring(customDimensions.extensionName))\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = tostring(customDimensions.extensionId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, numberOfJoins, executionTimeInMS, ObjectType, ObjectId, objectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN\n| summarize [\"Count\"] = count() by extensionName, ObjectType, ObjectId, objectName, numberOfColumnsSelected, numberOfJoins, tablename, sqlStatement, StackTrace, clientType\n| sort by numberOfColumnsSelected, Count\n| project extensionName, ObjectType, ObjectId, objectName, tablename, numberOfColumnsSelected, Count, numberOfJoins, sqlStatement, StackTrace, clientType",
      "id": "0000e61c-1399-43b1-883d-8b602f709d9d",
      "usedVariables": ["_joins", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = round(toreal(totimespan(customDimensions.executionTime))/10000,0)  \n, alMethod = tostring(customDimensions.alMethod)\n| where executionTimeInMS > 1000 //greater than 1 sec\n| sort by timestamp desc \n| project timestamp, \n    [\"Client Type\"] = clientType, \n    [\"Extension Information\"] = extensionInfo,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"AL Object Method\"] = alMethod,\n    [\"Duration\"] = executionTimeInMS, \n    [\"AL Object Information\"] = alObjectInfo, \n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id,\n    [\"AL Stack Trace\"] = alStackTrace",
      "id": "9530d75b-41c7-424f-ac7a-1e1a52870369",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0006'\n| where customDimensions.result == \"Success\"\n| where customDimensions.reportingEngine != \"ProcessingOnly\"\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, totalTime = customDimensions.totalTime\n, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n| extend totalTimeInSec = totalTimeInMS / 1000\n, intent = tostring(customDimensions.sqlDatabaseAccessIntent)\n, reportAction = tostring(customDimensions.reportAction)\n, reportingEngine = tostring(customDimensions.reportingEngine)\n, documentFormat = tostring(customDimensions.documentFormat)\n, sqlExecutes = toint(customDimensions.sqlExecutes)\n, sqlRowsRead = toint(customDimensions.sqlRowsRead)\n, numberOfRows = toint(customDimensions.numberOfRows)\n| summarize count(), sum( totalTimeInSec ), avg( totalTimeInSec ), round(avg(sqlExecutes),0), round(avg(sqlRowsRead),0), round(avg(numberOfRows),0) by alObjectInfo\n, intent, reportAction, reportingEngine, documentFormat\n| order by avg_totalTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    intent,\n    reportAction,\n    reportingEngine,\n    documentFormat,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_totalTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_totalTimeInSec,2),\n    [\"Avg SQL Executes\"] = round(avg_sqlExecutes, 0),\n    [\"Avg SQL Rows Read\"] = round(avg_sqlRowsRead,0),\n    [\"Avg Dataset Rows\"] = avg_numberOfRows\n| sort by Ocurrance desc",
      "id": "f520cfa8-b490-431f-95f6-c5381fe9b886",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableCount = (\nbcpageviews\n| where customDimensions.eventId == 'CL0001'\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n| project \ntimestamp\n, extensionId = tostring(customDimensions.appId)\n, extensionPublisher = tostring(customDimensions.appPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.appName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, executionTimeInMS = toint(customMeasurements.duration)  \n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")),\" (Count)\") \n| project-away timestamp, dayBin, executionTimeInMS\n| sort by day asc \n| evaluate pivot(day, count())\n);\nTableCount\n| join\n(bcpageviews\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| where customDimensions.eventId == 'CL0001'\n| project \ntimestamp\n, extensionId = tostring(customDimensions.appId)\n, extensionPublisher = tostring(customDimensions.appPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.appName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, executionTimeInMS = toint(customMeasurements.duration)  \n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")), \" (avg)\")\n| project-away timestamp, dayBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectId, alObjectName, day\n| sort by day asc \n| evaluate pivot(day,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectId1, alObjectName1",
      "id": "ad7a285b-9f4f-4510-91f6-2ad82dce4890",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n//| where customDimensions.designerLevel == \"None\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \"11\"\n    , performanceBucket == \"2min-5min\", \"10\"\n    , performanceBucket == \"1min-2min\", \"09\"\n    , performanceBucket == \"30sec-1min\", \"08\"\n    , performanceBucket == \"15sec-30sec\", \"07\"\n    , performanceBucket == \"7sec-15sec\", \"06\"\n    , performanceBucket == \"3sec-7sec\", \"05\"\n    , performanceBucket == \"1sec-3sec\", \"04\"\n    , performanceBucket == \"500ms-1sec\", \"03\"\n    , performanceBucket == \"250ms-500ms\", \"02\"\n    , performanceBucket == \"<250ms\", \"01\"\n    , \"00\")\n| extend perfBucket = strcat(bucketIndex, ': ', performanceBucket)\n| summarize count() by perfBucket\n| sort by perfBucket asc ",
      "id": "2f70c4e5-db21-41df-a7e7-fc699c3bc21c",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bcpageviews\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \">=5min\"\n    , performanceBucket == \"2min-5min\", \"2min-5min\"\n    , performanceBucket == \"1min-2min\", \"1min-2min\"\n    , performanceBucket == \"30sec-1min\", \"30sec-1min\"\n    , performanceBucket == \"15sec-30sec\", \"15sec-30sec\"\n    , performanceBucket == \"7sec-15sec\", \"7sec-15sec\"\n    , performanceBucket == \"3sec-7sec\", \"3sec-7sec\"\n    , performanceBucket == \"1sec-3sec\", \"0-3sec\"\n    , performanceBucket == \"500ms-1sec\", \"0-3sec\"\n    , performanceBucket == \"250ms-500ms\", \"0-3sec\"\n    , performanceBucket == \"<250ms\", \"0-3sec\"\n    , \"00\")\n| summarize count() by bucketIndex\n| sort by bucketIndex asc ",
      "id": "6f57d476-d803-4495-997c-52ec9ef8c3af",
      "usedVariables": ["bcpageviews"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let ObjectNameAndClientLRQCount= ( \nbctraces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| where customDimensions.alObjectId !in (\"18122317\",\"18122310\")\n| extend alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend eventId = customDimensions.eventId \n, environmentName = customDimensions.environmentName\n, companyName = tostring(customDimensions.companyName)\n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(customDimensions.extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', customDimensions.alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n, method = tostring(customDimensions.alMethod)\n| sort by executionTimeInMS desc \n| project timestamp, \n    [\"Environment Name\"] = environmentName,\n    [\"Client Type\"] = tostring(clientType), \n    [\"AL Object ID\"] = tostring(alObjectId),\n    [\"AL Object Type\"] = tostring(alObjectType),\n    [\"AL Object Name\"] = tostring(alObjectName),\n    [\"AL method\"] = method,\n    [\"Duration\"] = executionTimeInMS, \n    [\"Company Name\"] = companyName, \n    [\"AL Object Information\"] = alObjectInfo, \n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"Extension Information\"] = extensionInfo,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id\n| summarize count(), round(avg(Duration),0) by ['AL Object ID'], ['AL Object Type'], ['AL Object Name'], ['AL method'], ['Client Type'], ['AL Stack Trace']\n| sort by count_ desc \n);\nObjectNameAndClientLRQCount\n| extend Percentage = round(count_ *100 / toscalar(ObjectNameAndClientLRQCount | summarize sum(count_)),2)\n| sort by count_ desc",
      "id": "5f97ca3a-dea6-4981-a1f0-5952e4a2975c",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet LRQ = (bctraces\n| where 1==1 \n    and timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n);\nLRQ\n| make-series Count = count() on timestamp from _startTime to _endTime step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "86b4eaf1-8372-43f1-9545-5ea9bd175d1a",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet LRAM = (bctraces\n| where 1==1 \n    and timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| where customDimensions.alObjectId <> \"18122317\"\n);\nLRAM\n| make-series Count = count() on timestamp from _startTime to _endTime step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "b0460daa-52b3-4c4f-bd95-e34c9719f76f",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet DEADLOCKS = (bctraces\n| where timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n);\nDEADLOCKS\n| make-series Count = count() on timestamp from _startTime to _endTime step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)\n| render timechart with(title='LRAM Decomposition')",
      "id": "71399372-a651-4bb9-b614-eab2f47c2fe6",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet LOCKTIMEOUTS = (bctraces\n| where timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.eventId == 'RT0012'\n| project timestamp\n, componentVersion = customDimensions.componentVersion\n, environmentType = customDimensions.environmentType\n, environmentName = customDimensions.environmentName\n, aadTenantId = customDimensions.aadTenantId\n, alObjectId = customDimensions.alObjectId\n);\nLOCKTIMEOUTS\n| make-series Count = count() on timestamp from _startTime to _endTime step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)\n| render timechart with(title='LRAM Decomposition')",
      "id": "dd5e5040-9fa0-4e3f-8457-d193cc285933",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet INCOMING = (traces\n| where timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms) \n| where operation_Name == \"Web Services Call\" // do note that in a later version of the schema, this field will not be used \n     or customDimensions.eventId == \"RT0008\" // starting from version 16.1, the eventId is used to identity signal types\n);     \nINCOMING\n| make-series Count = count() on timestamp from _startTime to _endTime step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "8abd7c53-7c34-4df3-94cd-67d13e1091de",
      "usedVariables": ["_endTime", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where 1==1 \n    and timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n| extend executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 \n| summarize round(avg(executionTimeInMS),0) by bin(timestamp, 7d)",
      "id": "a09196eb-96ed-4eff-a30b-029cfde537af",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where 1==1 \n    and timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| extend  executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n| summarize round(avg(executionTimeInMS),0) by bin(timestamp, 7d)\n",
      "id": "2d497629-bc06-46ae-83a5-83b7cb4c6c41",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 10;\nbctraces\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| extend alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend alObjectInfo = strcat(tostring(customDimensions.alObjectType), ' ', tostring(customDimensions.alObjectId), ' - ',alObjectName)\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , \"OTHERS\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n| extend isLocking = iff(withUPDLOCK == 'Yes', 'Yes', \n     iff(operationType in (\"UPDATE\",\"DELETE\",\"INSERT\"), 'Yes', 'No'))\n| where isLocking == \"Yes\"\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n| summarize sum(duration) by alObjectInfo\n| sort by sum_duration\n| limit _maxCount ",
      "id": "1bf37e7f-1ff1-4c58-bb34-1edc82528873",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where 1==1 \n    and timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n| extend executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n| summarize Duration = sum(executionTimeInMS) by bin(timestamp, 1d), clientType\n",
      "id": "98e59d0f-4eab-4aa0-b40d-78ca26fbcad4",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where 1==1 \n    and timestamp >= todatetime(_startTime)\n    and timestamp <= todatetime(_endTime) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| extend executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n| summarize Duration = sum(executionTimeInMS) by bin(timestamp, 1d), clientType\n",
      "id": "26bc3608-4605-48a3-8fe3-999af0bda4c5",
      "usedVariables": ["_endTime", "_startTime", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| summarize by session_Id, bin(timestamp,1h), clientType\n| summarize count() by bin(timestamp,1h), clientType\n| where clientType != \"\"",
      "id": "6b55148f-054f-4283-a5ab-5d3d0eddb2a4",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == 'RT0006'\n| where customDimensions.result == \"Success\"\n| where customDimensions.reportingEngine != \"ProcessingOnly\"\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, totalTime = customDimensions.totalTime\n, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n| extend totalTimeInSec = totalTimeInMS / 1000\n, intent = tostring(customDimensions.sqlDatabaseAccessIntent)\n//, reportAction = tostring(customDimensions.reportAction)\n, reportingEngine = tostring(customDimensions.reportingEngine)\n, documentFormat = tostring(customDimensions.documentFormat)\n, sqlExecutes = toint(customDimensions.sqlExecutes)\n, sqlRowsRead = toint(customDimensions.sqlRowsRead)\n, numberOfRows = toint(customDimensions.numberOfRows)\n| summarize count(), sum( totalTimeInSec ), avg( totalTimeInSec ), round(avg(sqlExecutes),0), round(avg(sqlRowsRead),0), round(avg(numberOfRows),0) by alObjectInfo\n, intent\n//, reportAction\n, reportingEngine\n, documentFormat\n| order by avg_totalTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    intent,\n//    reportAction,\n    reportingEngine,\n    documentFormat,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration (sec)\"] = round(avg_totalTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_totalTimeInSec,2),\n    [\"Avg SQL Executes\"] = round(avg_sqlExecutes, 0),\n    [\"Avg SQL Rows Read\"] = round(avg_sqlRowsRead,0),\n    [\"Avg Dataset Rows\"] = avg_numberOfRows\n| sort by Ocurrance desc\n",
      "id": "c6e450e2-b751-4267-adff-2c68f9c835e4",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.extensionId == '6ead7645-95ce-45a2-aa6f-7df9064b6965'\n| where customDimensions.eventId == 'ALEOS053-0001'\n| where message contains \"CalculateHistoryQtyAmount-End\"\n| extend eventId = tostring(customDimensions.eventId)\n  , periodCode = tostring(customDimensions.alPeriodCode)\n  , item = tostring(customDimensions.alItem)\n| project timestamp, eventId, session_Id, periodCode, item\n| join kind=fullouter    \n(\nbctraces\n| where customDimensions.extensionId == '6ead7645-95ce-45a2-aa6f-7df9064b6965'\n| where customDimensions.eventId == 'ALEOS053-0001'\n| where message contains \"CalculateHistoryQtyAmount-Start\"\n| extend eventId = tostring(customDimensions.eventId)\n  , periodCode = tostring(customDimensions.alPeriodCode)\n  , item = tostring(customDimensions.alItem)\n| project timestamp, eventId, session_Id, periodCode, item\n) on session_Id, eventId, periodCode, item\n| extend eventDuration = timestamp - timestamp1\n| extend eventDurationInSec = round(eventDuration / 1s)\n| project timestamp1, session_Id1, periodCode1, item1, eventDuration, eventDurationInSec\n| order by timestamp1 desc ",
      "id": "b5bbf09f-b48f-42c7-b1ef-ebb258114abe",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Any CalcSum that we can find in Telemetry that is locking\nbctraces\n| where isnotempty(customDimensions.sqlStatement)\n| where customDimensions.eventId == 'RT0005'\n| where isnotempty(customDimensions.alStackTrace) // only interested in parts in the code we can change\n//| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT COUNT\" //It's an intentional SUM\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| parse kind=regex sqlStatement with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , TenantId = strcat(customDimensions.aadTenantId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, tablename, executionTimeInMS, ObjectType, ObjectId, alObjectName, stackTrace, eventId, clientType, sqlStatement, extensionIdsFromJOIN",
      "id": "24bd7f5c-46e1-42c5-be59-d40ed8d449b3",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.extensionId == '6ead7645-95ce-45a2-aa6f-7df9064b6965'\n| where customDimensions.eventId == 'ALEOS053-0001'\n| where message contains \"CalculateHistoryQtyAmount-End\"\n| extend eventId = tostring(customDimensions.eventId)\n  , periodCode = tostring(customDimensions.alPeriodCode)\n  , item = tostring(customDimensions.alItem)\n| project timestamp, eventId, session_Id, periodCode, item\n| join kind=fullouter    \n(\nbctraces\n| where customDimensions.extensionId == '6ead7645-95ce-45a2-aa6f-7df9064b6965'\n| where customDimensions.eventId == 'ALEOS053-0001'\n| where message contains \"CalculateHistoryQtyAmount-Start\"\n| extend eventId = tostring(customDimensions.eventId)\n  , periodCode = tostring(customDimensions.alPeriodCode)\n  , item = tostring(customDimensions.alItem)\n| project timestamp, eventId, session_Id, periodCode, item\n) on session_Id, eventId, periodCode, item\n| extend eventDuration = timestamp - timestamp1\n| extend eventDurationInSec = round(eventDuration / 1s)\n| project timestamp1, session_Id1, periodCode1, item1, eventDuration, eventDurationInSec\n| order by timestamp1 desc ",
      "id": "b312229d-931c-4c7e-a1c4-b27c68edd30f",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "spbTraces",
      "id": "79f08fe2-bec9-49b8-8bad-1a4ab8dbd59d",
      "usedVariables": ["spbTraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "spbTraces\n| where eventId != \"ALEOS075-B0002\"\n| summarize Occurrance = count()\n    , totalDuration = sum(duration)\n    by session_Id, bonusLine\n| where bonusLine != \"\"\n| sort by totalDuration desc",
      "id": "c26ccea3-ba80-4dd8-923e-5e07eac1e896",
      "usedVariables": ["spbTraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "spbTraces\n| where eventId != \"ALEOS075-B0002\"\n| summarize Occurrance = count()\n    , totalDuration = sum(duration)\n    by session_Id, bonusLine\n| where bonusLine != \"\"\n| sort by totalDuration desc\n| top 10 by totalDuration",
      "id": "47612ef9-517d-48f6-82f8-fc7b3bff3a96",
      "usedVariables": ["spbTraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "spbTraces\n| where eventId startswith \"ALEOS\"\n| summarize Occurrance = count()\n    , totalDuration = sum(duration)\n    by session_Id, eventId, message\n| sort by totalDuration desc",
      "id": "ecdcc6a3-57ef-4d60-bcdf-c4dafa5c382b",
      "usedVariables": ["spbTraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "spbTraces\n| where eventId startswith \"ALEOS\"\n| summarize Occurrance = count()\n    , totalDuration = sum(duration)\n    by event = strcat(eventId, ' ', message), session_Id\n| sort by totalDuration desc",
      "id": "257c9bd2-cb7c-4031-8323-b01995d8c6b6",
      "usedVariables": ["spbTraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "spbTraces\n| where eventId == \"RT0018\"\n| summarize Occurrance = count()\n    , totalDuration = sum(executionTimeInMs)\n    , sqlRowsRead = sum(sqlRowsRead)\n    , sqlExecutes = sum(sqlExecutes)\n    by session_Id, stackTrace, objectId, objectType, objectName, method\n| sort by totalDuration desc",
      "id": "c7c1e1d2-46d0-42fd-b71e-a021ab2732c9",
      "usedVariables": ["spbTraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "spbTraces\n| where eventId == \"RT0005\"\n| summarize Occurrance = count()\n    , minDuration = min(executionTimeInMs)\n    , avgDuration = round(avg(executionTimeInMs),0)\n    , maxDuration = max(executionTimeInMs)\n    , totalDuration = sum(executionTimeInMs)\n    by session_Id, stackTrace, sqlStatement, objectId, objectType, objectName\n| sort by totalDuration desc",
      "id": "04e136af-6267-45de-ad65-8fbdad273132",
      "usedVariables": ["spbTraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == \"RT0008\" // starting from version 16.1, the eventId is used to identity signal types\n| where isempty(['_WSType']) or toupper(customDimensions.category) in (['_WSType'])\n| project timestamp\n, alPublisher = tostring(customDimensions.alPublisher)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, category = tostring(customDimensions.category)\n, endpoint = tostring(customDimensions.endpoint)\n, httpStatusCode = tostring(customDimensions.httpStatusCode) // httpStatusCode available from 16.3\n, httpHeaders = tostring(customDimensions.httpHeaders)       // httpHeaders available from 16.3\n, httpMethod = tostring(customDimensions.httpMethod) // httpMethod available from 16.3\n, diagnosticsMessage = tostring(customDimensions.diagnosticsMessage) // Only logged in case of an error in a OData/API call. diagnosticsMessage available from 22.0\n, failureReason = tostring(customDimensions.failureReason) // Only logged in case of an error in a OData/API call. failureReason available from 22.0\n, executionTime = customDimensions.serverExecutionTime\n, requestQueueTime = customDimensions.requestQueueTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.0.\n// the datatype for executionTime and requestQueueTime is timespan so need to convert to milliseconds\n, requestQueueTimeMS = toreal(totimespan(customDimensions.requestQueueTime))/10000\n, executionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 \n, requestTotalTimeMS = ( toreal(totimespan(customDimensions.totalTime))+toreal(totimespan(customDimensions.requestQueueTime)) )/10000\n, sqlExecutes = toint(customDimensions.sqlExecutes)\n, sqlRowsRead = toint(customDimensions.sqlRowsRead)\n// these lines illustrate how to extract data from the httpHeaders dimension\n| extend httpHeadersTmp =  tostring( httpHeaders)\n| extend httpHeadersJSON = parse_json(httpHeadersTmp)\n| extend msUserAgent = tostring( httpHeadersJSON.['ms-dyn-useragent'] )\n| extend httpAuthorization = tostring( httpHeadersJSON.['Authorization'] ) // Authorization header (truncated) available from 17.3\n| extend isAdminCafe = iif(endpoint startswith \"MS/api/eos/acGroup/v2.0/companies()/ac\",true,false)\n//| where isAdminCafe == \"false\"\n//| summarize count(), avg(executionTimeInMS), avg(requestQueueTimeMS), avg(requestTotalTimeMS) by alObjectType, alObjectId, alObjectName, category, endpoint,httpMethod, isAdminCafe\n//| sort by count_ desc \n| summarize Occurrance = count(), Duration = round(sum(executionTimeInMS),0) by bin(timestamp, 1min)\n| render timechart\n",
      "id": "831129f3-8e39-4110-a643-036c885c2117",
      "usedVariables": ["_WSType", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableCount = (\nbctraces\n| where customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")),\" (Count)\") \n| project-away timestamp, dayBin, executionTimeInMS\n| sort by day asc \n| evaluate pivot(day, count())\n);\nTableCount\n| join\n(bctraces\n| where customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")), \" (avg)\")\n| project-away timestamp, dayBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, operationType, sqlStatement, day\n| sort by day asc \n| evaluate pivot(day,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.operationType == $right.operationType,\n$left.sqlStatement == $right.sqlStatement\t\t\t\t\t\t\t\t\t\t \n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, operationType1, sqlStatement1",
      "id": "0de8c23c-399a-440b-9344-789083b1a505",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableCount = (\nbctraces\n| where customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, dayBin = bin(timestamp,5min)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd-hh-mm\")),\" (Count)\") \n| project-away timestamp, dayBin, executionTimeInMS\n| sort by day asc \n| evaluate pivot(day, count())\n);\nTableCount\n| join\n(bctraces\n| where customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, dayBin = bin(timestamp,5min)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd-hh-mm\")), \" (avg)\")\n| project-away timestamp, dayBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, operationType, sqlStatement, day\n| sort by day asc \n| evaluate pivot(day,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.operationType == $right.operationType,\n$left.sqlStatement == $right.sqlStatement\t\t\t\t\t\t\t\t\t\t \n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, operationType1, sqlStatement1",
      "id": "35220ce5-eeaf-43da-837a-ad7957c7b907",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == \"RT0008\"\n| where customDimensions.category == \"Api\"\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| project _processingTimeMS, \n        [\"Method\"] = tostring(customDimensions.httpMethod)\n| summarize count(), [\"Total Time\"] = round(sum(_processingTimeMS),0) by Method\n\n\n",
      "id": "b52f385a-2042-4f93-8cf5-9fd5f7aae3f0",
      "usedVariables": ["bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.eventId == \"RT0008\"\n| where customDimensions.category == \"Api\"\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| project _processingTimeMS, \n        [\"Method\"] = tostring(customDimensions.httpMethod)\n| summarize count(), [\"Total Time\"] = round(sum(_processingTimeMS),0) by Method\n\n\n",
      "id": "95c06750-aedf-4c8d-8927-3b19046be80b",
      "usedVariables": ["bctraces"]
    },
    {
      "id": "de6744ba-af86-46a4-8dc3-eba07834e3fb",
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.companyName has_any (_companyName)\n| where customDimensions.clientType has_any (_clientType)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where session_Id has_any (_sessionId)\n| where user_Id has_any (_userId)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n        , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)",
      "usedVariables": [
        "_OnlyWorkingHours",
        "_clientType",
        "_companyName",
        "_endTime",
        "_publisher",
        "_sessionId",
        "_startTime",
        "_userId"
      ]
    },
    {
      "id": "72898c5b-5162-48a0-bc26-c4d1c582c9a3",
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.companyName has_any (_companyName)\n| where customDimensions.clientType has_any (_clientType)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where session_Id has_any (_sessionId)\n| where user_Id has_any (_userId)",
      "usedVariables": [
        "_clientType",
        "_companyName",
        "_endTime",
        "_publisher",
        "_sessionId",
        "_startTime",
        "_userId"
      ]
    },
    {
      "id": "5ccb0760-dfe7-4e49-8bea-b01bd3c4f20d",
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where session_Id has_any (_spbSessionId)\n| project timestamp\n    , session_Id\n    , user_Id\n    , eventId = tostring(customDimensions.eventId) \n    , message\n    , duration = toint(customDimensions.alDuration)\n    , bonusLine = tostring(customDimensions.alBonusLine)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMs = toreal(totimespan(customDimensions.executionTime))/10000\n    , objectId = toint(customDimensions.alObjectId)\n    , objectType = tostring(customDimensions.alObjectType)\n    , objectName = tostring(customDimensions.alObjectName)\n    , method = tostring(customDimensions.alMethod)\n    , stackTrace =  tostring(customDimensions.alStackTrace)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , sqlRowsRead = toint(customDimensions.sqlRowsRead)\n    , sqlExecutes = toint(customDimensions.sqlExecutes)",
      "usedVariables": ["_spbSessionId", "bctraces"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where session_Id has_any (_sessionId)\n| where user_Id has_any (_userId)\n| summarize arg_max(timestamp,*) by tostring(customDimensions.clientType)\n| project [\"Client Type\"] = tostring(customDimensions.clientType)\n| sort by ['Client Type'] asc \n",
      "id": "6b394b72-66d0-4ee2-b924-84b8c11281d3",
      "usedVariables": [
        "_endTime",
        "_publisher",
        "_sessionId",
        "_startTime",
        "_userId"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.clientType has_any (_clientType)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where session_Id has_any (_sessionId)\n| where user_Id has_any (_userId)\n| summarize arg_max(timestamp,*) by tostring(customDimensions.companyName)\n| project [\"Company Name\"] = tostring(customDimensions.companyName)\n| sort by ['Company Name'] asc \n\n\n\n\n",
      "id": "6e5245dc-e98d-4669-bd80-c0d4438b1dcd",
      "usedVariables": [
        "_clientType",
        "_endTime",
        "_publisher",
        "_sessionId",
        "_startTime",
        "_userId"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.clientType has_any (_clientType)\n| where session_Id has_any (_sessionId)\n| where user_Id has_any (_userId)\n| summarize arg_max(timestamp,*) by tostring(customDimensions.extensionPublisher)\n| project [\"Publisher\"] = tostring(customDimensions.extensionPublisher)\n| sort by Publisher asc \n",
      "id": "f356a791-55f7-40f1-8657-e9bbcdb9a054",
      "usedVariables": [
        "_clientType",
        "_endTime",
        "_sessionId",
        "_startTime",
        "_userId"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 50000\n| project [\"AL Object ID\"] = toreal(customDimensions.alObjectId)\n| distinct [\"AL Object ID\"]\n| order by [\"AL Object ID\"] asc",
      "id": "c7d1f045-43bc-4b64-9ba0-22f497bc70d1",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.companyName has_any (_companyName)\n| where customDimensions.clientType has_any (_clientType)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where user_Id has_any (_userId)\n| summarize arg_max(timestamp,*) by tostring(session_Id)\n| project [\"Session Id\"] = tostring(session_Id)\n| sort by ['Session Id'] asc \n",
      "id": "783e503b-3127-4304-88f5-702a7f19189a",
      "usedVariables": [
        "_clientType",
        "_companyName",
        "_endTime",
        "_publisher",
        "_startTime",
        "_userId"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.companyName has_any (_companyName)\n| where customDimensions.clientType has_any (_clientType)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where session_Id has_any (_sessionId)\n| summarize arg_max(timestamp,*) by tostring(user_Id)\n| project [\"User Id\"] = tostring(user_Id)\n| sort by ['User Id'] asc \n\n\n",
      "id": "357c1cba-4b42-4104-b045-bd1c3c113473",
      "usedVariables": [
        "_clientType",
        "_companyName",
        "_endTime",
        "_publisher",
        "_sessionId",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.clientType has_any (_clientType)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where session_Id has_any (_sessionId)\n| where user_Id has_any (_userId)\n| summarize arg_max(timestamp,*) by toupper(customDimensions.category)\n| project [\"WS Type\"] = toupper(customDimensions.category)\n| sort by ['WS Type'] asc ",
      "id": "0adf4794-f9c0-41f3-8ae3-bfcb75b092b1",
      "usedVariables": [
        "_clientType",
        "_endTime",
        "_publisher",
        "_sessionId",
        "_startTime",
        "_userId"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "bctraces\n| where customDimensions.alObjectId == 18059900\n| where customDimensions.alObjectType == \"Report\"\n| project [\"Session ID\"] = session_Id\n| distinct [\"Session ID\"]",
      "id": "cd69903b-d3b3-4983-8af3-586f25750e6f",
      "usedVariables": ["bctraces"]
    }
  ]
}
