{
  "$schema": "https://dataexplorer.azure.com/static/d/schema/60/dashboard.json",
  "id": "ebaa19fb-c02b-4587-993e-5c3a8abf0d0f",
  "eTag": "27ba28d5-514c-4c04-8552-3f4006365c54",
  "title": "Business Central Insights Single Tenant Online",
  "tiles": [
    {
      "id": "a27ec310-3bcb-4145-bfa1-f4232ff89717",
      "title": "Long Running SQL Queries (ms)",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 20, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "4924ffbb-60a6-464b-b7d1-34abe4b6ab2a"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "0d9c7c7d-3fb5-4fa6-9308-286adf620062",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "with UPDLOCK", "values": ["Yes"] },
              { "operator": "!=", "column": "Type", "values": ["SELECT"] }
            ],
            "chainingOperator": "or",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "fd2e9d33-7552-45cb-ba1c-c4b8cebf7d05",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Duration", "values": ["1000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "815fca99-d789-4b4a-be34-f677a4d5fce6",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "!=", "column": "Type", "values": ["SELECT"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "d059eab6-9c59-4551-9b41-9c4ebf002bf7",
      "title": "Lock Snapshot",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 60, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "e31ba014-1113-43da-8ff8-4dc50c1d44b3"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "2cfd710a-43f7-4cf7-8d94-193e2beb3b46",
      "title": "SQL Execution Chart",
      "visualType": "stackedcolumn",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 37, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "b6f22ad4-c709-4093-8132-79bccec3fa68"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "3d67e785-f63c-44f6-bb04-a96f2472565b",
      "title": "Top 20 Objects Used during the Long SQL Queries",
      "visualType": "pie",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 30, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "b1d1c18b-2344-4e2c-a961-2053a23e8cf4"
      },
      "visualOptions": {
        "hideLegend": true,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "c618b79b-de37-42af-8657-f788c44c53ae",
      "title": "Top 20 Slowest AL Methods (in ms)",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 10, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "6d5d4c42-5ace-43a6-80c5-4699902e94fc"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "11402fde-e050-4e5e-b767-e73f173801d6",
            "ruleType": "colorByCondition",
            "applyToColumn": "Avg Duration",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg Duration", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg Duration > 5000",
            "visualType": "table"
          },
          {
            "id": "92160ff2-25ce-4514-bfe6-7b8229c827ac",
            "ruleType": "colorByCondition",
            "applyToColumn": "Avg Duration",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg Duration", "values": ["750"] },
              { "operator": "<=", "column": "Avg Duration", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg Duration > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "872dc80f-a7e1-4361-9e23-8c7796a2821e",
      "title": "Long Running SQL Queries for the defined Time Range",
      "visualType": "markdown",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 0, "y": 4, "width": 10, "height": 5 },
      "queryRef": {
        "kind": "query",
        "queryId": "24665fc5-3577-4c14-8404-6550500c3db2"
      },
      "visualOptions": { "xColumn": null }
    },
    {
      "id": "dc592e1f-adfd-4166-8637-f36a861a215e",
      "title": "OData Usage (in ms) [Limited to past 24 hrs.]",
      "visualType": "table",
      "pageId": "fd2a227c-d2e0-49f4-a2ad-b21b9a1dd382",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "dd9b8402-59ae-4e87-b2da-ca1666b39858"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "bf2e28be-8012-4489-852a-98bdbc7471c1",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 5000",
            "visualType": "table"
          },
          {
            "id": "2258645e-1fd1-4d9c-8243-e5817ddb3c26",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["750"] },
              { "operator": "<=", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "7c89e962-0e32-418f-b16c-01b8da9ab560",
      "title": "Long Running AL Methods by Object Type for the defined Time Range",
      "visualType": "markdown",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 10, "y": 4, "width": 14, "height": 5 },
      "queryRef": {
        "kind": "query",
        "queryId": "e3ecf43b-41c0-4f67-9b19-854928544249"
      },
      "visualOptions": { "xColumn": null }
    },
    {
      "id": "d896aaa6-beca-4d1c-af8f-e8e6024d0391",
      "title": "Job Queue Overview",
      "visualType": "markdown",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 0, "y": 9, "width": 10, "height": 4 },
      "queryRef": {
        "kind": "query",
        "queryId": "390ff303-06c7-46fc-857e-34e2a3702a1e"
      },
      "visualOptions": { "xColumn": null }
    },
    {
      "id": "19c1b81f-7fc8-4925-b18d-7b3765b21102",
      "title": "Lock Timeouts (5 min buckets)",
      "visualType": "stackedcolumn",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 25, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "f32bacaf-9848-4163-960a-91c8880a6503"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "70559276-6c87-453d-a9f8-e7e181115fbe",
      "title": "Top 50 SQL Queries that holds Database Locks",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 70, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "80680473-cae8-4b90-9f06-199467ddb3b5"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "7b5f9890-013d-41af-a076-328230096649",
      "title": "Job Queue Status",
      "visualType": "column",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "83a6c51f-a1f9-4866-95a5-c0ec18ce522f"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "1a76223b-a537-4b1e-9c73-5be23636e06c",
      "title": "Job Queue Entries",
      "visualType": "table",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 9, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "61dee320-5ba1-42f2-9092-3ed5471ea23f"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "3b9e6177-c18e-455f-8eb1-023748b11cbf",
            "ruleType": "colorByCondition",
            "applyToColumn": "State",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "==", "column": "State", "values": ["Started"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "State = Started",
            "visualType": "table"
          },
          {
            "id": "23a81bd6-7fc9-4720-a830-95a74ede0f5b",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "==", "column": "State", "values": ["Finished"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "green",
            "tag": "",
            "icon": null,
            "ruleName": "State = Finished",
            "visualType": "table"
          },
          {
            "id": "4ceeab8c-870f-4c07-92d9-f86681efd0e6",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "==", "column": "State", "values": ["Failed"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "State = Failed",
            "visualType": "table"
          },
          {
            "id": "b4059a58-dfcc-4b25-b3c6-4398ea4469c5",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": "==", "column": "State", "values": ["Enqueued"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "State = Enqueued",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "df42d57c-420e-4145-a824-27d34114c534",
      "title": "API Usage (in ms) ",
      "visualType": "table",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "f6f1fd33-56d4-41f0-a471-cad68abb0502"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "8ef4ce1b-e009-4ad7-939e-7cd290cfbf1d",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 5000",
            "visualType": "table"
          },
          {
            "id": "0b1b883a-6153-437d-bc75-e7fbbceb0f6b",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["750"] },
              { "operator": "<=", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "99ea2a24-8370-4ef6-b036-d04eb3e955dd",
      "title": "Top 20 API Calls by Duration (in ms)",
      "visualType": "pie",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 8, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "5ef20169-6ff3-4b43-9a1e-f67219cb53a4"
      },
      "visualOptions": {
        "hideLegend": true,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "0da4abc2-d47b-4c78-9d4c-b0bc195a8867",
      "title": "Top 20 API Calls by Volume",
      "visualType": "pie",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 17, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "a32bcdcb-c8af-4113-b540-36ae0f9f3209"
      },
      "visualOptions": {
        "hideLegend": true,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "bb30a128-d743-4e4f-b3f3-17f2b1cc321b",
      "title": "Top 20 OData Calls by Duration (in ms)",
      "visualType": "pie",
      "pageId": "fd2a227c-d2e0-49f4-a2ad-b21b9a1dd382",
      "layout": { "x": 0, "y": 7, "width": 11, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "0fc7aab0-3857-4c14-892c-e75f3d41078e"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "61e45fe7-647d-46c5-9640-9f28844eca31",
      "title": "Top 20 OData Calls by Volume",
      "visualType": "pie",
      "pageId": "fd2a227c-d2e0-49f4-a2ad-b21b9a1dd382",
      "layout": { "x": 11, "y": 7, "width": 13, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "e86bd4ee-1585-40f6-a37e-98dfd4d694f0"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "e28cece8-7858-427e-a00d-001cb911edf5",
      "title": "Top 20 Page Usage",
      "visualType": "pie",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 31, "width": 12, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "2fe546a6-ea2c-40cd-8e66-d5102c55eb3f"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "47c5e32b-b2eb-4dd0-b268-4ce48ecbc6a7",
      "title": "Top 20 Report Usage",
      "visualType": "pie",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 12, "y": 31, "width": 12, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "e8b0a8b0-b9c6-4ab1-b327-96d6bec93344"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "e70239e5-f63c-4ebe-a4c7-e47c79d57293",
      "title": "Job Queue Execution Statistics",
      "visualType": "table",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 18, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "4f21aa58-ddea-4a75-8912-527519392485"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "b3a85703-bc48-434f-9056-e7620d61a2d0",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 5000",
            "visualType": "table"
          },
          {
            "id": "a6c2202f-6c70-4e78-ad27-98ca48ebb95a",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["750"] },
              { "values": ["5000"], "operator": "<=", "column": "Avg. Time" }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "1a631a53-08dc-4f8b-8d7d-a86c383b19df",
      "title": "Web Service Calls Overview for past 24 hrs.",
      "visualType": "markdown",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 10, "y": 9, "width": 14, "height": 4 },
      "queryRef": {
        "kind": "query",
        "queryId": "dc62a16b-ace5-484c-878b-804e5bcfbeba"
      },
      "visualOptions": { "xColumn": null }
    },
    {
      "id": "e2225a85-d095-4232-994d-2692a8c20af4",
      "title": "Index Lifecycle",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 33, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "1ff493c2-18f6-4317-8846-6f8b8750fcd9"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "dd772426-c109-465a-9231-826b82fbc4f1",
      "title": "Page View Count",
      "visualType": "table",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "89043a9a-d884-4495-9e8b-fdfae36a61ef"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "d1dd2755-b9b9-4d80-bc6f-560a20a489fb",
      "title": "Top 20 Codeunit Usage",
      "visualType": "pie",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 43, "width": 12, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "0eaa9613-3196-4148-a444-e419cf0e1b3d"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "bcdbed35-53ac-4227-9d48-707a43ff7a03",
      "title": "Top 20 Query Usage",
      "visualType": "pie",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 12, "y": 43, "width": 12, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "e138ca81-d2b1-4258-a4af-0f9242735099"
      },
      "visualOptions": {
        "hideLegend": false,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "93435685-c962-420c-8e59-e73714c43185",
      "title": "Errors Dialog",
      "visualType": "table",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 26, "width": 24, "height": 6 },
      "queryRef": {
        "kind": "query",
        "queryId": "e7b5faee-6139-4148-8a3d-cbc174e1465e"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "8876e2d5-b6ae-40db-bcd1-d99bac1f47b7",
      "title": "Delete Environment Lifecycle",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 41, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "20345544-61bd-4662-a78b-66ba11603fb6"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "d092bd8f-bed0-4e5f-ae2e-d3a539c6b7c2",
      "title": "All Lifecycle Events",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 24, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "339a0441-ee8c-4a31-a651-bf1be1b9a852"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "610ad1a1-6a17-4fb5-a8c2-17de446cb342",
      "title": "Active Users",
      "visualType": "table",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 0, "width": 12, "height": 5 },
      "queryRef": {
        "kind": "query",
        "queryId": "3952395d-3bc6-4f06-ab36-9a234294193e"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "f3d10b30-5268-4c56-8514-b73d8494bb48",
      "title": "Active Users Graph (60d)",
      "visualType": "timechart",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 12, "y": 0, "width": 12, "height": 5 },
      "queryRef": {
        "kind": "query",
        "queryId": "83409fad-2b5c-4264-917c-b012d1c339f0"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": ["Daily"],
        "seriesColumns": ["environmentName"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": true,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "be049551-b68d-47c7-968d-4d8430dbfe13",
      "title": "Update Environment Lifecycle",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 8, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "b0712d27-5de2-4422-87b1-721604bee1c4"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b22c19cb-1d19-405b-b739-b5e2b1acd4c7",
      "title": "Period Data Ingestion",
      "visualType": "stackedcolumn",
      "pageId": "1a9f99e5-2026-4f32-a914-3ee9e64ce31e",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "9c44e15a-37d4-4aff-9567-8d09dd139084"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": true,
        "xColumnTitle": "",
        "xColumn": "Day",
        "yColumns": null,
        "seriesColumns": ["EventId"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "a151f9f7-1afa-4ba9-920c-9199cc329a36",
      "title": "Data Ingestion",
      "visualType": "table",
      "pageId": "1a9f99e5-2026-4f32-a914-3ee9e64ce31e",
      "layout": { "x": 0, "y": 12, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "ebbbe314-8b05-4e0c-a082-3b52bac02bca"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "aa814387-a986-4a8e-8812-8ec77579319e",
      "title": "No. of Long Running SQL Queries",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 0, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "c454754a-5e1f-429a-847c-c1029bc13454"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "886fe569-ef19-4521-bc4e-47ebec9e54db",
      "title": "No. of Long Running AL Methods",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 14, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "5246a3f3-9611-46e4-8d5c-cad9b5e7c4d6"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": true,
        "drillthroughDisabled": false,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "bf5393aa-e26a-4396-94b3-62e65c1dab98",
      "title": "No. of Sessions by Client",
      "visualType": "timechart",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 52, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "de7383c0-617d-4d5c-be5e-ce92b040b568"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "8b72f5f9-23af-455a-807f-a2b465577cc1",
      "title": "No. of SQL Lock Timeout",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 28, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "751b5b91-8bca-491b-9018-42d3722ccec0"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "4a396f63-ed5f-47c6-9265-2a1589623d59",
      "title": "SQL Deadlocks by Process",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "554857ed-26df-4f11-a1cf-caea485fb2c3"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "1861e1dc-ee3b-45f4-b42f-3370a429cefc",
      "title": "No. of  SQL Deadlocks",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 28, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "bef00c01-1acb-47db-b263-84be3168cbf5"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "b662014e-fcd8-4800-b315-e4e638cdfd2d",
      "title": "API Calls Timeline",
      "visualType": "timechart",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 27, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "fd77ed92-8e06-4d2e-9b66-b5ffa438b09a"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "2cd7db76-28c3-4914-a54e-907883f7ee66",
      "title": "Joins impact",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 53, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "865abd9a-38ed-49a7-9f6a-aabecc1c0f1e"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "f01083eb-eee1-43d9-972b-1700db7658e6",
      "title": "LRAM by Day",
      "visualType": "table",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 13, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "c993bd4a-880b-40ec-8f82-c657d3fba111"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "4ce42f55-3f25-4b5a-aa54-671cd07b285f",
      "title": "LRAM by Process",
      "visualType": "table",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "b7136ca9-74d9-44ff-a14e-d8195c6794a9"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "81fc8700-6e7f-43c1-bd6d-036b61e48ba3",
      "title": "Lock by Calcsum",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 80, "width": 24, "height": 6 },
      "queryRef": {
        "kind": "query",
        "queryId": "99afdd71-6ceb-4196-adf2-621edd19dfb7"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "0ca7b891-2d18-4df8-b1fa-436c82c90017",
      "title": "Incoming WebServices Calls",
      "visualType": "timechart",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 42, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "27be1af1-f048-4b4b-a8f5-5d2abdc83841"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": true,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "430043db-0924-4275-96bd-7c2620dbf3d1",
      "title": "Lock by IsEmpty",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 86, "width": 24, "height": 6 },
      "queryRef": {
        "kind": "query",
        "queryId": "425d82a0-51d1-4663-a459-9cfb859a0b4d"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b6ed5df9-e8cf-49db-b6db-404be057947a",
      "title": "LRQ Count and Average per Day buckets",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 63, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "a08fbb6f-8ab8-45c9-8396-e13bd2075c39"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "230bf4d2-9d35-46ec-a7b7-c3ee22a9e32d",
      "title": "LRQ Summarized by Object",
      "visualType": "table",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "e9d068b6-5e57-437f-b37a-15dae28b6ef7"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "0d9c7c7d-3fb5-4fa6-9308-286adf620062",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "avg_Duration", "values": ["1000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "97b65dad-5ccd-4299-b090-d8943d7cc460",
            "ruleType": "colorByCondition",
            "ruleName": "",
            "applyTo": "rows",
            "conditions": [
              {
                "operator": "==",
                "column": "Isolation Level",
                "values": ["UPDLOCK"]
              },
              {
                "operator": "!=",
                "column": "Operation Type",
                "values": ["SELECT"]
              }
            ],
            "chainingOperator": "or",
            "colorStyle": "bold",
            "applyToColumn": null,
            "hideText": false,
            "color": "blue",
            "tag": "",
            "icon": null,
            "visualType": "table"
          },
          {
            "id": "d08746ba-ef01-445c-9f4e-af26187d54e3",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              {
                "operator": "!=",
                "column": "Operation Type",
                "values": ["SELECT"]
              }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "6c7fe09d-8948-4d6a-b89f-dd20a39b8349",
      "title": "Today SQL Statistics",
      "visualType": "multistat",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 4 },
      "queryRef": {
        "kind": "query",
        "queryId": "d9abd6e6-5295-449e-acad-37a4beb1cbdf"
      },
      "visualOptions": {
        "multiStat__textSize": "large",
        "multiStat__valueColumn": null,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "multiStat__displayOrientation": "horizontal",
        "multiStat__labelColumn": null,
        "multiStat__slot": { "width": 3, "height": 1 },
        "colorRules": []
      }
    },
    {
      "id": "9eb001bc-9d0f-43f7-9ad7-c82e7b6a5b0a",
      "title": "SQL Deadlocks by Table / Client Type",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 8, "width": 12, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "74b8e180-f8ab-40bc-bd19-a3e1fe6c7b80"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b5ef2a52-4641-4f7f-8111-ecfad3ea65d1",
      "title": "Page performance per Day",
      "visualType": "stacked100column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 72, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "c6f83d0b-d863-43b9-ba5c-6fceb1d3e931"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["count_"],
        "seriesColumns": ["perfBucket"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "65f3f1c6-55d9-4799-a87a-667780537c1b",
      "title": "Outgoing WS Errors",
      "visualType": "table",
      "pageId": "61a90ca3-7409-4c63-93a7-c415f15e4ea3",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "c39a8e13-e6c6-4c2b-a64c-17f1446800a2"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "9f1a080f-e85b-4a2a-b944-3ff24df8966b",
      "title": "LRAM by Process per hour",
      "visualType": "timechart",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 26, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "4e6aa1ad-7cdf-4c87-b0d0-325c19273563"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "a692c101-13f5-4664-be6d-8202441261b7",
      "title": "LRQ By Process",
      "visualType": "table",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 39, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "a2cc6a57-0c25-49c0-9964-6a1e948a0b50"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "ada8ab7e-45d0-4c85-b21f-48550df5ad8a",
      "title": "LRQ by Process per hour",
      "visualType": "timechart",
      "pageId": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54",
      "layout": { "x": 0, "y": 52, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "500d36b5-e5d0-4406-a880-a45bf62b6173"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": [
          "ObjectType",
          "ObjectId",
          "ObjectName",
          "Source Process"
        ],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "f984a491-0c12-4652-8cff-cb91a8c7a042",
      "title": "Web Service Errors",
      "visualType": "table",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 37, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "bc9e1039-3710-49c1-8d28-a31b57f1ad1a"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "8ef4ce1b-e009-4ad7-939e-7cd290cfbf1d",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 5000",
            "visualType": "table"
          },
          {
            "id": "0b1b883a-6153-437d-bc75-e7fbbceb0f6b",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Avg. Time", "values": ["750"] },
              { "operator": "<=", "column": "Avg. Time", "values": ["5000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Avg. Time > 750",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "fcf4faf9-79b1-4918-935f-e1f298637b29",
      "title": "Sales Order AVG (15 mins bucket)",
      "visualType": "line",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 11, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "59a4c33a-a763-49d7-9f2c-fd044fc213d0"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["Min. Time", "Avg. Time", "Max. Time"],
        "seriesColumns": ["AL Object Name"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "9a208ae6-3899-4899-9865-01f66829e543",
      "title": "Outgoing WS Errors Details",
      "visualType": "table",
      "pageId": "61a90ca3-7409-4c63-93a7-c415f15e4ea3",
      "layout": { "x": 0, "y": 8, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "f6a23842-5e53-47c3-8804-7af969cad50f"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "f803ea14-c961-4270-88c9-e606c986af30",
      "title": "Page performance per Hour",
      "visualType": "column",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 41, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "b5dc7101-b3f2-430d-a872-db436bb7e2bb"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["count_"],
        "seriesColumns": ["perfBucket"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "f37d3811-e8d2-4893-852f-a7effcff96a2",
      "title": "Sales Order Count (15 mins bucket)",
      "visualType": "column",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 22, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "e09bb9a9-6298-415e-b32d-b7d2788af986"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["Execution Count"],
        "seriesColumns": ["AL Object Name"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "6527c03a-e18a-4bbb-9888-ee3d562cd742",
      "title": "No. of Long Running SQL Queries (weekly)",
      "visualType": "column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 84, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "433bbf94-eed2-4c08-a556-0b7ba325d612"
      },
      "visualOptions": {
        "xColumn": null,
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "yColumns": null,
        "seriesColumns": null,
        "hideLegend": true,
        "xColumnTitle": "",
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "edeff75b-3f3e-402a-aa9e-6cf63da97c96",
      "title": "No. of Long Running AL Methods (weekly)",
      "visualType": "column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 84, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "2e72008a-374b-47d0-86c1-9d1fc5d276f6"
      },
      "visualOptions": {
        "xColumn": null,
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "yColumns": null,
        "seriesColumns": null,
        "hideLegend": true,
        "xColumnTitle": "",
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": true,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "84038a84-f704-4346-a981-79b8222635bb",
      "title": "No. of  SQL Deadlocks (weekly)",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 98, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "b5a40852-5169-4969-8648-b1fb5173d754"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "9e12e864-db6c-4256-a647-fe18b87f7b3a",
      "title": "No. of SQL Lock Timeout (weekly)",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 98, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "704e3b62-e578-43bd-8af1-d47f98e97291"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "be945e60-dbfa-440f-9014-613e5db668f2",
      "title": "Sales Order AVG per day",
      "visualType": "column",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 30, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "0411c197-19b3-46e7-a8ae-8867cb478638"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["Avg. Time"],
        "seriesColumns": ["AL Object Name"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "bcdfa0c5-5ad1-47ea-9bde-2b53324b6a1e",
      "title": "Lock Timeouts",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 51, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "ab420794-3ab5-411a-b25e-cee4a6929655"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "7646f4b7-fe5e-4d80-8657-91fcef071258",
            "ruleType": "colorByCondition",
            "applyToColumn": "Snapshot ID",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Snapshot ID", "values": [""] }
            ],
            "chainingOperator": "and",
            "colorStyle": "light",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "Snapshot ID >",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "565ee164-0a6f-40d7-95d4-fa8e7e097669",
      "title": "SQL Deadlocks (5 min buckets)",
      "visualType": "stackedcolumn",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 16, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "ca2cabde-a3d2-4408-a3c6-0c7680c7c58f"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "be7aaeb8-48b5-4dc4-98af-5b53d4f67f34",
      "title": "Job Queue Errors",
      "visualType": "table",
      "pageId": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
      "layout": { "x": 0, "y": 27, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "ec70321b-741f-438e-acc1-388cd93e75bf"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "5ab24045-9239-450a-bdda-8b2c60f88688",
      "title": "LRAM Count and Average per Day buckets",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 56, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "589416d0-a26c-4ec8-b228-7008b569740c"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "b4421319-3848-4a9b-ae3c-3e2bad33b740",
      "title": "Data Upgrade Performance",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 16, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "f79b8376-0cc8-4ad5-a3b1-3dc9312d0465"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "9aff8892-39e8-4e24-b94b-ab881639421d",
      "title": "Platform Update",
      "visualType": "table",
      "pageId": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "ab8b4f62-5be2-4246-b953-b06e8c803bed"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "71a9cada-11c2-4ca0-8990-f9094e23a481",
      "title": "Page Views",
      "visualType": "table",
      "pageId": "bc9ae068-c7b3-417e-8f99-82f1740e0427",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "4435a7e1-68ec-4fab-bab5-12af2bf657fd"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "56570211-6dd7-499e-b76d-cc61c2537855",
      "title": "Long Running AL Methods - LRAM",
      "visualType": "table",
      "pageId": "bc9ae068-c7b3-417e-8f99-82f1740e0427",
      "layout": { "x": 0, "y": 13, "width": 24, "height": 15 },
      "queryRef": {
        "kind": "query",
        "queryId": "195db166-2d23-41a6-9309-a26eb9de4492"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "76a79858-7510-456b-b308-0a9cd6be5c7d",
      "title": "Long Running SQL Queries  - LRQ",
      "visualType": "table",
      "pageId": "bc9ae068-c7b3-417e-8f99-82f1740e0427",
      "layout": { "x": 0, "y": 28, "width": 24, "height": 21 },
      "queryRef": {
        "kind": "query",
        "queryId": "7d85f11b-3f8d-42f4-b2c4-e029abb22f53"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "a5ff93d8-2345-4920-8e50-9f7d6856d12c",
      "title": "Tarot",
      "visualType": "multistat",
      "pageId": "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
      "layout": { "x": 0, "y": 13, "width": 24, "height": 6 },
      "description": "Fortune tarot",
      "queryRef": {
        "kind": "query",
        "queryId": "a15b8265-ac7e-4653-9a1e-7a99bda12fd5"
      },
      "visualOptions": {
        "multiStat__textSize": "small",
        "multiStat__valueColumn": "Value",
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "multiStat__displayOrientation": "horizontal",
        "multiStat__labelColumn": "Label",
        "multiStat__slot": { "width": 3, "height": 2 },
        "colorRules": []
      }
    },
    {
      "id": "d7333fa2-9b57-406e-85d9-626d7d751849",
      "title": "Long Running AL methods (ms)",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 21, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "2ee57c96-232b-4d8f-8ea9-952cc1997401"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "0d9c7c7d-3fb5-4fa6-9308-286adf620062",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": ">", "column": "Duration", "values": ["30000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "bf9767c9-a20b-4ee0-8f61-54df71af13dd",
      "title": "What was running : LRAM",
      "visualType": "table",
      "pageId": "4610c3a4-114b-48f5-a151-f3504d693951",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "5c3a3d35-0228-411e-b69c-07210ace6372"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "04dc169a-bf27-4344-9095-e690e4e531f9",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Outbound", "values": ["true"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Outbound Signal",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "11dbbfae-61e7-4aa9-b14e-7f4f9f7e6aea",
      "title": "What was running : LRQ",
      "visualType": "table",
      "pageId": "4610c3a4-114b-48f5-a151-f3504d693951",
      "layout": { "x": 0, "y": 11, "width": 24, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "23cf2890-3318-4ee5-916f-6fa747b5ad31"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "837a33b7-9f76-448f-81c4-729d04549aaa",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Outbound", "values": ["true"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "Outbound Signal",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "6c92ae4b-d79b-489b-a5a0-857103bd8f50",
      "title": "What was running : Report",
      "visualType": "table",
      "pageId": "4610c3a4-114b-48f5-a151-f3504d693951",
      "layout": { "x": 0, "y": 19, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "88e9cc76-4934-432b-85db-097b67c86772"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "052c526a-ec94-4f97-84fd-0db0e4013f9e",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "Outbound", "values": ["true"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "yellow",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "74168515-b2fa-478f-8286-e289b8134f04",
      "title": "Incoming WS - API",
      "visualType": "table",
      "pageId": "bc9ae068-c7b3-417e-8f99-82f1740e0427",
      "layout": { "x": 0, "y": 49, "width": 24, "height": 16 },
      "queryRef": {
        "kind": "query",
        "queryId": "483357c5-f014-4cf5-a893-4d0a851fa1ce"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "0ff646aa-02f1-45d8-8084-7bcff5ebdf51",
      "title": "Report Execution and Intent",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 66, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "fed9fd97-466d-4d7f-932f-470bb1bd760c"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "6051488b-d0c6-4c1a-90a3-7d5b2747097b",
      "title": "Report Intent",
      "visualType": "table",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 32, "width": 24, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "eeea3ed4-3cdf-44f6-9d4e-be5f8bbefaa1"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "8fb83b9a-cff2-4f28-b516-0afa14d63fa5",
      "title": "SetLoadFields",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 92, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "efe154e9-07e4-4bc8-9930-07b6f4fabc79"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "1662e78b-20a9-4842-bfeb-49da995a6618",
      "title": "Page Views Count and Average per Day buckets",
      "visualType": "table",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 53, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "242ae224-6033-48ce-ab47-dc7f88bf9175"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": false,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "c0ee8d4c-d7fc-47e6-aaba-c661958e5460",
      "title": "Page performance",
      "visualType": "pie",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 0, "y": 63, "width": 12, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "eff3bb96-deee-449c-99a3-56e754070e9b"
      },
      "visualOptions": {
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": ["count_"],
        "seriesColumns": ["perfBucket"],
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "8f170343-b52a-474d-adc3-7e7ee01e6927",
      "title": "Page performance",
      "visualType": "pie",
      "pageId": "41c2b22e-69f3-4513-9227-26c3c42e9a08",
      "layout": { "x": 12, "y": 63, "width": 12, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "4f2330fa-d7eb-4954-87c2-6a06b117a6dc"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": ["count_"],
        "seriesColumns": ["perfBucket"],
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "fd2bbbe5-c222-4162-9370-62151351e81d",
      "title": "Active Users by Hour",
      "visualType": "stackedcolumn",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 5, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "2aa6aecd-d3e0-4c19-b77c-ce676bc9ca8b"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "b0b99f79-c5ac-4680-a5bb-cf9147bdc0da",
      "title": "Active Sessions by Hour",
      "visualType": "stackedcolumn",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 15, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "0d60fa13-36e0-4655-8739-4012663912da"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "4e8ce9cc-809f-4810-9d96-023398e44382",
      "title": "SQL Execution chart by Duration",
      "visualType": "stackedcolumn",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 44, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "640f136e-5fa3-4301-9595-ba34ae450c8d"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "hideLegend": false,
        "xColumnTitle": "",
        "xAxisScale": "linear",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "78cf9196-cf7c-4cf8-8684-4bfd945aa07f",
      "title": "Page performance per Day",
      "visualType": "stacked100column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 60, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "921303a6-83f4-4348-946d-a362335e94dc"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["count_"],
        "seriesColumns": ["perfBucket", "bucketIndex"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "e6749b1a-6525-4346-b61d-65b8b8fea68c",
      "title": "Page Views",
      "visualType": "table",
      "pageId": "4dd61d20-1588-4d64-bc01-aebb52ed93ba",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "5e74758a-5510-46a1-8d97-196bef6ab3f7"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "a2948ce9-9a34-4bf9-a754-72642cd11991",
      "title": "Long Running AL Methods - LRAM",
      "visualType": "table",
      "pageId": "4dd61d20-1588-4d64-bc01-aebb52ed93ba",
      "layout": { "x": 0, "y": 13, "width": 24, "height": 15 },
      "queryRef": {
        "kind": "query",
        "queryId": "a56ce7d8-a916-42b5-97a9-a6b8967f37ce"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "c0a7b794-3dc8-413b-bdaa-ad24b65bbf7a",
      "title": "Long Running SQL Queries  - LRQ",
      "visualType": "table",
      "pageId": "4dd61d20-1588-4d64-bc01-aebb52ed93ba",
      "layout": { "x": 0, "y": 28, "width": 24, "height": 21 },
      "queryRef": {
        "kind": "query",
        "queryId": "600c2b98-4c78-49bf-97bb-40dec1d04879"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "161a52ad-45b0-40d9-95bb-68a33eb683d1",
      "title": "Incoming WS - API",
      "visualType": "table",
      "pageId": "4dd61d20-1588-4d64-bc01-aebb52ed93ba",
      "layout": { "x": 0, "y": 49, "width": 24, "height": 16 },
      "queryRef": {
        "kind": "query",
        "queryId": "8a33ec02-e75c-4168-b24d-00634cad3bcb"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "9ba9c5c3-216f-49b9-b3ea-4dc76f288f71",
      "title": "Avg. of Long Running SQL Queries",
      "visualType": "column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 112, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "be57c4be-8649-474b-a03d-e4b1e2527e1a"
      },
      "visualOptions": {
        "xColumn": null,
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "yColumns": null,
        "seriesColumns": null,
        "hideLegend": true,
        "xColumnTitle": "",
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "d60d0b0c-a68a-4bbe-a64b-c7ed358c670b",
      "title": "IVC",
      "visualType": "table",
      "pageId": "a766ad41-9070-40d7-8dd7-70676512faaa",
      "layout": { "x": 0, "y": 39, "width": 17, "height": 7 },
      "queryRef": {
        "kind": "query",
        "queryId": "46280d6f-8c46-4e8d-83aa-5eb06ad7d56d"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "9d2aa0b6-7a85-4f52-94c0-c934f49762c8",
      "title": "Avg. of Long Running AL Methods (weekly)",
      "visualType": "column",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 112, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "a24ff253-0525-42e3-9509-3be19107d983"
      },
      "visualOptions": {
        "xColumn": null,
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "yColumns": null,
        "seriesColumns": null,
        "hideLegend": true,
        "xColumnTitle": "",
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": true,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "8c29a9b9-a13d-4c4b-b10f-54d5fa391ceb",
      "title": "Locked Tables in Timeout",
      "visualType": "pie",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 12, "y": 34, "width": 12, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "e9054f59-6bf7-443f-ab37-8b167c72d1ed"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": "Locked Table",
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage", "value"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "c79ce9a8-caf7-4c5b-8d87-188888a20709",
      "title": "Object involved in Timeout",
      "visualType": "pie",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 34, "width": 12, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "58f5c91a-ef9c-4170-a84c-42e9f81c2387"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage", "value"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "8cbc4451-9fba-47f6-885e-a8c67e07c7e3",
      "title": "Top 10 Objects used during the Long SQL Queries (LOCKING)",
      "visualType": "pie",
      "pageId": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
      "layout": { "x": 0, "y": 73, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "a5e10f64-ea56-4f0c-8d9a-764b5c3fa3d8"
      },
      "visualOptions": {
        "hideLegend": true,
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "pie",
        "pie__topNSlices": null,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "386fd778-8bcf-423c-a7f2-ef26e359698f",
      "title": "SQL Lock Timeouts by Table / Client Type",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 12, "y": 8, "width": 12, "height": 8 },
      "queryRef": {
        "kind": "query",
        "queryId": "45b3b9b3-4735-4afe-9138-cf92726c851b"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "a6035187-d725-4340-9319-c4171305077d",
      "title": "LRAM Summarized by Object",
      "visualType": "table",
      "pageId": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "b7d00ecd-4082-4631-a1d3-126be83ec144"
      },
      "visualOptions": {
        "hideLegend": false,
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": true,
        "drillthroughDisabled": true,
        "crossFilter": [
          {
            "interaction": "column",
            "property": "extensionPublisher",
            "parameterId": "9cc55dcf-17d4-4829-9340-37c385862cdf",
            "disabled": false
          }
        ],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "0d9c7c7d-3fb5-4fa6-9308-286adf620062",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "avg_Duration", "values": ["1000"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "97b65dad-5ccd-4299-b090-d8943d7cc460",
            "ruleType": "colorByCondition",
            "ruleName": "",
            "applyTo": "rows",
            "conditions": [
              {
                "operator": "==",
                "column": "Isolation Level",
                "values": ["UPDLOCK"]
              }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "applyToColumn": null,
            "hideText": false,
            "color": "blue",
            "tag": "",
            "icon": null,
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "3994946e-e2ef-40fb-812e-6072bb45705a",
      "title": "Long Running SQL Queries: DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 0, "width": 24, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "0a8e63dd-2e75-48a7-913a-95b30ae79efd"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "5ad51702-2c0c-407e-b576-6a0644882ef2",
      "title": "No. of Long Running AL Methods : DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 14, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "bc52cdab-441a-42a1-9e39-917160c30520"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": true,
        "drillthroughDisabled": false,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "67612190-b516-412c-8fa0-aac7da06da53",
      "title": "No. of Deadlocks DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 27, "width": 24, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "0183a88f-5d88-4728-b203-93f2bef1fa37"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "1bcff85e-640f-4ae8-96cc-97f358fbe4d7",
      "title": "No. of SQL Lock Timeout DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 41, "width": 24, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "1529790d-d43d-4726-b5da-202e52915ccb"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "8e45a983-bb22-40ae-83a1-c9fc777d76ab",
      "title": "Incoming WebServices Calls DECOMPOSITION",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 55, "width": 24, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "8c20c311-77f2-4e06-a243-38d5e6b99e92"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "legendLocation": "bottom",
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "cdb87d3a-551b-4ac3-a49c-6e84171584c3",
      "title": "No. of Long Running SQL Queries (weekly)",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 67, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "8a82a5f1-630f-4a89-bb5b-481a22cfbe61"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "6e6864a1-0160-4c4b-9a3a-1d41735011b2",
      "title": "No. of Long Running AL Methods (weekly)",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 80, "width": 24, "height": 13 },
      "queryRef": {
        "kind": "query",
        "queryId": "8c7217dc-2b09-419f-996d-e9c8c0063a96"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": true,
        "drillthroughDisabled": false,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "223005b6-a0c6-4da1-8d55-46ea53d7d6cd",
      "title": "No. of  SQL Deadlocks (weekly)",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 93, "width": 24, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "9f514152-85c6-46c8-8138-100d3d3512af"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "d46d94cd-dbba-4fae-ac07-8b9f5a87df3c",
      "title": "No. of SQL Lock Timeout (weekly)",
      "visualType": "timechart",
      "pageId": "263061b7-3ba0-4655-9ca4-42d7215fe172",
      "layout": { "x": 0, "y": 107, "width": 24, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "bf1eb507-0b1d-4417-9920-122154e39b5a"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "c72cfb92-1a1f-49b9-9d82-be35aa9b167e",
      "title": "Duration of Long Running SQL Queries",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 0, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "8c945b18-3df0-4aa5-ab81-673d02ca6131"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "115fcd05-5225-425e-af85-ff2f519da65a",
      "title": "Duration of Long Running AL Methods",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 12, "y": 14, "width": 12, "height": 14 },
      "queryRef": {
        "kind": "query",
        "queryId": "bf4a01e3-183d-45d8-811d-c7b8333e5755"
      },
      "visualOptions": {
        "multipleYAxes": {
          "additional": [],
          "showMultiplePanels": false,
          "base": {
            "horizontalLines": [],
            "yAxisScale": "linear",
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "columns": [],
            "label": "",
            "id": "-1"
          }
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": true,
        "drillthroughDisabled": false,
        "crossFilter": [
          { "interaction": "column", "property": "count_", "disabled": false }
        ],
        "drillthrough": [
          {
            "pairs": [
              {
                "parameterId": "faae011a-19c6-437e-a04c-d7de238ed7ad",
                "property": "timestamp"
              }
            ],
            "destinationPages": ["a1b9eab8-5e92-446b-bdd0-6df8160c9c54"],
            "disabled": false
          }
        ],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "0db22eef-57cb-42ec-8af4-2f54f741c00b",
      "title": "Long Running SQL Queries  - LRQ REDUCED",
      "visualType": "table",
      "pageId": "bc9ae068-c7b3-417e-8f99-82f1740e0427",
      "layout": { "x": 0, "y": 65, "width": 24, "height": 21 },
      "queryRef": {
        "kind": "query",
        "queryId": "8d795823-de4a-48d1-bb05-4f4590653e49"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "2a89aee3-7e06-4e12-b956-c3464a42e9d7",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "==", "column": "isNew", "values": ["Yes"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          },
          {
            "id": "3add60e5-1a3e-432b-b0e1-87782f46e46c",
            "ruleType": "colorByCondition",
            "applyToColumn": null,
            "hideText": false,
            "applyTo": "rows",
            "conditions": [
              { "operator": "<", "column": "delta", "values": ["0"] }
            ],
            "chainingOperator": "and",
            "colorStyle": "bold",
            "color": "red",
            "tag": "",
            "icon": null,
            "ruleName": "",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "cdb66866-5205-421a-ae00-ad41444aa2a4",
      "title": "Lock by COUNT",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 102, "width": 24, "height": 6 },
      "queryRef": {
        "kind": "query",
        "queryId": "3a2350bd-c19e-481e-9c8c-c784af95fc5f"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "ee7cb948-e4f3-43df-bc6c-6d3ccf49bd20",
      "title": "Lock Timeouts x Stack Trace",
      "visualType": "table",
      "pageId": "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
      "layout": { "x": 0, "y": 42, "width": 24, "height": 9 },
      "queryRef": {
        "kind": "query",
        "queryId": "b298f8c7-6b2a-45bf-9f7e-130aa84fb1bc"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": false,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": [
          {
            "id": "7646f4b7-fe5e-4d80-8657-91fcef071258",
            "ruleType": "colorByCondition",
            "applyToColumn": "Snapshot ID",
            "hideText": false,
            "applyTo": "cells",
            "conditions": [
              { "operator": ">", "column": "Snapshot ID", "values": [""] }
            ],
            "chainingOperator": "and",
            "colorStyle": "light",
            "color": "blue",
            "tag": "",
            "icon": null,
            "ruleName": "Snapshot ID >",
            "visualType": "table"
          }
        ]
      }
    },
    {
      "id": "8b3f5882-51c4-4d3c-9b24-366a0ca749b8",
      "title": "API Calls Timeline x Endpoint",
      "visualType": "stackedcolumn",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 45, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "172d5e06-05b2-42a6-9133-4368cdc1c5d0"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "e6941e88-1414-48d9-aa0b-cf04eb4bbe78",
      "title": "API Calls Timeline x Endpoint",
      "visualType": "stackedcolumn",
      "pageId": "9bd8a199-ba41-40fa-87b8-f9833a040b03",
      "layout": { "x": 0, "y": 55, "width": 24, "height": 10 },
      "queryRef": {
        "kind": "query",
        "queryId": "aa52e77c-5e36-4653-b23c-9ea0e6a8a973"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "d3ad08e1-accb-4c09-892b-634be271e27a",
      "title": "No. of  SQL Deadlocks SGL",
      "visualType": "stackedcolumn",
      "pageId": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
      "layout": { "x": 0, "y": 126, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "0e973bd3-b77b-4e89-b135-575771203f36"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "bottom",
        "xColumnTitle": "",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "selectedDataOnLoad": { "all": true, "limit": 10 },
        "dataPointsTooltip": { "all": false, "limit": 1 }
      }
    },
    {
      "id": "e82e2b73-b5d4-434e-82a8-5d2c36f85b00",
      "title": "Error Dialog Summary",
      "visualType": "table",
      "pageId": "86aec96d-a8bf-443e-a2e2-f0f6db29e20a",
      "layout": { "x": 0, "y": 0, "width": 9, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "ca42e9cd-4d89-4cab-a6b5-dbda8e8a866c"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "2c119086-d309-4f02-a4c7-258f221b2ebd",
      "title": "Error Dialog Summary",
      "visualType": "pie",
      "pageId": "86aec96d-a8bf-443e-a2e2-f0f6db29e20a",
      "layout": { "x": 9, "y": 0, "width": 15, "height": 12 },
      "queryRef": {
        "kind": "query",
        "queryId": "8c6ae020-5066-4475-9c58-53316570c913"
      },
      "visualOptions": {
        "hideLegend": true,
        "legendLocation": "bottom",
        "xColumn": null,
        "yColumns": null,
        "seriesColumns": null,
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "labelDisabled": false,
        "pie__label": ["name", "percentage"],
        "tooltipDisabled": false,
        "pie__tooltip": ["name", "percentage", "value"],
        "pie__orderBy": "size",
        "pie__kind": "donut",
        "pie__topNSlices": null,
        "crossFilter": [],
        "drillthrough": []
      }
    },
    {
      "id": "d0dac17b-bd24-48ed-b897-9d6bc1ee8420",
      "title": "Error Dialog Details",
      "visualType": "table",
      "pageId": "86aec96d-a8bf-443e-a2e2-f0f6db29e20a",
      "layout": { "x": 0, "y": 12, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "4f7784ab-7a14-483e-af17-cda9da696f11"
      },
      "visualOptions": {
        "table__enableRenderLinks": true,
        "colorRulesDisabled": true,
        "colorStyle": "light",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": [],
        "table__renderLinks": [],
        "colorRules": []
      }
    },
    {
      "id": "90191f2c-0f4a-456c-85f0-b28414f467e8",
      "title": "Error Dialog Timeline by Failure Reason",
      "visualType": "timechart",
      "pageId": "86aec96d-a8bf-443e-a2e2-f0f6db29e20a",
      "layout": { "x": 0, "y": 23, "width": 24, "height": 11 },
      "queryRef": {
        "kind": "query",
        "queryId": "b9a28fb4-7ef1-4237-8de5-8e65926d2d61"
      },
      "visualOptions": {
        "multipleYAxes": {
          "base": {
            "id": "-1",
            "label": "",
            "columns": [],
            "yAxisMaximumValue": null,
            "yAxisMinimumValue": null,
            "yAxisScale": "linear",
            "horizontalLines": []
          },
          "additional": [],
          "showMultiplePanels": false
        },
        "hideLegend": false,
        "legendLocation": "right",
        "xColumnTitle": "",
        "xColumn": "timestamp",
        "yColumns": ["count_"],
        "seriesColumns": ["failureReason"],
        "xAxisScale": "linear",
        "verticalLine": "",
        "crossFilterDisabled": false,
        "drillthroughDisabled": false,
        "crossFilter": [],
        "drillthrough": []
      }
    }
  ],
  "dataSources": [
    {
      "id": "99a3b70c-8819-4cce-844b-3c83734afb29",
      "kind": "manual-kusto",
      "scopeId": "kusto",
      "name": "bcinsight",
      "clusterUri": "https://ade.applicationinsights.io/subscriptions/YourSubscriptionHere",
      "database": "BCInsight"
    }
  ],
  "schema_version": "60",
  "autoRefresh": {
    "enabled": true,
    "defaultInterval": "30m",
    "minInterval": "1m"
  },
  "baseQueries": [],
  "parameters": [
    {
      "kind": "duration",
      "id": "14f4fdfe-2079-4e7d-b5fd-a649cdba5516",
      "displayName": "Time Interval",
      "description": "",
      "beginVariableName": "_startTime",
      "endVariableName": "_endTime",
      "defaultValue": { "kind": "dynamic", "count": 1, "unit": "hours" },
      "showOnPages": {
        "kind": "selection",
        "pageIds": [
          "f5885bb6-1db1-42c3-888b-fa857a7b39fd",
          "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
          "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
          "5df16e18-eb32-4daf-9612-82775e9f54b9",
          "fd2a227c-d2e0-49f4-a2ad-b21b9a1dd382",
          "9bd8a199-ba41-40fa-87b8-f9833a040b03",
          "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7",
          "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
          "f8d3fce9-30ff-4167-a56b-bb7ab51b1b88",
          "a766ad41-9070-40d7-8dd7-70676512faaa",
          "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4",
          "be2920cc-d647-444d-b5c3-0d5ecd424aa5",
          "61a90ca3-7409-4c63-93a7-c415f15e4ea3",
          "41c2b22e-69f3-4513-9227-26c3c42e9a08",
          "bc9ae068-c7b3-417e-8f99-82f1740e0427",
          "4dd61d20-1588-4d64-bc01-aebb52ed93ba",
          "86aec96d-a8bf-443e-a2e2-f0f6db29e20a"
        ]
      }
    },
    {
      "kind": "duration",
      "id": "14ccfca8-6d0a-4268-8ed4-af2c163d0b74",
      "displayName": "Time Interval - Ingestion",
      "description": "",
      "beginVariableName": "_startTime_Ingestion",
      "endVariableName": "_endTime_ingestion",
      "defaultValue": { "kind": "dynamic", "count": 7, "unit": "days" },
      "showOnPages": {
        "kind": "selection",
        "pageIds": [
          "1a9f99e5-2026-4f32-a914-3ee9e64ce31e",
          "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
          "263061b7-3ba0-4655-9ca4-42d7215fe172"
        ]
      }
    },
    {
      "kind": "string",
      "id": "b70bde5b-1300-48e1-95c9-1f8f1519fc67",
      "displayName": "Client Type",
      "description": "",
      "variableName": "_ClientType",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Client Type" },
        "queryRef": {
          "kind": "query",
          "queryId": "d3d963f9-86e2-440a-bc79-99311228027f"
        }
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": [
          "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
          "a766ad41-9070-40d7-8dd7-70676512faaa",
          "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e",
          "5464aca4-0e79-4cc9-acaf-5bfcba11b235",
          "263061b7-3ba0-4655-9ca4-42d7215fe172"
        ]
      }
    },
    {
      "kind": "string",
      "id": "9afff05d-ae00-4050-8ade-5fede3b5648e",
      "displayName": "CompanyName",
      "description": "",
      "variableName": "_CompanyName",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "CompanyName" },
        "queryRef": {
          "kind": "query",
          "queryId": "3039f4ce-508b-48e0-9aa1-48345396e464"
        }
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": [
          "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
          "e6b3a051-ba9e-4db5-912d-c63987fd1fb8"
        ]
      }
    },
    {
      "kind": "string",
      "id": "9cc55dcf-17d4-4829-9340-37c385862cdf",
      "displayName": "Publisher",
      "description": "",
      "variableName": "_publisher",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "_publisher" },
        "queryRef": {
          "kind": "query",
          "queryId": "9a100508-c1a2-4244-8372-37598bb700c5"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "int",
      "selectionType": "freetext",
      "id": "79f54d5e-e6ca-454c-a1de-1b53601ae873",
      "displayName": "No. of JOINS",
      "variableName": "_joins",
      "description": "",
      "defaultValue": { "kind": "value", "value": 0 },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["d1a3fbcf-a4a6-4912-ab95-fd07bfe32849"]
      }
    },
    {
      "kind": "string",
      "id": "4c124c10-b4d3-4eb7-b0f6-327aace8932b",
      "displayName": "Environment Type",
      "description": "",
      "variableName": "_EnvironmentType",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Environment Type" },
        "queryRef": {
          "kind": "query",
          "queryId": "037fae30-bdbf-42d7-8d2c-b96032a57f5f"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "string",
      "id": "e90e4713-5c88-446c-b71a-216cbf050b2b",
      "displayName": "Environment Name",
      "description": "",
      "variableName": "_environmentName",
      "selectionType": "scalar",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Environment Name" },
        "queryRef": {
          "kind": "query",
          "queryId": "a639f2a6-893c-4746-b6e8-7a684dc7258c"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "real",
      "id": "373dbe29-1441-456c-9db1-78429b4a74fe",
      "displayName": "Object ID",
      "description": "",
      "variableName": "_objectID",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "AL Object ID", "label": "AL Object ID" },
        "queryRef": {
          "kind": "query",
          "queryId": "70f33fd3-c6cf-4e9f-a352-43a4850e455c"
        }
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["a766ad41-9070-40d7-8dd7-70676512faaa"]
      }
    },
    {
      "kind": "string",
      "id": "b11d8163-c8dd-4f83-bbd3-705da109bdee",
      "displayName": "Session Id",
      "description": "",
      "variableName": "_sessionId",
      "selectionType": "scalar",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Session ID" },
        "queryRef": {
          "kind": "query",
          "queryId": "056d13ec-2982-428d-aaad-f56517e1dc3e"
        }
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": [
          "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849",
          "e6b3a051-ba9e-4db5-912d-c63987fd1fb8",
          "5464aca4-0e79-4cc9-acaf-5bfcba11b235"
        ]
      }
    },
    {
      "kind": "datetime",
      "id": "faae011a-19c6-437e-a04c-d7de238ed7ad",
      "displayName": "Specific Date Time",
      "description": "",
      "variableName": "_SelectedDateTime",
      "selectionType": "scalar",
      "includeAllOption": true,
      "defaultValue": { "kind": "value", "value": 1672527600000 },
      "dataSource": {
        "kind": "static",
        "values": [{ "value": 1672527600000 }]
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["8ebc7a2e-d0e0-42ba-814e-d6fab6ad7332"]
      }
    },
    {
      "kind": "string",
      "id": "5432a3f9-4fbe-462d-a8c6-8bad6ce82998",
      "displayName": "Tenant Id",
      "description": "",
      "variableName": "_aadTenantId",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "Tenant Id" },
        "queryRef": {
          "kind": "query",
          "queryId": "0cc8d042-2478-46de-949d-e48b12dca22e"
        }
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "duration",
      "id": "c3e493c6-e79f-4a84-baae-8d6315b0f163",
      "displayName": "Update Time Range",
      "description": "",
      "beginVariableName": "_previousUpdateStartTime",
      "endVariableName": "_updateStartTime",
      "defaultValue": { "kind": "dynamic", "count": 1, "unit": "hours" },
      "showOnPages": {
        "kind": "selection",
        "pageIds": [
          "bc9ae068-c7b3-417e-8f99-82f1740e0427",
          "4dd61d20-1588-4d64-bc01-aebb52ed93ba"
        ]
      }
    },
    {
      "kind": "int",
      "selectionType": "freetext",
      "id": "5c9bad28-0f56-48cc-9058-64bebf45fb34",
      "displayName": "Count Limit",
      "variableName": "_countLimit",
      "description": "Integer value to limit the number of Counts",
      "defaultValue": { "kind": "value", "value": 100 },
      "showOnPages": {
        "kind": "selection",
        "pageIds": [
          "bc9ae068-c7b3-417e-8f99-82f1740e0427",
          "4dd61d20-1588-4d64-bc01-aebb52ed93ba"
        ]
      }
    },
    {
      "kind": "duration",
      "id": "2deeecdc-7250-4a38-bcc2-ef1e1d678950",
      "displayName": "Time Range",
      "description": "",
      "beginVariableName": "_FromPeriodTime",
      "endVariableName": "_ToPeriodTime",
      "defaultValue": { "kind": "dynamic", "count": 1, "unit": "hours" },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["4610c3a4-114b-48f5-a151-f3504d693951"]
      }
    },
    {
      "kind": "bool",
      "id": "789c306d-566b-46e4-bd4d-a60680bf83ad",
      "displayName": "Working Hours",
      "description": "",
      "variableName": "_OnlyWorkingHours",
      "selectionType": "scalar",
      "includeAllOption": false,
      "defaultValue": { "kind": "value", "value": false },
      "dataSource": {
        "kind": "static",
        "values": [{ "value": true }, { "value": false }]
      },
      "showOnPages": { "kind": "all" }
    },
    {
      "kind": "string",
      "id": "efdcfb8f-269f-4706-bda0-ed40563ba990",
      "displayName": "FailureReason",
      "description": "",
      "variableName": "_FailureReason",
      "selectionType": "array",
      "includeAllOption": true,
      "defaultValue": { "kind": "all" },
      "dataSource": {
        "kind": "query",
        "columns": { "value": "failureReason" },
        "queryRef": {
          "kind": "query",
          "queryId": "e1052e76-cc7e-4b44-bc04-baa9c2ae5314"
        }
      },
      "showOnPages": {
        "kind": "selection",
        "pageIds": ["86aec96d-a8bf-443e-a2e2-f0f6db29e20a"]
      }
    }
  ],
  "pages": [
    { "name": "Overview", "id": "f5885bb6-1db1-42c3-888b-fa857a7b39fd" },
    { "name": "Statistics", "id": "94d9d8ce-b39a-4f2d-bf77-11c032f0fd9e" },
    { "name": "SQL Query Usage", "id": "d1a3fbcf-a4a6-4912-ab95-fd07bfe32849" },
    { "name": "AL Usage", "id": "e6b3a051-ba9e-4db5-912d-c63987fd1fb8" },
    {
      "name": "Deadlocks / Locks",
      "id": "5464aca4-0e79-4cc9-acaf-5bfcba11b235"
    },
    {
      "name": "Page Performance",
      "id": "41c2b22e-69f3-4513-9227-26c3c42e9a08"
    },
    { "name": "OData Usage", "id": "fd2a227c-d2e0-49f4-a2ad-b21b9a1dd382" },
    { "name": "Incoming WS", "id": "9bd8a199-ba41-40fa-87b8-f9833a040b03" },
    { "name": "Outgoing WS", "id": "61a90ca3-7409-4c63-93a7-c415f15e4ea3" },
    { "name": "Job Queue", "id": "60f8536a-1e14-47a9-80d8-f2a08e0e9fc7" },
    { "name": "Miscellaneous", "id": "a766ad41-9070-40d7-8dd7-70676512faaa" },
    { "name": "Environment", "id": "2951304b-62f3-4b7b-98c0-8c31c6d7ecd4" },
    { "name": "Data Ingestion", "id": "1a9f99e5-2026-4f32-a914-3ee9e64ce31e" },
    { "name": "Details", "id": "a1b9eab8-5e92-446b-bdd0-6df8160c9c54" },
    { "id": "bc9ae068-c7b3-417e-8f99-82f1740e0427", "name": "Post Update" },
    {
      "id": "4dd61d20-1588-4d64-bc01-aebb52ed93ba",
      "name": "Norm Post Update"
    },
    {
      "name": "What Was Running",
      "id": "4610c3a4-114b-48f5-a151-f3504d693951"
    },
    { "id": "263061b7-3ba0-4655-9ca4-42d7215fe172", "name": "Trends" },
    { "name": "Error Dialogs", "id": "86aec96d-a8bf-443e-a2e2-f0f6db29e20a" }
  ],
  "queries": [
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n, extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement) )\n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' // available from 22.0\n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' // not sure about this yet\n  , 'Default'\n)\n| sort by timestamp desc \n| project timestamp, \n    [\"Client Type\"] = clientType, \n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Duration\"] = executionTimeInMS, \n    [\"Type\"] = operationType, \n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"AL Object Information\"] = alObjectInfo, \n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"Extension Information\"] = extensionInfo,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Isolation Level\"] = isolationLevel,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id\n    ",
      "id": "4924ffbb-60a6-464b-b7d1-34abe4b6ab2a",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let Timeouts = traces \n| where timestamp between (_startTime .. _endTime) // adjust to your needs\n| where customDimensions.eventId == 'RT0012'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| extend snapshotId = tostring( customDimensions.snapshotId )\n| project snapshotId, timestamp\n, [\"AL Object Type\"] = customDimensions.alObjectType\n, [\"AL Object Id\"] = customDimensions.alObjectId\n, [\"AL Object Name\"] = alObjectName\n, [\"AL Stack Trace\"] = stackTrace\n, [\"AL Execution Method\"] = customDimensions.alExecutingMethodScope\n, [\"Extension Name\"] = customDimensions.extensionName\n, [\"Extension Version\"] = customDimensions.extensionVersion\n, [\"User Telemetry Id\"] = case(\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n;\nTimeouts\n| join (traces\n| where customDimensions.eventId == 'RT0013'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.clientType has_any (_ClientType)\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| extend snapshotId = tostring( customDimensions.snapshotId )\n| project snapshotId\n, alObjectTypeHoldingLock = customDimensions.alObjectType\n, alObjectIdHoldingLock = customDimensions.alObjectId\n, alObjectNameHoldingLock = alObjectName\n, alStackTraceHoldingLock = stackTrace\n, alExecutionMethodHoldingLock = customDimensions.alExecutingMethodScope\n, sqlTableLocked = customDimensions.sqlTableName\n, sqlLockResourceType = customDimensions.sqlLockResourceType\n, sqlLockRequestMode = customDimensions.sqlLockRequestMode\n, sqlLockRequestStatus = customDimensions.sqlLockRequestStatus\n, sqlServerSessionId = customDimensions.sqlServerSessionId\n, alSessionIdHoldingLock = customDimensions.sessionId\n, extensionNameHoldingLock = extensionName\n, extensionVersionHoldingLock = customDimensions.extensionVersion\n, clientTypeHoldingLock = customDimensions.clientType\n)\non$left.snapshotId == $right.snapshotId\n| order by snapshotId\n| project-away snapshotId1",
      "id": "e31ba014-1113-43da-8ff8-4dc50c1d44b3",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime) // adjust as needed\n| where operation_Name == 'Long Running Operation (SQL Query)' // do note that in a later version of the schema, this field will not be used \n     or customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , \"OTHERS\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n| extend isLocking = iff(withUPDLOCK == 'Yes', 'Yes', \n     iff(operationType in (\"UPDATE\",\"DELETE\",\"INSERT\"), 'Yes', 'No'))\n| project timestamp, isLocking\n| summarize count() by bin(timestamp, 10min),isLocking\n| render timechart",
      "id": "b6f22ad4-c709-4093-8132-79bccec3fa68",
      "usedVariables": [
        "_CompanyName",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\ntraces\n| where timestamp  between(_startTime .. _endTime)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| extend alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend alObjectInfo = strcat(tostring(customDimensions.alObjectType), ' ', tostring(customDimensions.alObjectId), ' - ',alObjectName)\n| summarize count() by alObjectInfo\n| sort by count_\n| limit _maxCount ",
      "id": "b1d1c18b-2344-4e2c-a961-2053a23e8cf4",
      "usedVariables": [
        "_CompanyName",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\ntraces\n| where timestamp  between (_startTime .. _endTime)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.eventId == 'RT0018'\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \n| extend environmentName = tostring(customDimensions.environmentName)\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, suspendedTime = customDimensions.suspendedTime // will come on 22.x\n, extensionInfo = strcat( extensionName, ' ', customDimensions.extensionVersion)\n, clientType = tostring(customDimensions.clientType)\n, exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n, exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n, alStackTrace = tostring(customDimensions.alStackTrace)\n, longRunningThreshold = tostring(customDimensions.longRunningThreshold)\n, longRunningThresholdInMS = toreal(totimespan(customDimensions.longRunningThreshold))/10000 //the datatype for executionTime is timespan \n, sqlExecutes = toint(customDimensions.sqlExecutes) // This dimension was introduced in Business Central 2023 release wave 1, version 22.0\n, sqlRowsRead = toint(customDimensions.sqlRowsRead) // This dimension was introduced in Business Central 2023 release wave 1, version 22.0\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A')\n| summarize count(), sum( executionTimeInMS ), avg( executionTimeInMS ), sum(exclusiveTimeInMS), avg(exclusiveTimeInMS) by environmentName, alObjectInfo, alMethod, extensionInfo, clientType, alStackTrace, longRunningThreshold, longRunningThresholdInMS, sqlExecutes, sqlRowsRead, usertelemetryId, session_Id\n| order by avg_executionTimeInMS desc \n| project \n    [\"Environment Name\"] = environmentName,\n    [\"AL Object Information\"] = alObjectInfo,\n    [\"AL Method\"] = alMethod,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"User Telemetry ID\"] = usertelemetryId,\n    [\"Extension Information\"] = extensionInfo,\n    [\"Client Type\"] = clientType,\n    [\"Ocurrance\"] = count_,\n    [\"SQL Executes\"] = sqlExecutes,\n    [\"SQL Rows Read\"] = sqlRowsRead,\n    [\"Avg Duration\"] = round(avg_executionTimeInMS, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInMS,2),\n    [\"Avg Exclusive Time\"] = round(avg_exclusiveTimeInMS,2),\n    [\"Total Exclusive Time\"] = round(sum_exclusiveTimeInMS,2),\n    [\"Session Id\"] = session_Id\n| limit _maxCount",
      "id": "6d5d4c42-5ace-43a6-80c5-4699902e94fc",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _upperLimit = 5000;\nlet _appInsightsTraces = materialize  (\n    traces \n    | where timestamp  between (_startTime .. _endTime)\n    | where customDimensions.environmentType has_any (_EnvironmentType)\n    | where customDimensions.environmentName has_any (_environmentName)\n    | where customDimensions.companyName has_any (_CompanyName)\n    | where customDimensions.extensionPublisher has_any (_publisher)\n    | where customDimensions.eventId == \"RT0005\"\n    | where customDimensions.alObjectId > 0\n);\nlet _lowerThresholdinMs = toscalar (\n    _appInsightsTraces\n    | limit 1\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | extend _longRunningThresholdInMS = iff(toreal(customDimensions.longRunningThresholdInMs) > 0, \n            toreal(customDimensions.longRunningThresholdInMs),\n            toreal(totimespan(customDimensions.longRunningThreshold))/10000)\n    | project tostring(toint(_longRunningThresholdInMS))\n);\nlet _totalQueries = toscalar (\n    _appInsightsTraces\n    | count \n);\nlet _tooManyJoins = toscalar (\n    _appInsightsTraces\n    | extend sqlStatement = tostring(customDimensions.sqlStatement)\n    | extend _numberOfJoins = countof(sqlStatement, \"JOIN\")\n    | where _numberOfJoins > 5\n    | count \n);\nlet _longQueries = toscalar (\n    _appInsightsTraces\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | where _executionTimeInMS > toint(customDimensions.longRunningThresholdInMs) and _executionTimeInMS < _upperLimit\n    | count \n);\nlet _veryLongQueries = toscalar (\n    _appInsightsTraces\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | where _executionTimeInMS >= _upperLimit\n    | count \n);\n_appInsightsTraces\n| limit 1\n| project strcat(\n                \"|\",\"Total Queries\", \n                \"|\", \"Long Running Queries\", \n                \"|\", \"Very Long Running Queries\", \n                \"|\", \"Queries with  many Joins\", \"|\\n\", \n                \"|------------------|:---------------|:---------------|:---------------|\\n\",\n                \"|\", _totalQueries, \"|\", _longQueries, \"|\", _veryLongQueries, \"|\", _tooManyJoins, \"\\n\",\n                \"\\n **Note:** \\n\",\n                \"- The **Lower Threshold** is defined as greater than \", _lowerThresholdinMs, \" ms and less than \", _upperLimit, \" ms\\n\",\n                \"- The **Upper Threshold** is defined greater than or equal to \", _upperLimit, \" ms\\n\")\n\n\n",
      "id": "24665fc5-3577-4c14-8404-6550500c3db2",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 24h;\nlet _currentDuration = _endTime - _startTime;\nlet _duration = iff(_currentDuration > _maxDuration , _maxDuration, _currentDuration);\ntraces \n| where timestamp >= ago(_duration)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.eventId == \"RT0008\"\n| where toupper(customDimensions.category) contains \"ODATA\"\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| project [\"Endpoint\"] = _endpoint, \n        [\"Object Type\"] = tostring(customDimensions.alObjectType), \n        [\"Object No.\"] = tostring(customDimensions.alObjectId), \n        _processingTimeMS, \n        [\"Publisher\"] = tostring(customDimensions.extensionPublisher),\n        [\"Environment Name\"] = tostring(customDimensions.environmentName),\n        [\"Environment Type\"] = tostring(customDimensions.environmentType)\n| summarize count(), [\"Avg. Time\"] = round(avg(_processingTimeMS),2), [\"Total Time\"] = round(sum(_processingTimeMS),2) by [\"Endpoint\"], [\"Object Type\"], [\"Object No.\"], [\"Publisher\"], [\"Environment Name\"], [\"Environment Type\"]\n| sort by count_",
      "id": "dd9b8402-59ae-4e87-b2da-ca1666b39858",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize  (\n    traces\n    | where timestamp between (_startTime .. _endTime)\n    | where customDimensions.eventId == \"RT0018\"\n    | where customDimensions.environmentType has_any (_EnvironmentType)\n    | where customDimensions.environmentName has_any (_environmentName) \n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | extend _longRunningThresholdInMS = iff(toreal(customDimensions.longRunningThresholdInMs) > 0, \n            toreal(customDimensions.longRunningThresholdInMs),\n            toreal(totimespan(customDimensions.longRunningThreshold))/10000)\n    | where _executionTimeInMS > _longRunningThresholdInMS\n    | project timestamp, message, [\"alObjectType\"] = toupper(customDimensions.alObjectType), customDimensions          \n);\nlet _thresholdInMs = toscalar (\n    _appInsightsTraces\n    | limit 1\n    | extend _executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    | extend _longRunningThresholdInMS = iff(toreal(customDimensions.longRunningThresholdInMs) > 0, \n            toreal(customDimensions.longRunningThresholdInMs),\n            toreal(totimespan(customDimensions.longRunningThreshold))/10000)\n    | project tostring(toint(_longRunningThresholdInMS))\n);\nlet _longPages = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"PAGE\" \n    | count \n);\nlet _longCodeunits = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"CODEUNIT\" \n    | count \n);\nlet _longReports = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"REPORT\" \n    | count \n);\nlet _longQueries = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"QUERY\" \n    | count \n);\nlet _longXMLPorts = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"XMLPORT\" \n    | count \n);\nlet _longTables = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"TABLE\" \n    | count \n);\nlet _longPageExtensions = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"PAGEEXTENSION\" \n    | count \n);\nlet _longTableExtensions = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"TABLEEXTENSION\" \n    | count \n);\nlet _longReportExtensions = toscalar (\n    _appInsightsTraces\n    | where alObjectType == \"REPORTEXTENSION\" \n    | count \n);\n_appInsightsTraces\n| limit 1\n| extend Md = strcat('|', _longTables, \n                     '|', _longPages, \n                     '|', _longCodeunits, \n                     '|', _longReports, \n                     '|', _longXMLPorts,\n                     '|', _longQueries,\n                     '|', _longTableExtensions,\n                     '|', _longPageExtensions,\n                     '|', _longReportExtensions)\n| summarize Md = make_list(Md)\n| extend Md = strcat_array(Md, ' \\n')\n| extend Md = strcat('| Table | Page | Codeunit | Report | XMLport | Query | Table Extension | Page Extension | Report Extension |\\n|'\n                      '-------|-------|-------|-------|-------|-------|-------|-------|-------|\\n ', Md)",
      "id": "e3ecf43b-41c0-4f67-9b19-854928544249",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize  (\n    traces\n    | where timestamp between (_startTime .. _endTime)\n    | where customDimensions.environmentType has_any (_EnvironmentType)\n    | where customDimensions.environmentName has_any (_environmentName)\n    | where customDimensions.eventId in (\"AL0000E24\", \"AL0000E25\", \"AL0000E26\")\n);\nlet _startedEntries = toscalar (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E25\"\n    | count\n);\nlet _successEntries = toscalar (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E26\"\n    | where customDimensions.alJobQueueResult == 'Success'\n    | count\n);\nlet _failedEntries = toscalar (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E26\"\n    | where customDimensions.alJobQueueResult == 'Fail'\n    | count\n);\nlet _enqueuedEntries = toscalar (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E24\"\n    | count\n);\nlet _recurringEntries = toscalar (\n     _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E24\"\n    | where tostring(customDimensions.alJobQueueIsRecurring) == 'Yes'\n    | count \n);\n_appInsightsTraces\n| distinct tostring(customDimensions.alJobQueueId)\n| limit 1\n| extend Md = strcat('|', _startedEntries, \n                     '|', _successEntries, \n                     '|',  _failedEntries,\n                     '|', (_startedEntries - _successEntries - _failedEntries), \n                     '|', (_enqueuedEntries - _recurringEntries), \n                     '|', _recurringEntries)\n| summarize Md = make_list(Md)\n| extend Md = strcat_array(Md, ' \\n')\n| extend Md = strcat('| Started | Successful | Failed | In Progress | Enqueued | Recurring|\\n|'\n                      '-------|-------|-------|-------|-------|-------|\\n ', Md)",
      "id": "390ff303-06c7-46fc-857e-34e2a3702a1e",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n  , timestamp\n| summarize count() by bin(timestamp,5min), clientType\n",
      "id": "f32bacaf-9848-4163-960a-91c8880a6503",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _searchSting = 'AL CallStack: ';\ntraces\n| where timestamp  between (_startTime .. _endTime)\n| where customDimensions.eventId == 'RT0005'\n| where customDimensions.sqlStatement has 'UPDLOCK'\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablenamewithjoins: string \"\\\\$\" space: string\n| parse kind=regex tablenamewithjoins with tablenaamenojoins: string \"\\\\$\" newspace : string \n| parse kind=regex tablenaamenojoins with space2: string \"\\\\$\" onlytablenamenojoins: string \n//| parse kind=regex tablenamewithjoins with stringtoeliminate: string \"\\\\$\" tablenamewithoutjoins: string\n| extend tablename = case(\n    tablenamewithjoins contains \"$\", onlytablenamenojoins\n    , tablenamewithjoins \n)\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project timestamp\n, [\"Client Type\"] = tostring(customDimensions.clientType)\n, [\"Duration (sec)\"] = toreal(totimespan(customDimensions.executionTime))/10000000 \n, [\"Object Information\"] = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' ', \n    alObjectName)\n, [\"Stack Trace\"] = substring(stackTrace, \n                            indexof(customDimensions.alStackTrace, _searchSting) + strlen(_searchSting))\n, [\"Extension Information\"] = strcat(extensionName, ' ' , customDimensions.extensionVersion, ' - ',\n    customDimensions.extensionPublisher)\n, sqlStatement\n, Table = tablename\n| summarize [\"Count\"] = count(), [\"Avg (sec)\"] = round(avg(['Duration (sec)']),0) by ['Stack Trace'], sqlStatement, ['Client Type'], ['Extension Information'], ['Object Information'], Table\n| extend [\"Total Cost (sec)\"] = ['Avg (sec)'] * Count\n| top 50 by ['Total Cost (sec)'] desc",
      "id": "80680473-cae8-4b90-9f06-199467ddb3b5",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize (\n    traces\n    | where timestamp  between (_startTime .. _endTime)\n    | where customDimensions.environmentType has_any (_EnvironmentType)\n    | where customDimensions.environmentName has_any (_environmentName)\n);\nlet _enqueuedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E24\"\n    | summarize [\"Enqueued Count\"] = count() by bin(timestamp, 30min) \n);\nlet _startedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E25\"\n    | summarize [\"Started Count\"] = count() by bin(timestamp, 30min)\n);\nlet _finishedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000E26\"\n    | summarize [\"Finished Count\"] = count() by bin(timestamp, 30min)\n);\nlet _failedToBeEnqueuedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FNY\"\n    | summarize [\"Failed to be enqueued Count\"] = count() by bin(timestamp, 30min)\n);\nlet _failedCanBeRetriedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000HE7\"\n    | summarize [\"Failed Can Be Retried Count\"] = count() by bin(timestamp, 30min)\n);\nlet _RescheduledOnLoginJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000I49\"\n    | summarize [\"Rescheduled On Login Count\"] = count() by bin(timestamp, 30min)\n);\nlet _RunOnceByUserJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FMG\"\n    | summarize [\"Run Once By User Count\"] = count() by bin(timestamp, 30min)\n);\nlet _FailedAndStoppedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000JRG\"\n    | summarize [\"Failed And Stopped Count\"] = count() by bin(timestamp, 30min)\n);\n_startedJQ\n| join kind=leftouter ( _finishedJQ) on timestamp\n| join kind=leftouter (_enqueuedJQ) on timestamp\n| join kind=leftouter (_failedToBeEnqueuedJQ) on timestamp\n| join kind=leftouter (_failedCanBeRetriedJQ) on timestamp\n| join kind=leftouter (_RescheduledOnLoginJQ) on timestamp\n| join kind=leftouter (_RunOnceByUserJQ) on timestamp\n| join kind=leftouter (_FailedAndStoppedJQ) on timestamp\n| project-away timestamp1, timestamp2, timestamp3, timestamp4, timestamp5, timestamp6, timestamp7\n| sort by timestamp asc \n",
      "id": "83a6c51f-a1f9-4866-95a5-c0ec18ce522f",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _searchString = 'Job queue entry';\ntraces\n| where timestamp  between (_startTime .. _endTime)\n| where customDimensions.eventId in (\"AL0000E24\", \"AL0000E25\", \"AL0000E26\",\"AL0000FNY\",\"AL0000HE7\",\"AL0000I49\",\"AL0000FMG\",\"AL0000FNY\")\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend _stateDescription = substring(message, strlen(_searchString), indexof(message, ':')-strlen(_searchString))\n| extend alObjectName = trim('GMK',tostring(customDimensions.alJobQueueObjectName))\n| project  \n    [\"Entry Id\"] = tostring(customDimensions.alJobQueueId),\n    timestamp,\n    [\"Environment Name\"] = tostring(customDimensions.environmentName),\n    [\"State\"] = strcat(toupper(substring(_stateDescription, 1, 1)), substring(_stateDescription, 2)),\n    [\"Status\"] = customDimensions.alJobQueueStatus, \n    [\"Object Id\"]  = customDimensions.alJobQueueObjectId,\n    [\"Object Type\"] = customDimensions.alJobQueueObjectType,\n    [\"Object Name\"]  = alObjectName,\n    [\"Recurring\"] = customDimensions.alJobQueueIsRecurring,\n    [\"Task ID\"] = customDimensions.alJobQueueScheduledTaskId,\n    [\"Session ID\"] = session_Id,\n    [\"Telemetry ID\"] = user_Id\n| sort by timestamp asc\n\n\n\n\n\n",
      "id": "61dee320-5ba1-42f2-9092-3ed5471ea23f",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 24h;\nlet _currentDuration = _endTime - _startTime;\ntraces \n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.eventId == \"RT0008\"\n//| where toupper(customDimensions.category) == \"API\"\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n        , _httpMethod = tostring(customDimensions.httpMethod)\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| project [\"Endpoint\"] = _endpoint, \n        [\"category\"] = tostring(customDimensions.category),\n        [\"Method\"] = _httpMethod,\n        [\"Object Type\"] = tostring(customDimensions.alObjectType), \n        [\"Object No.\"] = tostring(customDimensions.alObjectId), \n        _processingTimeMS, \n        [\"Environment Type\"] = tostring(customDimensions.environmentType)\n| summarize count(),\n         [\"Min. Time\"] = round(min(_processingTimeMS),0),\n         [\"Max. Time\"] = round(max(_processingTimeMS),0),\n         [\"Avg. Time\"] = round(avg(_processingTimeMS),0), \n         [\"Std Dev\"] = stdev(_processingTimeMS), \n         [\"Total Time\"] = round(sum(_processingTimeMS),2) by \n         [\"Endpoint\"], category, Method, [\"Object Type\"], [\"Object No.\"], [\"Environment Type\"]\n| sort by count_\n",
      "id": "f6f1fd33-56d4-41f0-a471-cad68abb0502",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 24h;\nlet _maxCount = 20;\nlet _currentDuration = _endTime - _startTime;\nlet _duration = iff(_currentDuration > _maxDuration , _maxDuration, _currentDuration);\ntraces \n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.eventId == \"RT0008\"\n| where toupper(customDimensions.category) == \"API\"\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| summarize [\"API Duration\"] = round(sum(_processingTimeMS),2) by [\"Endpoint\"] = _endpoint\n| sort by [\"API Duration\"] desc \n| limit _maxCount",
      "id": "5ef20169-6ff3-4b43-9a1e-f67219cb53a4",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 24h;\nlet _maxCount = 20;\nlet _currentDuration = _endTime - _startTime;\nlet _duration = iff(_currentDuration > _maxDuration , _maxDuration, _currentDuration);\ntraces \n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.eventId == \"RT0008\"\n| where toupper(customDimensions.category) == \"API\"\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| summarize [\"SOAP Calls\"] = count() by [\"Endpoint\"] = _endpoint\n| sort by [\"SOAP Calls\"] desc \n| limit _maxCount\n",
      "id": "a32bcdcb-c8af-4113-b540-36ae0f9f3209",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 24h;\nlet _maxCount = 20;\nlet _currentDuration = _endTime - _startTime;\nlet _duration = iff(_currentDuration > _maxDuration , _maxDuration, _currentDuration);\ntraces \n| where timestamp >= ago(_duration)\n| where customDimensions.eventId == \"RT0008\"\n| where toupper(customDimensions.category) contains \"ODATA\"\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| summarize [\"OData Duration\"] = round(sum(_processingTimeMS),2) by [\"Endpoint\"] = _endpoint\n| sort by [\"OData Duration\"] desc \n| limit _maxCount\n",
      "id": "0fc7aab0-3857-4c14-892c-e75f3d41078e",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 24h;\nlet _maxCount = 20;\nlet _currentDuration = _endTime - _startTime;\nlet _duration = iff(_currentDuration > _maxDuration , _maxDuration, _currentDuration);\ntraces \n| where timestamp >= ago(_duration)\n| where customDimensions.eventId == \"RT0008\"\n| where toupper(customDimensions.category) contains \"ODATA\"\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| summarize [\"SOAP Calls\"] = count() by [\"Endpoint\"] = _endpoint\n| sort by [\"SOAP Calls\"] desc \n| limit _maxCount",
      "id": "e86bd4ee-1585-40f6-a37e-98dfd4d694f0",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nlet _searchType = toupper('PAGE');\ntraces\n| where timestamp  between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.eventId == 'RT0018'\n| where toupper(customDimensions.alObjectType) == _searchType\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTime = customDimensions.executionTime\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend executionTimeInSec = executionTimeInMS / 1000\n| summarize count(), sum( executionTimeInSec ), avg( executionTimeInSec ) by alObjectInfo\n| order by avg_executionTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInSec,2)\n| sort by Ocurrance desc\n| limit _maxCount",
      "id": "2fe546a6-ea2c-40cd-8e66-d5102c55eb3f",
      "usedVariables": [
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nlet _searchType = toupper('REPORT');\ntraces\n| where timestamp  between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.eventId == 'RT0018'\n| where toupper(customDimensions.alObjectType) == _searchType\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTime = customDimensions.executionTime\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend executionTimeInSec = executionTimeInMS / 1000\n| summarize count(), sum( executionTimeInSec ), avg( executionTimeInSec ) by alObjectInfo\n| order by avg_executionTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInSec,2)\n| sort by Ocurrance desc\n| limit _maxCount\n",
      "id": "e8b0a8b0-b9c6-4ab1-b327-96d6bec93344",
      "usedVariables": [
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId in ('AL0000E26')\n| extend alJobQueueObjectName =trim_start('GMK',tostring(customDimensions.alJobQueueObjectName))\n| extend alJobQueueObjectId = toint(customDimensions.alJobQueueObjectId)\n    , alJobQueueObjectType = tostring(customDimensions.alJobQueueObjectType)\n    , alJobQueueExecutionTimeInSec = toreal(customDimensions.alJobQueueExecutionTimeInMs) /1000\n| summarize \n    mintime = round(min(alJobQueueExecutionTimeInSec),0),\n    avgTime = round(avg(alJobQueueExecutionTimeInSec),0),\n    maxTime = round(max(alJobQueueExecutionTimeInSec),0),\n    ExecutionCount = toint(count())\n    by\n    alJobQueueObjectId,\n    alJobQueueObjectType,\n    alJobQueueObjectName\n| order by maxTime\n| project\n    [\"Job Queue Object ID\"] = alJobQueueObjectId,\n    [\"Job Queue Object Type\"] = alJobQueueObjectType,\n    [\"Job Queue Object Name\"] = alJobQueueObjectName,\n    [\"Execution Count\"] = toint(ExecutionCount),\n    [\"Min. Time (sec)\"] = mintime,\n    [\"Avg. Time (sec)\"] = avgTime,\n    [\"Max. Time (sec)\"] = maxTime\n| sort by ['Execution Count'] desc",
      "id": "4f21aa58-ddea-4a75-8912-527519392485",
      "usedVariables": ["_endTime", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _limit = 4;\nlet _appInsightsTraces = materialize  (\n    traces\n    | where timestamp  between (_startTime .. _endTime)\n    | where customDimensions.environmentType has_any (_EnvironmentType)\n    | where customDimensions.environmentName has_any (_environmentName)\n    | where customDimensions.eventId == \"RT0008\"\n    | project timestamp, message, customDimensions\n);\nlet _soapThreshold = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"SOAP\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | summarize round(avg(_processingTimeMS),2)\n);\nlet _soapCalls = toscalar( \n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"SOAP\"\n    | count\n);\nlet _longRunningSoapCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"SOAP\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | where _processingTimeMS > (_soapThreshold * _limit)\n    | count\n);\nlet _odataThreshold = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) contains \"ODATA\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | summarize round(avg(_processingTimeMS),2)\n);\nlet _odataCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) contains \"ODATA\"\n    | count\n);\nlet _longRunningOdataCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"ODATA\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | where _processingTimeMS > (_odataThreshold * _limit)\n    | count\n);\nlet _apiThreshold = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"API\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | summarize round(avg(_processingTimeMS),2)\n);\nlet _apiCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"API\"\n    | count\n);\nlet _longRunningApiCalls = toscalar(\n    _appInsightsTraces\n    | where toupper(customDimensions.category) == \"API\"\n    | extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n    | where _processingTimeMS > (_apiThreshold * _limit)\n    | count\n);\n_appInsightsTraces\n| limit 1\n| project strcat(\"|\",\"SOAP Calls\", \n                 \"|\", \"Average\", \n                 \"|\", \"Long Running\", \n                 \"|\", \" \", \n                 \"|\", \"OData Calls\", \n                 \"|\", \"Average\", \n                 \"|\", \"Long Running\", \n                 \"|\", \" \", \n                 \"|\", \"API Calls\", \n                 \"|\", \"Average\", \n                 \"|\", \"Long Running|\\n\",\n                \"|------------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|\\n\",\n                \"|\", _soapCalls, \n                \"|\", _soapThreshold, \n                \"|\", _longRunningSoapCalls, \n                \"|\", \"\", \n                \"|\", _odataCalls, \n                \"|\", _odataThreshold, \n                \"|\", _longRunningOdataCalls, \n                \"|\", \"\",\n                \"|\", _apiCalls, \n                \"|\", _apiThreshold, \n                \"|\", _longRunningApiCalls, \"\\n\",\n                \"- **Long Running calls are those that are greater than 4x the Average**\")",
      "id": "dc62a16b-ace5-484c-878b-804e5bcfbeba",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where customDimensions.eventId in ('LC0024', 'LC0025') \n| where timestamp  between(_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| project \n  timestamp\n, eventId = tostring(customDimensions.eventId)\n, environmentType = tostring(customDimensions.environmentType)\n, environmentName = tostring(customDimensions.environmentName)\n, alObjectId = toint(customDimensions.alObjectId)\n, alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n, extensionId = tostring(customDimensions.extensionId)\n, extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n, keyMaintainSIFTIndex = tostring(customDimensions.keyMaintainSIFTIndex)\n, keyMaintainSQLIndex = tostring(customDimensions.keyMaintainSQLIndex)\n, keyFields = tostring(customDimensions.keyFields)\n, keyName = replace_string(tostring(customDimensions.keyName),'GMK','')\n, message",
      "id": "1ff493c2-18f6-4317-8846-6f8b8750fcd9",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where customDimensions.alObjectId > 0\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n| extend alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n| summarize \n    ExecutionCount = count(),\n    minTime = toint(min(duration)),\n    avgTime = toint(avg(duration)),\n    maxTime = toint(max(duration))\n    by\n    alObjectId,\n    alObjectName,\n    eventId,\n//    pageMode,\n    pageType,\n    environmentName\n| project\n    [\"Environment Name\"] = environmentName,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Page Type\"] = pageType,\n//    [\"Page Mode\"] = pageMode,\n    [\"Execution Count\"] = ExecutionCount,\n    [\"Min. Time\"] = minTime,\n    [\"Avg. Time\"] = avgTime,\n    [\"Max. Time\"] = maxTime\n| order by ['Execution Count'] desc ",
      "id": "89043a9a-d884-4495-9e8b-fdfae36a61ef",
      "usedVariables": ["_endTime", "_environmentName", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nlet _searchType = toupper('CODEUNIT');\ntraces\n| where timestamp  between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.eventId == 'RT0018'\n| where toupper(customDimensions.alObjectType) == _searchType\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTime = customDimensions.executionTime\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend executionTimeInSec = executionTimeInMS / 1000\n| summarize count(), sum( executionTimeInSec ), avg( executionTimeInSec ) by alObjectInfo\n| order by avg_executionTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInSec,2)\n| sort by Ocurrance desc\n| limit _maxCount\n",
      "id": "0eaa9613-3196-4148-a444-e419cf0e1b3d",
      "usedVariables": [
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 20;\nlet _searchType = 'QUERY';\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.eventId == 'RT0018'\n| where toupper(customDimensions.alObjectType) == _searchType\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, executionTime = customDimensions.executionTime\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend executionTimeInSec = executionTimeInMS / 1000\n| summarize count(), sum( executionTimeInSec ), avg( executionTimeInSec ) by alObjectInfo\n| order by avg_executionTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration\"] = round(avg_executionTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_executionTimeInSec,2)\n| sort by Ocurrance desc\n| limit _maxCount",
      "id": "e138ca81-d2b1-4258-a4af-0f9242735099",
      "usedVariables": [
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions has 'CL0002'\n| where customDimensions.eventId == 'CL0002'\n| where customDimensions.userFeedback in ('Yes', 'No')\n| extend EnvironmentName = tostring( customDimensions.environmentName )\n| project timestamp\n, ClientType = tostring( customDimensions.clientType )\n, ErrorMessage = tostring( customDimensions.errorMessage )\n, StackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n, HostType = customDimensions.hostType\n, UserFeedback = customDimensions.userFeedback\n, UserLocale = customDimensions.userLocale\n",
      "id": "e7b5faee-6139-4148-8a3d-cbc174e1465e",
      "usedVariables": ["_endTime", "_environmentName", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Environment soft deleted successfully\ntraces\n| where timestamp between (_startTime .. _endTime) // adjust as needed\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.eventId == 'LC0181'\n| project timestamp\n, message\n, applicationFamily = customDimensions.applicationFamily\n, countryCode = customDimensions.countryCode\n, deletionReason = customDimensions.deletionReason\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, totalTime = customDimensions.totalTime\n",
      "id": "20345544-61bd-4662-a78b-66ba11603fb6",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let environment_lifecycle_events = \ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions has 'Dynamics 365 Business Central Control Plane'\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.eventId in ( 'LC0106', 'LC0114', 'LC0117', 'LC0120', 'LC0126', 'LC0134', 'LC0141', 'LC0142', 'LC0146', 'LC0150', 'LC0153', 'LC0159', 'LC0181' )\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Environment'\n, operation = case(\n    customDimensions.eventId == 'LC0106', 'Updated'\n  , customDimensions.eventId == 'LC0114', 'Started'\n  , customDimensions.eventId == 'LC0117', 'Stopped'\n  , customDimensions.eventId == 'LC0120', 'Copied'\n  , customDimensions.eventId == 'LC0126', 'Point-in-time restored' \n  , customDimensions.eventId == 'LC0134', 'Moved to different AAD tenant' \n  , customDimensions.eventId == 'LC0141', 'Database exported' \n  , customDimensions.eventId == 'LC0142', 'Configuration key updated' \n  , customDimensions.eventId == 'LC0146', 'Update window modified'         \n  , customDimensions.eventId == 'LC0150', 'Deleted (permanently)'\n  , customDimensions.eventId == 'LC0153', 'Renamed'\n  , customDimensions.eventId == 'LC0159', 'App hotfix applied'\n  , customDimensions.eventId == 'LC0181', 'Deleted (marked for deletion)'\n  , customDimensions.eventId == 'LC0184', 'Recovered (un-deleted)'            \n  , 'Unknown event'\n)\n, onWhat = tostring( customDimensions.environmentName ) // which environment\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n;\nlet extension_lifecycle_events = \ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.eventId in ('RT0010', 'LC0010', 'LC0011', 'LC0012', 'LC0013', 'LC0014', 'LC0015', 'LC0016', 'LC0017', 'LC0018', 'LC0019', 'LC0020', 'LC0021', 'LC0022', 'LC0023')    \n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Extension'\n, operation = case(\n    customDimensions.eventId=='RT0010', 'Update failed (upgrade code)'\n  , customDimensions.eventId=='LC0010', 'Install succeeded'\n  , customDimensions.eventId=='LC0011', 'Install failed'\n  , customDimensions.eventId=='LC0010', 'Install succeeded'\n  , customDimensions.eventId=='LC0012', 'Synch succeeded'\n  , customDimensions.eventId=='LC0013', 'Synch failed'           \n  , customDimensions.eventId=='LC0014', 'Publish succeeded'\n  , customDimensions.eventId=='LC0015', 'Publish failed'\n  , customDimensions.eventId=='LC0016', 'Un-install succeeded'\n  , customDimensions.eventId=='LC0017', 'Un-install failed'\n  , customDimensions.eventId=='LC0018', 'Un-publish succeeded'\n  , customDimensions.eventId=='LC0019', 'Un-publish failed'\n  , customDimensions.eventId=='LC0020', 'Compilation succeeded'\n  , customDimensions.eventId=='LC0021', 'Compilation failed'\n  , customDimensions.eventId=='LC0022', 'Update succeeded'\n  , customDimensions.eventId=='LC0023', 'Update failed (other)'\n  , 'Unknown message'\n)\n, onWhat = tostring( customDimensions.extensionName ) // which extension\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n;\nlet index_lifecycle_events = \ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.eventId in ('LC0024', 'LC0025')\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Index'\n, operation = case(\n    customDimensions.eventId == 'LC0024', 'Added'\n  , customDimensions.eventId == 'LC0025', 'Removed'\n  , 'Unknown message'\n)\n, onWhat = tostring( customDimensions.alObjectName )// which table\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n;\nlet company_lifecycle_events = \ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.eventId in ('LC0001', 'LC0004', 'LC0007')\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Company'\n, operation = case(\n    customDimensions.eventId == 'LC0001', 'Company created'\n  , customDimensions.eventId == 'LC0004', 'Company copied'\n  , customDimensions.eventId == 'LC0007', 'Company deleted'    \n  ,                    'Unknown message'\n)\n, onWhat = case(\n    customDimensions.eventId == 'LC0001', tostring( 'Redacted CompanyName' )\n  , customDimensions.eventId == 'LC0004', tostring( 'Redacted CompanyNameSource' )\n  , customDimensions.eventId == 'LC0007', tostring( 'Redacted CompanyName' )\n  ,                    'Unknown message'\n) // which company\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n) // who did it\n;\nlet feature_management_state_changes = \n// Feature management state changes\n// Available from 22.0\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.eventId == 'AL0000JT3'\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Feature'\n, operation = tostring( customDimensions.alStatus) // enabled/disabled\n, onWhat = tostring( customDimensions.alFeatureDescription ) // which feature\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n, usertelemetryId = user_Id // who did it\n;\nlet retention_policy_deletes = \ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.eventId == 'AL0000D6H'\n| extend RecordsDeleted = toint(customDimensions.alRecordsDeleted)\n, TableNumber = customDimensions.alTableNo\n, TableName = tostring( customDimensions.alTableName )\n| where RecordsDeleted > 0\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Data'\n, operation = 'Data deleted'\n, onWhat = TableName // which table\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n) // who did it\n;\nlet field_changes = \ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.eventId == 'AL0000CTE'\n| extend TableName = tostring(customDimensions.altableCaption)\n  , FieldName = tostring(customDimensions.alfieldCaption)\n| project timestamp\n, environmentName = customDimensions.environmentName\n, environmentType = customDimensions.environmentType\n, whatChanged = 'Data'\n, operation = 'Data changed'\n, onWhat = strcat( TableName, '.', FieldName ) // which table.field\n, sourceVersion = tostring(customDimensions.extensionSourceVersion)\n, destinationVersion = tostring(customDimensions.extensionDestinationVersion)\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n) // who did it\n;\nenvironment_lifecycle_events\n| union extension_lifecycle_events\n| union index_lifecycle_events\n| union company_lifecycle_events\n| union feature_management_state_changes\n| union retention_policy_deletes\n| union field_changes",
      "id": "339a0441-ee8c-4a31-a651-bf1be1b9a852",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let dau_mau = \ntraces\n| extend aadTenantId = tostring( customDimensions.aadTenantId )\n, environmentName = tostring( customDimensions.environmentName )\n| where timestamp between (_startTime .. _endTime)\n| where environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| evaluate activity_engagement(user_Id, timestamp, ago(40d), now(), 1d, 28d, aadTenantId, environmentName)\n| project-rename Daily=dcount_activities_inner, Monthly=dcount_activities_outer\n| project-away activity_ratio\n| extend timestamp_truncated = startofday(timestamp)\n;\nlet dau_wau = \ntraces\n| extend aadTenantId = tostring( customDimensions.aadTenantId )\n, environmentName = tostring( customDimensions.environmentName )\n| where timestamp > ago(10d)\n| evaluate activity_engagement(user_Id, timestamp, ago(40d), now(), 1d, 7d, aadTenantId, environmentName)\n| project-rename Daily=dcount_activities_inner, Weekly=dcount_activities_outer\n| project-away activity_ratio\n| extend timestamp_truncated = startofday(timestamp)\n;\ndau_mau\n| join kind=inner dau_wau \non $left.aadTenantId == $right.aadTenantId \nand $left.environmentName == $right.environmentName\nand $left.timestamp_truncated == $right.timestamp_truncated\n| project-away aadTenantId1,timestamp_truncated1, timestamp, environmentName1,   timestamp1, Daily1\n| project-rename timestamp=timestamp_truncated\n| project format_datetime(timestamp, 'dd-MM-yyyy'), environmentName, Daily, Monthly, Weekly",
      "id": "3952395d-3bc6-4f06-ab36-9a234294193e",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let dau_mau = \ntraces\n| extend aadTenantId = tostring( customDimensions.aadTenantId )\n, environmentName = tostring( customDimensions.environmentName )\n| where timestamp > ago(60d)\n| where environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| evaluate activity_engagement(user_Id, timestamp, ago(40d), now(), 1d, 28d, aadTenantId, environmentName)\n| project-rename Daily=dcount_activities_inner, Monthly=dcount_activities_outer\n| project-away activity_ratio\n| extend timestamp_truncated = startofday(timestamp)\n;\nlet dau_wau = \ntraces\n| extend aadTenantId = tostring( customDimensions.aadTenantId )\n, environmentName = tostring( customDimensions.environmentName )\n| where timestamp > ago(10d)\n| evaluate activity_engagement(user_Id, timestamp, ago(40d), now(), 1d, 7d, aadTenantId, environmentName)\n| project-rename Daily=dcount_activities_inner, Weekly=dcount_activities_outer\n| project-away activity_ratio\n| extend timestamp_truncated = startofday(timestamp)\n;\ndau_mau\n| join kind=inner dau_wau \non $left.aadTenantId == $right.aadTenantId \nand $left.environmentName == $right.environmentName\nand $left.timestamp_truncated == $right.timestamp_truncated\n| project-away aadTenantId1,timestamp_truncated1, timestamp, environmentName1,   timestamp1, Daily1\n| project-rename timestamp=timestamp_truncated\n| project timestamp, aadTenantId, environmentName, Daily, Monthly, Weekly",
      "id": "83409fad-2b5c-4264-917c-b012d1c339f0",
      "usedVariables": ["_EnvironmentType", "_environmentName"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// change lookback, limit, ... as needed \n// EnvironmentUpdatePerformance\ntraces\n| where timestamp between (_startTime .. _endTime) // adjust as needed\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions has 'LC0106'\n| where customDimensions.eventId == 'LC0106'\n| extend EnvironmentName = tostring( customDimensions.environmentName )\n| extend ObjectId = toint(customDimensions.codeunitObjectId)\n| project timestamp\n, EnvironmentName\n, EnvironmentType = tostring( customDimensions.environmentType )\n, ApplicationFamily = customDimensions.applicationFamily\n, CountryCode = customDimensions.countryCode\n, SourceVersion = customDimensions.sourceVersion\n, DestinationVersion = customDimensions.destinationVersion\n, Duration = customDimensions.totalTime\n, RegisteredForUpdateOnOrAfterDateUtc = customDimensions.registeredForUpdateOnOrAfterDateUtc\n, UpdateWindowStartTimeUtc = customDimensions.updateWindowStartTimeUtc\n, UpdateWindowEndTimeUtc = customDimensions.updateWindowEndTimeUtc\n, IgnoreUpdateWindow = customDimensions.ignoreUpdateWindow\n, InitiatedFrom = customDimensions.initiatedFrom\n| parse tostring(Duration) with hours ':' minutes ':' rest\n| extend totalTimeInMin = toint(hours) * 60 + toint(minutes)\n| project-away hours, minutes, rest\n| project \n[\"Environment Name\"] = EnvironmentName,\n[\"Environment Type\"] = EnvironmentType,\n[\"Source Version\"] = SourceVersion,\n[\"Destination Version\"] = DestinationVersion,\n[\"Date / Time\"] = timestamp,\n[\"Duration / min\"] = totalTimeInMin,\n[\"Duration\"] = Duration\n",
      "id": "b0712d27-5de2-4422-87b1-721604bee1c4",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// change lookback, limit, ... as needed \n// EventStatistics\nlet traceEvents = traces\n| where timestamp between (_startTime_Ingestion .. _endTime_ingestion)\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| extend \n  AadTenantId = tostring( customDimensions.aadTenantId )\n, EnvironmentName = tostring( customDimensions.environmentName )\n| extend TenantId = strcat( toupper(AadTenantId), toupper(EnvironmentName) )\n| project timestamp\n, AadTenantId, EnvironmentName\n, EnvironmentType = tostring( customDimensions.environmentType )\n, TenantId\n, EventId = tostring( customDimensions.eventId )\n| summarize EventCount=count() by AadTenantId, EnvironmentName, EnvironmentType, TenantId, EventId, Day=bin(timestamp, 1d)\n;\nlet pageViewEvents = \npageViews\n| where timestamp between (_startTime_Ingestion .. _endTime_ingestion)\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| extend AadTenantId = tostring( customDimensions.aadTenantId )\n, EnvironmentName = tostring( customDimensions.environmentName )\n| extend TenantId = strcat( toupper(AadTenantId), toupper(EnvironmentName) )\n| project timestamp\n, AadTenantId, EnvironmentName\n, EnvironmentType = tostring( customDimensions.environmentType )\n, TenantId\n, EventId = tostring( iff(isempty(customDimensions.eventId), customDimensions.eventID, customDimensions.eventId) )\n| summarize EventCount=count() by AadTenantId, EnvironmentName, EnvironmentType, TenantId, EventId, Day=bin(timestamp, 1d)\n;\ntraceEvents\n| union pageViewEvents",
      "id": "9c44e15a-37d4-4aff-9567-8d09dd139084",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// EventStatistics\nlet signalDefinitionTable = externaldata(EventID :string, Area:string, Message:string)[h@'https://raw.githubusercontent.com/duiliotacconi/DT.Telemetry/main/JSON/SignalDefinitions.json']with(format='multijson');\nlet traceEvents = traces\n| where timestamp between (_startTime_Ingestion .. _endTime_ingestion)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| extend EnvironmentName = tostring( customDimensions.environmentName )\n| project timestamp\n, EnvironmentName\n, EnvironmentType = tostring( customDimensions.environmentType )\n, EventId = tostring( customDimensions.eventId )\n| summarize EventCount=count() by EnvironmentName, EnvironmentType, EventId\n;\nlet pageViewEvents = \npageViews\n| where timestamp between (_startTime_Ingestion .. _endTime_ingestion)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| extend EnvironmentName = tostring( customDimensions.environmentName )\n| project timestamp\n,  EnvironmentName\n, EnvironmentType = tostring( customDimensions.environmentType )\n, EventId = tostring( iff(isempty(customDimensions.eventId), customDimensions.eventID, customDimensions.eventId) )\n| summarize EventCount=count() by EnvironmentName, EnvironmentType, EventId\n;\ntraceEvents\n| union pageViewEvents\n| join kind=leftouter  signalDefinitionTable\non\n$left.EventId == $right.EventID\n| project \n  [\"Environment Name\"] = EnvironmentName,\n  [\"Event Id\"] = EventId,\n  [\"Area\"] = Area,\n  [\"Message\"] = Message,\n  [\"Event Count\"] = EventCount\n| sort by ['Event Count'] desc  \n\n\n\n",
      "id": "ebbbe314-8b05-4e0c-a082-3b52bac02bca",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n| summarize count() by bin(timestamp, 1d), clientType\n",
      "id": "c454754a-5e1f-429a-847c-c1029bc13454",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n| where customDimensions.alObjectId <> \"18122317\"\n| summarize count() by bin(timestamp, 1d), clientType\n| render columnchart  title= 'Number of long running AL Methods'",
      "id": "5246a3f3-9611-46e4-8d5c-cad9b5e7c4d6",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms)   \n    and customDimensions.eventId == 'RT0004'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend clientType = tostring( customDimensions.clientType )\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| summarize request_count=count() by clientType, bin(timestamp, 1d)",
      "id": "de7383c0-617d-4d5c-be5e-ce92b040b568",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.eventId == 'RT0012'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| where timestamp !between (datetime(2024-12-02T00:00:00.000Z) .. datetime(2024-12-02T23:59:00.000Z))\n| project timestamp\n, componentVersion = customDimensions.componentVersion\n, environmentType = customDimensions.environmentType\n, environmentName = customDimensions.environmentName\n, aadTenantId = customDimensions.aadTenantId\n, alObjectId = customDimensions.alObjectId\n, companyName = customDimensions.companyName\n, clientType = tostring(customDimensions.clientType)\n, alObjectType = customDimensions.alObjectType\n, alObjectName = customDimensions.alObjectName\n, extensionVersion = customDimensions.extensionVersion\n, extensionName = customDimensions.extensionName\n, extensionId = customDimensions.extensionId\n, alStackTrace = customDimensions.alStackTrace\n// use the KQL snippet parseStackTrace to get bottom of the stack trace details\n, sqlStatement = customDimensions.sqlStatement\n, sqlServerSessionId = customDimensions.sqlServerSessionId\n, snapshotId = customDimensions.snapshotId\n, sessionId = customDimensions.sessionId\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| summarize count() by bin(timestamp,1d), clientType\n",
      "id": "751b5b91-8bca-491b-9018-42d3722ccec0",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , ExtensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n    , StackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n| extend TenantId = strcat(customDimensions.aadTenantId)\n    , ExtensionId = tostring(customDimensions.extensionId)\n    , ExtensionVersion = tostring(customDimensions.extensionVersion)\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(StackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| project\n    timestamp,\n    TenantId,\n    ExtensionId,\n    ExtensionName,\n    ExtensionVersion,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    LockingObjectId,\n    LockingObjectMethod,\n    LockingObjectExtension,    \n    SourceProcess,\n    StackTrace,\n    sqlStatement\n| summarize count = count() by tostring(SourceProcess), ExtensionId, tostring(LockingObjectExtension), ExtensionVersion, tostring(LockingObject), tostring(LockingObjectId), tostring(LockingObjectMethod),tostring(operationType),tostring(StackTrace), sqlStatement\n| order by ['count'],SourceProcess desc",
      "id": "554857ed-26df-4f11-a1cf-caea485fb2c3",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n| summarize count() by bin(timestamp, 1d), clientType\n| order by timestamp asc",
      "id": "bef00c01-1acb-47db-b263-84be3168cbf5",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 30d;\nlet _currentDuration = _endTime - _startTime;\nlet _duration = iff(_currentDuration > _maxDuration , _maxDuration, _currentDuration);\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == \"RT0008\" // starting from version 16.1, the eventId is used to identity signal types\n| project timestamp\n, alPublisher = tostring(customDimensions.alPublisher)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, category = tostring(customDimensions.category)\n, endpoint = tostring(customDimensions.endpoint)\n, httpStatusCode = tostring(customDimensions.httpStatusCode) // httpStatusCode available from 16.3\n, httpHeaders = tostring(customDimensions.httpHeaders)       // httpHeaders available from 16.3\n, httpMethod = tostring(customDimensions.httpMethod) // httpMethod available from 16.3\n, diagnosticsMessage = tostring(customDimensions.diagnosticsMessage) // Only logged in case of an error in a OData/API call. diagnosticsMessage available from 22.0\n, failureReason = tostring(customDimensions.failureReason) // Only logged in case of an error in a OData/API call. failureReason available from 22.0\n, executionTime = customDimensions.serverExecutionTime\n, requestQueueTime = customDimensions.requestQueueTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.0.\n// the datatype for executionTime and requestQueueTime is timespan so need to convert to milliseconds\n, requestQueueTimeMS = toreal(totimespan(customDimensions.requestQueueTime))/10000\n, executionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 \n, requestTotalTimeMS = ( toreal(totimespan(customDimensions.totalTime))+toreal(totimespan(customDimensions.requestQueueTime)) )/10000\n, sqlExecutes = toint(customDimensions.sqlExecutes)\n, sqlRowsRead = toint(customDimensions.sqlRowsRead)\n// these lines illustrate how to extract data from the httpHeaders dimension\n| extend httpHeadersTmp =  tostring( httpHeaders)\n| extend httpHeadersJSON = parse_json(httpHeadersTmp)\n| extend msUserAgent = tostring( httpHeadersJSON.['ms-dyn-useragent'] )\n| extend httpAuthorization = tostring( httpHeadersJSON.['Authorization'] ) // Authorization header (truncated) available from 17.3\n| extend isAdminCafe = iif(endpoint startswith \"MS/api/eos/acGroup/v2.0/companies()/ac\",true,false)\n//| where isAdminCafe == \"false\"\n//| summarize count(), avg(executionTimeInMS), avg(requestQueueTimeMS), avg(requestTotalTimeMS) by alObjectType, alObjectId, alObjectName, category, endpoint,httpMethod, isAdminCafe\n//| sort by count_ desc \n| summarize count() by bin(timestamp, 1min)\n| render timechart\n",
      "id": "fd77ed92-8e06-4d2e-9b66-b5ffa438b09a",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where isnotempty(customDimensions.sqlStatement)\n| where isnotempty(customDimensions.alStackTrace)\n| extend numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n| where numberOfJoins > _joins // adjust as needed\n| where not(customDimensions.alObjectType in (\"Page\", \"PageExtension\"))\n| where customDimensions.sqlStatement startswith \"SELECT\"\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend objectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim('GMK',tostring(customDimensions.extensionName))\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = tostring(customDimensions.extensionId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, numberOfJoins, executionTimeInMS, ObjectType, ObjectId, objectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN\n| summarize [\"Count\"] = count() by extensionName, ObjectType, ObjectId, objectName, numberOfColumnsSelected, numberOfJoins, tablename, extensionIdsFromJOIN, sqlStatement, StackTrace, clientType\n| sort by numberOfJoins, Count , numberOfColumnsSelected, tablename\n| project extensionName, ObjectType, ObjectId, objectName, numberOfColumnsSelected, numberOfJoins, Count, tablename, extensionIdsFromJOIN, sqlStatement, StackTrace, clientType",
      "id": "865abd9a-38ed-49a7-9f6a-aabecc1c0f1e",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_joins",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 2;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_SelectedDateTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_SelectedDateTime));\ntraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0018' // performance optimization\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project timestamp = timestamp\n, alMethod = replace_string(replace_string(replace_string(tostring(customDimensions.alMethod),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n, alObjectId = customDimensions.alObjectId\n, objectName = replace_string(replace_string(replace_string(tostring(customDimensions.alObjectName),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n, alObjectType = customDimensions.alObjectType\n, alStackTrace = replace_string(replace_string(replace_string(tostring(customDimensions.alStackTrace),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n, clientType = customDimensions.clientType\n, exclusiveTime = customDimensions.exclusiveTime \n, exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 \n, totalTime = customDimensions.executionTime\n, totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, extensionId = customDimensions.extensionId\n, extensionInfo = replace_string(replace_string(replace_string(tostring(customDimensions.extensionInfo),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n, extensionName = replace_string(replace_string(replace_string(tostring(customDimensions.extensionName),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n, extensionPublisher = customDimensions.extensionPublisher\n, extensionVersion = customDimensions.extensionVersion\n, longRunningThreshold = customDimensions.longRunningThreshold\n, longRunningThresholdInMS = toreal(totimespan(customDimensions.longRunningThreshold))/10000 //the datatype for executionTime is timespan \n, sqlExecutes = customDimensions.sqlExecutes // This dimension was introduced in Business Central 2023 release wave 1, version 22.0\n, sqlRowsRead = customDimensions.sqlRowsRead // This dimension was introduced in Business Central 2023 release wave 1, version 22.0\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n| order by timestamp desc ",
      "id": "c993bd4a-880b-40ec-8f82-c657d3fba111",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_SelectedDateTime",
        "_environmentName",
        "_publisher"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Long running queries by Source Process - still needs some work\n// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 2;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_SelectedDateTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_SelectedDateTime));\ntraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0018'\n| where customDimensions.eventId == 'RT0018'\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.companyName has_any (_CompanyName)\n| extend hour = hourofday(timestamp)\n| where hour between (7..17)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = replace_string(replace_string(replace_string(tostring(customDimensions.alObjectName),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = replace_string(replace_string(replace_string(tostring(customDimensions.alStackTrace),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n    , exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n    // exclusiveTime is the total time of the operation, including wait time due to client callback\n    , totalTime = customDimensions.executionTime\n    , totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| where ObjectId <> \"18122317\"\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| project\n    timestamp,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    totalTimeInMS\n| summarize count = count(), avgTotalTimeInMS = toint(avg(totalTimeInMS)) by replace_string(replace_string(replace_string(SourceProcess,'GMK',''),'cafe','xxx'),'tores','yyyyy'), StackTrace\n| order by ['count'] desc ",
      "id": "b7136ca9-74d9-44ff-a14e-d8195c6794a9",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_SelectedDateTime",
        "_environmentName"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Any CalcSum that we can find in Telemetry that is locking\ntraces\n| where timestamp between (_startTime .. _endTime) // adjust as needed. The value 30 comes from the app configuration\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // only interested in parts in the code we can change\n//| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.eventId == \"RT0005\"\n| where customDimensions.sqlStatement contains \"SELECT SUM\" //It's an intentional SUM\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| where customDimensions.clientType has_any (_ClientType)\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| parse kind=regex sqlStatement with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , TenantId = strcat(customDimensions.aadTenantId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, tablename, executionTimeInMS, ObjectType, ObjectId, alObjectName, stackTrace, eventId, clientType, sqlStatement, extensionIdsFromJOIN",
      "id": "99afdd71-6ceb-4196-adf2-621edd19dfb7",
      "usedVariables": ["_ClientType", "_endTime", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where operation_Name == \"Web Services Call\" // do note that in a later version of the schema, this field will not be used \n     or customDimensions.eventId == \"RT0008\" // starting from version 16.1, the eventId is used to identity signal types\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)     \n| summarize count() by bin(timestamp,1m)\n//| extend OperationLimit = 600",
      "id": "27be1af1-f048-4b4b-a8f5-5d2abdc83841",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Any CalcSum that we can find in Telemetry that is locking\ntraces\n| where customDimensions.environmentName == \"ProductionIT\"\n| where timestamp between (_startTime .. _endTime) // adjust as needed. The value 30 comes from the app configuration\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // only interested in parts in the code we can change\n//| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT TOP 1 NULL\" //It's an intentional isEmpty\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\",\"Page Extension\"))\n| where customDimensions.clientType has_any (_ClientType)\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| parse kind=regex sqlStatement with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, tablename, executionTimeInMS, ObjectType, ObjectId, alObjectName, StackTrace, eventId, clientType, sqlStatement, extensionIdsFromJOIN",
      "id": "425d82a0-51d1-4663-a459-9cfb859a0b4d",
      "usedVariables": ["_ClientType", "_endTime", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableCount = (\ntraces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")),\" (Count)\") \n| project-away timestamp, dayBin, executionTimeInMS\n| sort by day asc \n| evaluate pivot(day, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")), \" (avg)\")\n| project-away timestamp, dayBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, operationType, sqlStatement, day\n| sort by day asc \n| evaluate pivot(day,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.operationType == $right.operationType,\n$left.sqlStatement == $right.sqlStatement\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, operationType1, sqlStatement1",
      "id": "a08fbb6f-8ab8-45c9-8396-e13bd2075c39",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let ObjectNameAndClientLRQCount= ( \ntraces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend eventId = customDimensions.eventId \n, environmentName = customDimensions.environmentName\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, companyName = tostring(customDimensions.companyName)\n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(customDimensions.extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', customDimensions.alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n, numberOfJoins = countof(sqlStatement, \"JOIN\") \n, numberOfFlowFields = countof(sqlStatement, \"OUTER APPLY\") \n, extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement) )\n| parse kind=regex sqlStatement with selectPart:string \"FROM\" rest:string\n| extend numberOfColumnsSelected = case(\n    operationType == \"SELECT\", countof(selectPart,\",\") + 1\n    , operationType == \"SELECT'\", countof(selectPart,\",\") + 1\n    , 0\n)\n, isolationLevel = tostring(case(\n    sqlStatement has 'WITH(UPDLOCK)', 'UPDLOCK'\n  , sqlStatement has 'WITH(READUNCOMMITTED)', 'ReadUncommitted'\n  , sqlStatement has 'WITH(READCOMMITTED)', 'ReadCommitted' // available from 22.0\n  , sqlStatement has 'WITH(REPEATABLEREAD)', 'RepeatableRead' // not sure about this yet\n  , 'Default'\n))\n| sort by executionTimeInMS desc \n| project timestamp, \n    [\"Environment Name\"] = environmentName,\n    [\"Client Type\"] = tostring(clientType), \n    [\"AL Object ID\"] = tostring(alObjectId),\n    [\"AL Object Type\"] = tostring(alObjectType),\n    [\"AL Object Name\"] = tostring(alObjectName),\n    [\"Duration\"] = executionTimeInMS, \n    [\"Type\"] = operationType, \n    [\"FlowFields\"] = numberOfFlowFields, \n    [\"JOINs\"] = numberOfJoins, \n    [\"with UPDLOCK\"] = withUPDLOCK,\n    [\"Company Name\"] = companyName, \n    [\"AL Object Information\"] = alObjectInfo, \n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"Extension Information\"] = extensionInfo,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Operation Type\"] = operationType,\n    [\"Isolation Level\"] = isolationLevel,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id\n| summarize count(), round(avg(Duration),0) \n    by ['AL Object ID']\n        , ['AL Object Type']\n        , ['AL Object Name']\n        , ['Client Type']\n        , ['Operation Type']\n        , ['Isolation Level']\n        , ['SQL Statement']\n        , ['AL Stack Trace']\n| sort by count_ desc \n);\nObjectNameAndClientLRQCount\n| extend Percentage = round(count_ *100 / toscalar(ObjectNameAndClientLRQCount | summarize sum(count_)),2)\n| sort by count_ desc",
      "id": "e9d068b6-5e57-437f-b37a-15dae28b6ef7",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let utcOffsetHours = 2;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(now()));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(now()));\nlet data = traces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend Titolo = tostring(message);\ndata\n| where customDimensions.eventId in~ ('RT0028', 'RT0005', 'RT0012')\n| summarize count() by Titolo\n\n\n",
      "id": "d9abd6e6-5295-449e-acad-37a4beb1cbdf",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_environmentName",
        "_publisher"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableDeadlocked = (\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend TenantId = strcat(customDimensions.aadTenantId)\n    , ExtensionId = tostring(customDimensions.extensionId)\n    , ExtensionName = tostring(customDimensions.extensionName)\n    , ExtensionVersion = tostring(customDimensions.extensionVersion)\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n    , clientType = tostring(customDimensions.clientType)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablenamewithjoins: string \"\\\\$\" space: string\n| parse kind=regex tablenamewithjoins with tablenaamenojoins: string \"\\\\$\" newspace : string \n| parse kind=regex tablenaamenojoins with space2: string \"\\\\$\" onlytablenamenojoins: string \n//| parse kind=regex tablenamewithjoins with stringtoeliminate: string \"\\\\$\" tablenamewithoutjoins: string\n| extend tablename = case(\n    tablenamewithjoins contains \"$\", onlytablenamenojoins\n    , tablenamewithjoins \n)\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where tablename <> \"\"\n| summarize Count = count() by tablename, clientType\n);\nTableDeadlocked\n| extend Percentage = round(Count *100 / toscalar(TableDeadlocked | summarize sum(Count)),2)\n| sort by Count desc \n",
      "id": "74b8e180-f8ab-40bc-bd19-a3e1fe6c7b80",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n//| where customDimensions.designerLevel == \"None\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \"11\"\n    , performanceBucket == \"2min-5min\", \"10\"\n    , performanceBucket == \"1min-2min\", \"09\"\n    , performanceBucket == \"30sec-1min\", \"08\"\n    , performanceBucket == \"15sec-30sec\", \"07\"\n    , performanceBucket == \"7sec-15sec\", \"06\"\n    , performanceBucket == \"3sec-7sec\", \"05\"\n    , performanceBucket == \"1sec-3sec\", \"04\"\n    , performanceBucket == \"500ms-1sec\", \"03\"\n    , performanceBucket == \"250ms-500ms\", \"02\"\n    , performanceBucket == \"<250ms\", \"01\"\n    , \"00\")\n| extend perfBucket = strcat(bucketIndex, ': ', performanceBucket)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| summarize count() by perfBucket, bin(timestamp,1d)\n| sort by perfBucket asc ",
      "id": "c6f83d0b-d863-43b9-ba5c-6fceb1d3e931",
      "usedVariables": [
        "_CompanyName",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n    and customDimensions.eventId == 'RT0019'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| extend extensionId = tostring(customDimensions.extensionId)\n    , extensionName = trim('GMK',tostring(customDimensions.extensionName))\n    , extensionPublisher = trim('GMK',tostring(customDimensions.extensionPublisher))\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n    , httpStatusCode = toint(customDimensions.httpStatusCode)\n    , clientType = tostring(customDimensions.clientType)\n    , method = tostring(customDimensions.httpMethod)\n    , endpoint = tostring(customDimensions.endpoint)\n| where httpStatusCode !between (200 .. 299)\n| summarize count() by httpStatusCode, clientType, method, endpoint, extensionPublisher, extensionName, extensionId, alObjectType, alObjectId, alObjectName\n| project httpStatusCode, count_, endpoint, clientType, method, alObjectId, alObjectName, alObjectType, extensionName, extensionId\n\n\n",
      "id": "c39a8e13-e6c6-4c2b-a64c-17f1446800a2",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Long running queries by Source Process - still needs some work\n// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 2;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_SelectedDateTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_SelectedDateTime));\ntraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0018'\n| where customDimensions.eventId == 'RT0018'\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.companyName has_any (_CompanyName)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = replace_string(replace_string(replace_string(tostring(customDimensions.alObjectName),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = replace_string(replace_string(replace_string(tostring(customDimensions.alStackTrace),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n    , exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n    // exclusiveTime is the total time of the operation, including wait time due to client callback\n    , totalTime = customDimensions.executionTime\n    , totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| where ObjectId <> \"18122317\"\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| project\n    timestamp,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    totalTimeInMS\n| summarize count = count() by [\"Source Process\"] = replace_string(replace_string(replace_string(SourceProcess,'GMK',''),'cafe','xxx'),'tores','yyyyy'), bin(timestamp,1h)\n| render timechart ",
      "id": "4e6aa1ad-7cdf-4c87-b0d0-325c19273563",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_SelectedDateTime",
        "_environmentName"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Long running queries by Source Process - still needs some work\n// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 2;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_SelectedDateTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_SelectedDateTime));\ntraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0005'\n| where customDimensions.eventId == 'RT0005'\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.companyName has_any (_CompanyName)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = replace_string(replace_string(replace_string(tostring(customDimensions.alObjectName),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = replace_string(replace_string(replace_string(tostring(customDimensions.alStackTrace),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n    , exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n    // exclusiveTime is the total time of the operation, including wait time due to client callback\n    , totalTime = customDimensions.executionTime\n    , totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| where ObjectId <> \"18122317\"\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| project\n    timestamp,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    totalTimeInMS\n| summarize count = count(), avgTotalTimeInMS = toint(avg(totalTimeInMS)) by ObjectType, ObjectId, ObjectName, SourceMethod = replace_string(replace_string(replace_string(SourceProcess,'GMK',''),'cafe','xxx'),'tores','yyyyy'), StackTrace\n| order by ['count'] desc \n\n\n\n\n",
      "id": "a2cc6a57-0c25-49c0-9964-6a1e948a0b50",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_SelectedDateTime",
        "_environmentName"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Long running queries by Source Process - still needs some work\n// Last Long running AL methods\n// Calculate Time in UTC Time\nlet utcOffsetHours = 2;\nlet _StartOfDay = datetime_add('hour',-utcOffsetHours,startofday(_SelectedDateTime));\nlet _EndOfDay = datetime_add('hour',-utcOffsetHours,endofday(_SelectedDateTime));\ntraces\n| where timestamp between (_StartOfDay .. _EndOfDay)\n| where customDimensions has 'RT0005'\n| where customDimensions.eventId == 'RT0005'\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.companyName has_any (_CompanyName)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = replace_string(replace_string(replace_string(tostring(customDimensions.alObjectName),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = replace_string(replace_string(replace_string(tostring(customDimensions.alStackTrace),'GMK',''),'cafe','xxx'),'tores','yyyyy')\n    , exclusiveTime = customDimensions.exclusiveTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.1. Backported to version 21.6\n    , exclusiveTimeInMS = toreal(totimespan(customDimensions.exclusiveTime))/10000 //the datatype for exclusiveTime is timespan \n    // exclusiveTime is the total time of the operation, including wait time due to client callback\n    , totalTime = customDimensions.executionTime\n    , totalTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| where ObjectId <> \"18122317\"\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| project\n    timestamp,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    totalTimeInMS\n| where SourceProcess <> \" -    ()\"\n| summarize count = count() by ObjectType, ObjectId, ObjectName, [\"Source Process\"] = replace_string(replace_string(replace_string(SourceProcess,'GMK',''),'cafe','xxx'),'tores','yyyyy'), bin(timestamp,1h)\n| render timechart ",
      "id": "500d36b5-e5d0-4406-a880-a45bf62b6173",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_SelectedDateTime",
        "_environmentName"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces \n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.eventId == \"RT0008\"\n//| where toupper(customDimensions.category) == \"API\"\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend _endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend _processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| extend _httpStatusCode = toint(customDimensions.httpStatusCode)\n| where _httpStatusCode !between (200..299)\n| project [\"Endpoint\"] = _endpoint, \n        [\"Http Status Code\"] = _httpStatusCode,\n        [\"Object Type\"] = tostring(customDimensions.alObjectType), \n        [\"Object No.\"] = tostring(customDimensions.alObjectId), \n        _processingTimeMS, \n        [\"Environment Type\"] = tostring(customDimensions.environmentType)\n| summarize count(), [\"Avg. Time\"] = round(avg(_processingTimeMS),2), [\"Total Time\"] = round(sum(_processingTimeMS),2) by [\"Endpoint\"], ['Http Status Code'], [\"Object Type\"], [\"Object No.\"], [\"Environment Type\"]\n| sort by count_ desc\n",
      "id": "bc9e1039-3710-49c1-8d28-a31b57f1ad1a",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where customDimensions.alObjectId > 0\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n| summarize \n    ExecutionCount = count(),\n    minTime = toint(min(duration)),\n    avgTime = toint(avg(duration)),\n    maxTime = toint(max(duration))\n    by\n    alObjectId,\n    alObjectName,\n    eventId,\n//    pageMode,\n    pageType,\n    environmentName,\n    bin(timestamp,15min)\n| project\n    timestamp,\n    [\"Environment Name\"] = environmentName,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Page Type\"] = pageType,\n    [\"Execution Count\"] = ExecutionCount,\n    [\"Min. Time\"] = minTime,\n    [\"Avg. Time\"] = avgTime,\n    [\"Max. Time\"] = maxTime\n| where ['AL Object ID'] in (\"9305\",\"42\")\n| order by ['Execution Count'] desc ",
      "id": "59a4c33a-a763-49d7-9f2c-fd044fc213d0",
      "usedVariables": ["_endTime", "_environmentName", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n    and customDimensions.eventId == 'RT0019'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| extend extensionId = tostring(customDimensions.extensionId)\n    , extensionName = trim('GMK',tostring(customDimensions.extensionName))\n    , extensionPublisher = trim('GMK',tostring(customDimensions.extensionPublisher))\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n    , httpStatusCode = toint(customDimensions.httpStatusCode)\n    , clientType = tostring(customDimensions.clientType)\n    , method = tostring(customDimensions.httpMethod)\n    , endpoint = tostring(customDimensions.endpoint)\n| where httpStatusCode !between (200 .. 299)\n| project timestamp, httpStatusCode, endpoint, clientType, method, alObjectId, alObjectName, alObjectType, extensionName, extensionId\n| sort by timestamp desc \n\n\n",
      "id": "f6a23842-5e53-47c3-8804-7af969cad50f",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \"11\"\n    , performanceBucket == \"2min-5min\", \"10\"\n    , performanceBucket == \"1min-2min\", \"09\"\n    , performanceBucket == \"30sec-1min\", \"08\"\n    , performanceBucket == \"15sec-30sec\", \"07\"\n    , performanceBucket == \"7sec-15sec\", \"06\"\n    , performanceBucket == \"3sec-7sec\", \"05\"\n    , performanceBucket == \"1sec-3sec\", \"04\"\n    , performanceBucket == \"500ms-1sec\", \"03\"\n    , performanceBucket == \"250ms-500ms\", \"02\"\n    , performanceBucket == \"<250ms\", \"01\"\n    , \"00\")\n| extend perfBucket = strcat(bucketIndex, ': ', performanceBucket)\n| summarize count() by perfBucket, bin(timestamp,1h)\n| sort by perfBucket asc ",
      "id": "b5dc7101-b3f2-430d-a872-db436bb7e2bb",
      "usedVariables": [
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where customDimensions.alObjectId > 0\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n| summarize \n    ExecutionCount = count(),\n    minTime = toint(min(duration)),\n    avgTime = toint(avg(duration)),\n    maxTime = toint(max(duration))\n    by\n    alObjectId,\n    alObjectName,\n    eventId,\n//    pageMode,\n    pageType,\n    environmentName,\n    bin(timestamp,15min)\n| project\n    timestamp,\n    [\"Environment Name\"] = environmentName,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Page Type\"] = pageType,\n    [\"Execution Count\"] = ExecutionCount,\n    [\"Min. Time\"] = minTime,\n    [\"Avg. Time\"] = avgTime,\n    [\"Max. Time\"] = maxTime\n| where ['AL Object ID'] in (\"9305\",\"42\")\n| order by ['Execution Count'] desc ",
      "id": "e09bb9a9-6298-415e-b32d-b7d2788af986",
      "usedVariables": ["_endTime", "_environmentName", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| summarize count() by bin(timestamp, 7d)",
      "id": "433bbf94-eed2-4c08-a556-0b7ba325d612",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| summarize count() by bin(timestamp, 7d)\n| render columnchart  title= 'Number of long running AL Methods'",
      "id": "2e72008a-374b-47d0-86c1-9d1fc5d276f6",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n| summarize count() by bin(timestamp, 7d), clientType\n| order by timestamp asc",
      "id": "b5a40852-5169-4969-8648-b1fb5173d754",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.eventId == 'RT0012'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| where timestamp !between (datetime(2024-12-02T00:00:00.000Z) .. datetime(2024-12-02T23:59:00.000Z))\n| project timestamp\n, componentVersion = customDimensions.componentVersion\n, environmentType = customDimensions.environmentType\n, environmentName = customDimensions.environmentName\n, aadTenantId = customDimensions.aadTenantId\n, alObjectId = customDimensions.alObjectId\n, companyName = customDimensions.companyName\n, clientType = tostring(customDimensions.clientType)\n, alObjectType = customDimensions.alObjectType\n, alObjectName = customDimensions.alObjectName\n, extensionVersion = customDimensions.extensionVersion\n, extensionName = customDimensions.extensionName\n, extensionId = customDimensions.extensionId\n, alStackTrace = customDimensions.alStackTrace\n// use the KQL snippet parseStackTrace to get bottom of the stack trace details\n, sqlStatement = customDimensions.sqlStatement\n, sqlServerSessionId = customDimensions.sqlServerSessionId\n, snapshotId = customDimensions.snapshotId\n, sessionId = customDimensions.sessionId\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| summarize count() by bin(timestamp,7d), clientType\n",
      "id": "704e3b62-e578-43bd-8af1-d47f98e97291",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where customDimensions.alObjectId > 0\n| where timestamp between (_startTime .. _endTime)\n//| where customDimensions.environmentName has_any (_environmentName)\n| extend alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n| summarize \n    ExecutionCount = count(),\n    avgTime = toint(avg(duration))\n    by\n    alObjectId,\n    alObjectName,\n//    environmentName,\n    bin(timestamp,1d)\n| project\n    timestamp,\n//    [\"Environment Name\"] = environmentName,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Execution Count\"] = ExecutionCount,\n    [\"Avg. Time\"] = avgTime\n| where ['AL Object ID'] in (\"9305\",\"42\")\n| where ['AL Object Name'] != \"\"\n| order by ['Execution Count'] desc ",
      "id": "0411c197-19b3-46e7-a8ae-8867cb478638",
      "usedVariables": ["_endTime", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n    , method = tostring(customDimensions.alExecutingMethodScope)\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n| project timestamp, \n    [\"Session ID\"] = session_Id, \n    [\"Client Type\"] = clientType, \n    [\"Extension Info\"] = extensionInfo, \n    [\"AL Object Info\"] = strcat(alObjectType, ' ', alObjectId, ' - ', alObjectName), \n    [\"AL Stack Trace\"] =  stackTrace, \n    [\"SQL Statement\"] = sqlStatement,\n    [\"Locked Table\"] = tablename,\n    [\"SQL Session Holding Lock\"] = sqlServerSessionId,\n    [\"Snapshot ID\"] =  snapshotId",
      "id": "ab420794-3ab5-411a-b25e-cee4a6929655",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend TenantId = strcat(customDimensions.aadTenantId)\n    , ExtensionId = tostring(customDimensions.extensionId)\n    , ExtensionName = tostring(customDimensions.extensionName)\n    , ExtensionVersion = tostring(customDimensions.extensionVersion)\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , clientType = tostring(customDimensions.clientType)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablenamewithjoins: string \"\\\\$\" space: string\n| parse kind=regex tablenamewithjoins with stringtoeliminate: string \"\\\\$\" tablenamewithoutjoins: string\n| extend tablename = case(\n    tablenamewithjoins contains \"$\", tablenamewithoutjoins\n    , tablenamewithjoins \n)\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| summarize count() by bin(timestamp,5min), clientType\n| render columnchart \n\n",
      "id": "ca2cabde-a3d2-4408-a3c6-0c7680c7c58f",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _appInsightsTraces = materialize (\n    traces\n    | where timestamp  between (_startTime .. _endTime)\n    | where customDimensions.environmentType has_any (_EnvironmentType)\n    | where customDimensions.environmentName has_any (_environmentName)\n);\nlet _failedToBeEnqueuedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FNY\"\n);\nlet _failedCanBeRetriedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000HE7\"\n);\nlet _RescheduledOnLoginJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000I49\"\n);\nlet _RunOnceByUserJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000FMG\"\n);\nlet _FailedAndStoppedJQ = materialize (\n    _appInsightsTraces\n    | where customDimensions.eventId == \"AL0000JRG\"\n);\n_failedToBeEnqueuedJQ\n| union (_failedToBeEnqueuedJQ) \n| union (_failedCanBeRetriedJQ) \n| union (_RescheduledOnLoginJQ)\n| union (_RunOnceByUserJQ) \n| union (_FailedAndStoppedJQ) \n| sort by timestamp asc",
      "id": "ec70321b-741f-438e-acc1-388cd93e75bf",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableCount = (\ntraces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0018' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectType = tostring(customDimensions.alObjectType)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectMethod = trim('GMK',tostring(customDimensions.alMethod))\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")),\" (Count)\") \n| project-away timestamp, dayBin, executionTimeInMS\n| sort by day asc \n| evaluate pivot(day, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0018' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| project \ntimestamp\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectType = tostring(customDimensions.alObjectType)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")), \" (avg)\")\n| project-away timestamp, dayBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, alObjectMethod, day\n| sort by day asc \n| evaluate pivot(day,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.alObjectMethod == $right.alObjectMethod\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, alObjectMethod1 ",
      "id": "589416d0-a26c-4ec8-b228-7008b569740c",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "//Monitor long running data upgrades\nunion traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName == _environmentName\n| where customDimensions.eventId == 'AL0000EJA'\n| extend upgradeEnvironmentName = tostring(customDimensions.environmentName)\n  , upgradeTag = tostring(customDimensions.eventId)\n  , upgradeEventType = tostring( customDimensions.alUpgradeTag )\n  , upgradeCompanyName = tostring(customDimensions.alCompanyName)\n| project timestamp, message, upgradeTag, customDimensions, session_Id, upgradeEnvironmentName, upgradeEventType, upgradeCompanyName\n| join kind=inner\n(\nunion traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName == _environmentName\n| where customDimensions.eventId == 'AL0000EJ9'\n| extend upgradeEnvironmentName = tostring(customDimensions.environmentName)\n  , upgradeTag = tostring(customDimensions.eventId)\n  , upgradeEventType = tostring( customDimensions.alUpgradeTag )\n  , upgradeCompanyName = tostring(customDimensions.alCompanyName)\n| project timestamp, message, upgradeTag, customDimensions, session_Id, upgradeEnvironmentName, upgradeEventType, upgradeCompanyName\n) on upgradeEnvironmentName, session_Id, upgradeCompanyName, upgradeEventType\n| extend upgradeTagDuration = timestamp - timestamp1\n| extend upgradeTagDurationInSec = round(upgradeTagDuration / 1s)\n| extend upgradeCompanyNoPII = \"\"\n//| project session_Id, timestamp, upgradeTagDuration, upgradeTagDurationInSec, upgradeCompanyName, upgradeEventType\n| project session_Id, timestamp, upgradeTagDuration, upgradeTagDurationInSec, upgradeCompanyNoPII, upgradeEventType\n| order by session_Id desc, timestamp desc //data upgrade tag timeline execution\n\n//| order by session_Id desc, upgradeTagDuration desc //data upgrade tag longest execution\n\n",
      "id": "f79b8376-0cc8-4ad5-a3b1-3dc9312d0465",
      "usedVariables": ["_endTime", "_environmentName", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime) // adjust as needed\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| extend environmentName = tostring( customDimensions.environmentName )\n    , environmentType = tostring(customDimensions.environmentType)\n    , componentVersion = tostring(customDimensions.componentVersion)\n| where componentVersion <> \"\"\n| summarize max(bin(timestamp,1min)) by environmentName, componentVersion\n| sort by max_timestamp desc \n\n\n",
      "id": "ab8b4f62-5be2-4246-b953-b06e8c803bed",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet PageViewCount = (\npageViews\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.alObjectId > 0\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where customDimensions.pageType !in (\"ConfirmationDialog\",\"Report\",\"ReportPreview\",\"StandardDialog\")\n| project timestamp\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , eventId = tostring(customDimensions.eventID) \n    , pageType = tostring(customDimensions.pageType)\n    , durationInMs = toint(duration)\n    , signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, durationInMs\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nPageViewCount\n| join\n(pageViews\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.alObjectId > 0\n| project timestamp\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , eventId = tostring(customDimensions.eventID) \n    , pageType = tostring(customDimensions.pageType)\n    , durationInMs = toint(duration)\n    , signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(durationInMs),0) by alObjectId, alObjectName, pageType, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.pageType == $right.pageType\n| project-away alObjectId1, alObjectName1, pageType1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc \n",
      "id": "4435a7e1-68ec-4fab-bab5-12af2bf657fd",
      "usedVariables": [
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\ntraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, extensionId = tostring(customDimensions.extensionId)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, alMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, executionTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, extensionId = tostring(customDimensions.extensionId)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, alMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, alObjectType, alObjectId, alObjectName, alMethod, clientType, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectName == $right.alObjectName,\n$left.alMethod == $right.alMethod,\n$left.clientType == $right.clientType\n| project-away extensionId, extensionId1, alObjectType1, alObjectId1, alObjectName1, clientType1, alMethod1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc \n",
      "id": "195db166-2d23-41a6-9309-a26eb9de4492",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\ntraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, executionTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, extensionId = tostring(customDimensions.extensionId)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, alObjectType, alObjectId, alObjectName, operationType, sqlStatement, clientType, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.clientType == $right.clientType,\n$left.operationType == $right.operationType,\n$left.sqlStatement == $right.sqlStatement\n| project-away extensionId, extensionId1, alObjectType1, alObjectId1, alObjectName1, operationType1, sqlStatement1, clientType1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc ",
      "id": "7d85f11b-3f8d-42f4-b2c4-e029abb22f53",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let signalDefinitionTable = (externaldata(tarot_interpretations : string)[h@'https://raw.githubusercontent.com/duiliotacconi/DT.Telemetry/main/JSON/Tarot.json']with(format='multijson')\n| extend tarots = parse_json(tarot_interpretations)\n| mv-apply tarots on (\n    project Name = tostring(tarots.name),\n            Rank = tostring(tarots.rank),\n            Suite = tostring(tarots.suit),\n            FortuneTellings = tostring(tarots.fortune_telling),\n            Keywords = tostring(tarots.keywords),\n            Meanings = tostring(tarots.meanings)\n)\n//FortuneTellings\n| extend FortuneTelling = parse_json(FortuneTellings)\n| mv-expand FortuneTelling\n//Keywords\n| extend Keyword = parse_json(Keywords)\n| mv-expand Keyword\n//Meanings\n| extend Meaning = parse_json(Meanings)\n| mv-apply Meaning on (\n    project Lights = tostring(Meaning.light),\n            Shadows = tostring(Meaning.shadow)\n)\n//Meaning.lights\n| extend LightNull = parse_json(Lights)\n| mv-expand LightNull\n//Meaning.shadows\n| extend ShadowNull = parse_json(Shadows)\n| mv-expand ShadowNull\n| sample (1)\n);\nsignalDefinitionTable\n| project Name, Suite, FortuneTelling, Keyword, \n    Light = iff(LightNull == \"##(null)\",\"\",LightNull), Shadow = iff(ShadowNull ==  \"##(null)\",\"\",ShadowNull)\n| evaluate narrow()\n| project Label = Column, Value = Value\n\n",
      "id": "a15b8265-ac7e-4653-9a1e-7a99bda12fd5",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = round(toreal(totimespan(customDimensions.executionTime))/10000,0)  \n, alMethod = tostring(customDimensions.alMethod)\n| where executionTimeInMS > 1000 //greater than 1 sec\n| sort by timestamp desc \n| project timestamp, \n    [\"Client Type\"] = clientType, \n    [\"Extension Information\"] = extensionInfo,\n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"AL Object Method\"] = alMethod,\n    [\"Duration\"] = executionTimeInMS, \n    [\"AL Object Information\"] = alObjectInfo, \n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id,\n    [\"AL Stack Trace\"] = alStackTrace",
      "id": "2ee57c96-232b-4d8f-8ea9-952cc1997401",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let correctedEndTime = datetime_add('hour',12,_ToPeriodTime);\ntraces\n| where timestamp between (_FromPeriodTime .. correctedEndTime)// adjust as needed\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toint(round(toreal(totimespan(customDimensions.executionTime))/10000,0)) \n, negativeExecutionTimeInMS = toint((round(toreal(totimespan(customDimensions.executionTime))/10000,0)) * -1) \n, alMethod = trim(@'GMK',tostring(customDimensions.alMethod))\n| extend correctedStartTime = datetime_add('millisecond',negativeExecutionTimeInMS, timestamp)\n| where correctedStartTime <= _ToPeriodTime\n| extend runningDuration = iff(timestamp between (_FromPeriodTime .. _ToPeriodTime)\n    ,iff(correctedStartTime < _FromPeriodTime, toint(round(toreal(totimespan(timestamp - _FromPeriodTime))/10000,0)),toint(round(toreal(totimespan(timestamp - correctedStartTime))/10000,0)))\n    ,toint(round(toreal(totimespan(_ToPeriodTime - correctedStartTime))/10000,0)))\n| extend outboundEvent = iff(correctedStartTime < _FromPeriodTime, true, iff(timestamp > _ToPeriodTime,true,false))\n| sort by correctedStartTime asc \n| project [\"Start Time\"] = correctedStartTime,\n    [\"End Time\"] = timestamp, \n    [\"Total Event Duration\"] = executionTimeInMS, \n    [\"Running Duration\"] = runningDuration, //Since when it was running, when the event happened\n    [\"Outbound\"] = outboundEvent,\n    [\"Client Type\"] = clientType, \n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"AL Object Method\"] = alMethod,\n    [\"Extension Information\"] = extensionInfo,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id,\n    [\"AL Stack Trace\"] = alStackTrace",
      "id": "5c3a3d35-0228-411e-b69c-07210ace6372",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_FromPeriodTime",
        "_ToPeriodTime",
        "_environmentName",
        "_publisher"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let correctedEndTime = datetime_add('hour',12,_ToPeriodTime);\ntraces\n| where timestamp between (_FromPeriodTime .. correctedEndTime)// adjust as needed\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toint(round(toreal(totimespan(customDimensions.executionTime))/10000,0)) \n, negativeExecutionTimeInMS = toint((round(toreal(totimespan(customDimensions.executionTime))/10000,0)) * -1) \n| extend correctedStartTime = datetime_add('millisecond',negativeExecutionTimeInMS, timestamp)\n| where correctedStartTime <= _ToPeriodTime\n| extend runningDuration = iff(timestamp between (_FromPeriodTime .. _ToPeriodTime)\n    ,iff(correctedStartTime < _FromPeriodTime, toint(round(toreal(totimespan(timestamp - _FromPeriodTime))/10000,0)),toint(round(toreal(totimespan(timestamp - correctedStartTime))/10000,0)))\n    ,toint(round(toreal(totimespan(_ToPeriodTime - correctedStartTime))/10000,0)))\n| extend outboundEvent = iff(correctedStartTime < _FromPeriodTime, true, iff(timestamp > _ToPeriodTime,true,false))\n| sort by correctedStartTime asc \n| project [\"Start Time\"] = correctedStartTime,\n    [\"End Time\"] = timestamp, \n    [\"Total Event Duration\"] = executionTimeInMS, \n    [\"Running Duration\"] = runningDuration, //Since when it was running, when the event happened\n    [\"Outbound\"] = outboundEvent,\n    [\"Client Type\"] = clientType, \n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Stack Trace\"] = alStackTrace,\n    [\"Extension Information\"] = extensionInfo,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id,\n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"SQL Statement\"] = sqlStatement",
      "id": "23cf2890-3318-4ee5-916f-6fa747b5ad31",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_FromPeriodTime",
        "_ToPeriodTime",
        "_environmentName",
        "_publisher"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let correctedEndTime = datetime_add('hour',12,_ToPeriodTime);\ntraces\n| where timestamp between (_FromPeriodTime .. correctedEndTime)// adjust as needed\n| where customDimensions.eventId == 'RT0006' \n| where customDimensions.alObjectId > 0 \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend alObjectName = trim(@'GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim(@'GMK',tostring(customDimensions.extensionName))\n| extend eventId = customDimensions.eventId \n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toint(round(toreal(totimespan(customDimensions.totalTime))/10000,0)) \n, negativeExecutionTimeInMS = toint((round(toreal(totimespan(customDimensions.totalTime))/10000,0)) * -1) \n| extend correctedStartTime = datetime_add('millisecond',negativeExecutionTimeInMS, timestamp)\n| where correctedStartTime <= _ToPeriodTime\n| extend runningDuration = iff(timestamp between (_FromPeriodTime .. _ToPeriodTime)\n    ,iff(correctedStartTime < _FromPeriodTime, toint(round(toreal(totimespan(timestamp - _FromPeriodTime))/10000,0)),toint(round(toreal(totimespan(timestamp - correctedStartTime))/10000,0)))\n    ,toint(round(toreal(totimespan(_ToPeriodTime - correctedStartTime))/10000,0)))\n| extend outboundEvent = iff(correctedStartTime < _FromPeriodTime, true, iff(timestamp > _ToPeriodTime,true,false))\n| sort by correctedStartTime asc \n| project [\"Start Time\"] = correctedStartTime,\n    [\"End Time\"] = timestamp, \n    [\"Total Event Duration\"] = executionTimeInMS, \n    [\"Running Duration\"] = runningDuration, //Since when it was running, when the event happened\n    [\"Outbound\"] = outboundEvent,\n    [\"Client Type\"] = clientType, \n    [\"AL Object ID\"] = alObjectId,\n    [\"AL Object Type\"] = alObjectType,\n    [\"AL Object Name\"] = alObjectName,\n    [\"Extension Information\"] = extensionInfo,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id\n",
      "id": "88e9cc76-4934-432b-85db-097b67c86772",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_FromPeriodTime",
        "_ToPeriodTime",
        "_environmentName",
        "_publisher"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\ntraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0008' \n| where toupper(customDimensions.category) == \"API\"\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| extend endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| project timestamp\n, endpoint = endpoint\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, processingTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, processingTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0008' \n| where toupper(customDimensions.category) == \"API\"\n| extend endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n, endpoint = endpoint\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, processingTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(processingTimeInMS),0) by alObjectType, alObjectId, alObjectName, endpoint, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.endpoint == $right.endpoint\n| project-away alObjectType1, alObjectId1, alObjectName1, endpoint1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc \n",
      "id": "483357c5-f014-4cf5-a893-4d0a851fa1ce",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\r\n| where timestamp  between (_startTime .. _endTime)\r\n| where customDimensions.environmentName has_any (_environmentName)\r\n| where customDimensions.eventId == 'RT0006'\r\n| where customDimensions.result == \"Success\"\r\n| where customDimensions.reportingEngine != \"ProcessingOnly\"\r\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\r\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\r\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \r\n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\r\n, totalTime = customDimensions.totalTime\r\n, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \r\n| extend totalTimeInSec = totalTimeInMS / 1000\r\n, intent = tostring(customDimensions.sqlDatabaseAccessIntent)\r\n, reportAction = tostring(customDimensions.reportAction)\r\n, reportingEngine = tostring(customDimensions.reportingEngine)\r\n, documentFormat = tostring(customDimensions.documentFormat)\r\n, sqlExecutes = toint(customDimensions.sqlExecutes)\r\n, sqlRowsRead = toint(customDimensions.sqlRowsRead)\r\n, numberOfRows = toint(customDimensions.numberOfRows)\r\n| summarize count(), sum( totalTimeInSec ), avg( totalTimeInSec ), round(avg(sqlExecutes),0), round(avg(sqlRowsRead),0), round(avg(numberOfRows),0) by alObjectInfo\r\n, intent, reportAction, reportingEngine, documentFormat\r\n| order by avg_totalTimeInSec desc \r\n| project [\"AL Object Information\"] = alObjectInfo,\r\n    intent,\r\n    reportAction,\r\n    reportingEngine,\r\n    documentFormat,\r\n    [\"Ocurrance\"] = count_,\r\n    [\"Avg Duration\"] = round(avg_totalTimeInSec, 2),\r\n    [\"Total Duration\"] = round(sum_totalTimeInSec,2),\r\n    [\"Avg SQL Executes\"] = round(avg_sqlExecutes, 0),\r\n    [\"Avg SQL Rows Read\"] = round(avg_sqlRowsRead,0),\r\n    [\"Avg Dataset Rows\"] = avg_numberOfRows\r\n| sort by Ocurrance desc",
      "id": "fed9fd97-466d-4d7f-932f-470bb1bd760c",
      "usedVariables": ["_endTime", "_environmentName", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp  between (_startTime .. _endTime)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0006'\n| where customDimensions.result == \"Success\"\n| where customDimensions.reportingEngine != \"ProcessingOnly\"\n| extend extensionName = trim('GMK', tostring(customDimensions.extensionName))\n  , alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n  , alMethod = trim('GMK',tostring( customDimensions.alMethod)) \n| extend alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', alObjectName)\n, totalTime = customDimensions.totalTime\n, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n| extend totalTimeInSec = totalTimeInMS / 1000\n, intent = tostring(customDimensions.sqlDatabaseAccessIntent)\n//, reportAction = tostring(customDimensions.reportAction)\n, reportingEngine = tostring(customDimensions.reportingEngine)\n, documentFormat = tostring(customDimensions.documentFormat)\n, sqlExecutes = toint(customDimensions.sqlExecutes)\n, sqlRowsRead = toint(customDimensions.sqlRowsRead)\n, numberOfRows = toint(customDimensions.numberOfRows)\n| summarize count(), sum( totalTimeInSec ), avg( totalTimeInSec ), round(avg(sqlExecutes),0), round(avg(sqlRowsRead),0), round(avg(numberOfRows),0) by alObjectInfo\n, intent\n//, reportAction\n, reportingEngine\n, documentFormat\n| order by avg_totalTimeInSec desc \n| project [\"AL Object Information\"] = alObjectInfo,\n    intent,\n//    reportAction,\n    reportingEngine,\n    documentFormat,\n    [\"Ocurrance\"] = count_,\n    [\"Avg Duration (sec)\"] = round(avg_totalTimeInSec, 2),\n    [\"Total Duration\"] = round(sum_totalTimeInSec,2),\n    [\"Avg SQL Executes\"] = round(avg_sqlExecutes, 0),\n    [\"Avg SQL Rows Read\"] = round(avg_sqlRowsRead,0),\n    [\"Avg Dataset Rows\"] = avg_numberOfRows\n| sort by Ocurrance desc\n",
      "id": "eeea3ed4-3cdf-44f6-9d4e-be5f8bbefaa1",
      "usedVariables": ["_endTime", "_environmentName", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where isnotempty(customDimensions.sqlStatement)\n| where isnotempty(customDimensions.alStackTrace)\n| extend numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n| where numberOfJoins > _joins // adjust as needed\n| where not(customDimensions.alObjectType in (\"Page\", \"PageExtension\"))\n| where customDimensions.sqlStatement startswith \"SELECT\"\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend objectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend extensionName = trim('GMK',tostring(customDimensions.extensionName))\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = tostring(customDimensions.extensionId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, numberOfJoins, executionTimeInMS, ObjectType, ObjectId, objectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN\n| summarize [\"Count\"] = count() by extensionName, ObjectType, ObjectId, objectName, numberOfColumnsSelected, numberOfJoins, tablename, sqlStatement, StackTrace, clientType\n| sort by numberOfColumnsSelected, Count\n| project extensionName, ObjectType, ObjectId, objectName, tablename, numberOfColumnsSelected, Count, numberOfJoins, sqlStatement, StackTrace, clientType",
      "id": "efe154e9-07e4-4bc8-9930-07b6f4fabc79",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_joins",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableCount = (\npageViews\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.appPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'CL0001'\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n| project \ntimestamp\n, extensionId = tostring(customDimensions.appId)\n, extensionPublisher = tostring(customDimensions.appPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.appName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, executionTimeInMS = toint(customMeasurements.duration)  \n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")),\" (Count)\") \n| project-away timestamp, dayBin, executionTimeInMS\n| sort by day asc \n| evaluate pivot(day, count())\n);\nTableCount\n| join\n(pageViews\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.appPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| where customDimensions.eventId == 'CL0001'\n| project \ntimestamp\n, extensionId = tostring(customDimensions.appId)\n, extensionPublisher = tostring(customDimensions.appPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.appName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, executionTimeInMS = toint(customMeasurements.duration)  \n, dayBin = bin(timestamp,1d)\n| extend day = strcat(strcat(format_datetime(dayBin, \"yyyy-MM-dd\")), \" (avg)\")\n| project-away timestamp, dayBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectId, alObjectName, day\n| sort by day asc \n| evaluate pivot(day,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectId1, alObjectName1",
      "id": "242ae224-6033-48ce-ab47-dc7f88bf9175",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n//| where customDimensions.designerLevel == \"None\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \"11\"\n    , performanceBucket == \"2min-5min\", \"10\"\n    , performanceBucket == \"1min-2min\", \"09\"\n    , performanceBucket == \"30sec-1min\", \"08\"\n    , performanceBucket == \"15sec-30sec\", \"07\"\n    , performanceBucket == \"7sec-15sec\", \"06\"\n    , performanceBucket == \"3sec-7sec\", \"05\"\n    , performanceBucket == \"1sec-3sec\", \"04\"\n    , performanceBucket == \"500ms-1sec\", \"03\"\n    , performanceBucket == \"250ms-500ms\", \"02\"\n    , performanceBucket == \"<250ms\", \"01\"\n    , \"00\")\n| extend perfBucket = strcat(bucketIndex, ': ', performanceBucket)\n| summarize count() by perfBucket\n| sort by perfBucket asc ",
      "id": "eff3bb96-deee-449c-99a3-56e754070e9b",
      "usedVariables": [
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n// | extend bucketIndex = case(\n//     performanceBucket == \">=5min\", \">=5min\"\n//     , performanceBucket == \"2min-5min\", \"2min-5min\"\n//     , performanceBucket == \"1min-2min\", \"1min-2min\"\n//     , performanceBucket == \"30sec-1min\", \"30sec-1min\"\n//     , performanceBucket == \"15sec-30sec\", \"15sec-30sec\"\n//     , performanceBucket == \"7sec-15sec\", \"7sec-15sec\"\n//     , performanceBucket == \"3sec-7sec\", \"3sec-7sec\"\n//     , performanceBucket == \"1sec-3sec\", \"0-3sec\"\n//     , performanceBucket == \"500ms-1sec\", \"0-3sec\"\n//     , performanceBucket == \"250ms-500ms\", \"0-3sec\"\n//     , performanceBucket == \"<250ms\", \"0-3sec\"\n//     , \"00\")\n| extend bucketIndex = case(\n    toint(duration) < 4000, \"- 4sec\"\n    , toint(duration) between (4001 .. 5000), \"4sec - 5sec\"\n    , toint(duration) between (5001 .. 7000), \"5sec - 7sec\"\n    , toint(duration) > 7001, \"7sec -\"\n    , \"n/a\"\n)\n| summarize count() by bucketIndex\n| sort by bucketIndex asc ",
      "id": "4f2330fa-d7eb-4954-87c2-6a06b117a6dc",
      "usedVariables": [
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend entraTenantId = tostring( customDimensions.aadTenantId )\n, environmentName = tostring( customDimensions.environmentName )\n| extend environment = strcat(entraTenantId, \" \", environmentName) \n| extend clientType = tostring(customDimensions.clientType)\n| summarize by environment, user_Id, bin(timestamp,1h), clientType\n| summarize count() by bin(timestamp,1h), clientType\n| where clientType != \"\"",
      "id": "2aa6aecd-d3e0-4c19-b77c-ce676bc9ca8b",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_aadTenantId",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend entraTenantId = tostring( customDimensions.aadTenantId )\n, environmentName = tostring( customDimensions.environmentName )\n| extend environment = strcat(entraTenantId, \" \", environmentName) \n| extend clientType = tostring(customDimensions.clientType)\n| summarize by environment, session_Id, bin(timestamp,1h), clientType\n| summarize count() by bin(timestamp,1h), clientType\n| where clientType != \"\"",
      "id": "0d60fa13-36e0-4655-8739-4012663912da",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_aadTenantId",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime) // adjust as needed\n| where operation_Name == 'Long Running Operation (SQL Query)' // do note that in a later version of the schema, this field will not be used \n     or customDimensions.eventId == 'RT0005' // starting from version 16.1, the eventId is used to identity signal types\n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , \"OTHERS\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n| extend isLocking = iff(withUPDLOCK == 'Yes', 'Yes', \n     iff(operationType in (\"UPDATE\",\"DELETE\",\"INSERT\"), 'Yes', 'No'))\n| project timestamp, isLocking, duration\n| summarize sum(duration) by bin(timestamp, 10min), isLocking\n| render timechart",
      "id": "640f136e-5fa3-4301-9595-ba34ae450c8d",
      "usedVariables": [
        "_CompanyName",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "pageViews\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where toint(customDimensions.alObjectId) > 0\n| where customDimensions.pageType !contains \"eport\"\n//| where customDimensions.designerLevel == \"None\"\n| extend bucketIndex = case(\n    performanceBucket == \">=5min\", \"3.BAD\"\n    , performanceBucket == \"2min-5min\", \"3.BAD\"\n    , performanceBucket == \"1min-2min\", \"3.BAD\"\n    , performanceBucket == \"30sec-1min\", \"3.BAD\"\n    , performanceBucket == \"15sec-30sec\", \"3.BAD\"\n    , performanceBucket == \"7sec-15sec\", \"3.BAD\"\n    , performanceBucket == \"3sec-7sec\", \"2.NO GOOD\"\n    , performanceBucket == \"1sec-3sec\", \"1.GOOD\"\n    , performanceBucket == \"500ms-1sec\", \"1.GOOD\"\n    , performanceBucket == \"250ms-500ms\", \"1.GOOD\"\n    , performanceBucket == \"<250ms\", \"1.GOOD\"\n    , \"00\")\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| summarize count() by bucketIndex, bin(timestamp,1d)\n",
      "id": "921303a6-83f4-4348-946d-a362335e94dc",
      "usedVariables": [
        "_CompanyName",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet stdDevArray = \n(pageViews\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.alObjectId > 0\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where customDimensions.pageType !in (\"ConfirmationDialog\",\"Report\",\"ReportPreview\",\"StandardDialog\")\n| extend alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n| extend alObjectId = tostring(customDimensions.alObjectId)\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageMode = tostring(customDimensions.pageMode)\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n| summarize \n    ExecutionCount = count(),\n    minTime = toint(min(duration)),\n    avgTime = toint(avg(duration)),\n    maxTime = toint(max(duration)),\n    stdDev = round(stdev(duration),2)\n    by\n    alObjectId,\n    alObjectName,\n    eventId,\n    pageType,\n    environmentName\n);\nlet arrayWithOutliers =\n(pageViews\n| where customDimensions.alObjectId > 0\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.pageType !contains \"eport\"\n| where customDimensions.pageType !contains \"Dialog\"\n| extend alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n| project  timestamp\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , alObjectName\n    , eventId = tostring(customDimensions.eventID) // note that this is different from other signal\n    , pageType = tostring(customDimensions.pageType)\n    , environmentName = tostring(customDimensions.environmentName)\n    , duration = toint(duration)\n);\nlet normalizedArray = (arrayWithOutliers\n|join kind=leftouter stdDevArray on \n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.eventId == $right.eventId,\n$left.pageType == $right.pageType,\n$left.environmentName == $right.environmentName\n| project-away alObjectId1, alObjectName1, eventId1, pageType1, environmentName1\n| extend Zscore = abs(round( (duration - avgTime) / stdDev ,2))\n| where Zscore < 2.5);\nlet PageViewCount = (\nnormalizedArray\n| project timestamp\n    , alObjectId     \n    , alObjectName \n    , eventId  \n    , pageType \n    , duration\n    , signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, duration\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nPageViewCount\n| join kind=leftouter \n(normalizedArray\n| project timestamp\n    , alObjectId     \n    , alObjectName \n    , eventId  \n    , pageType \n    , duration\n    , signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(duration),0) by alObjectId, alObjectName, pageType, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.pageType == $right.pageType\n| project-away alObjectId1, alObjectName1, pageType1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc \n",
      "id": "5e74758a-5510-46a1-8d97-196bef6ab3f7",
      "usedVariables": [
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\ntraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, stackTrace = tostring(customDimensions.alStackTrace)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, alMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, executionTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, stackTrace = tostring(customDimensions.alStackTrace)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, alMethod = tostring(customDimensions.alMethod)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, alMethod, stackTrace, clientType, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n//$left.extensionPublisher == $right.extensionPublisher,\n//$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.clientType == $right.clientType,\n//$left.stackTrace == $right.stackTrace,\n$left.alMethod == $right.alMethod\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, stackTrace1, clientType1, alMethod1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc \n",
      "id": "a56ce7d8-a916-42b5-97a9-a6b8967f37ce",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\ntraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, stackTrace = tostring(customDimensions.alStackTrace)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, executionTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 \n| project timestamp\n, clientType = tostring(customDimensions.clientType)\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, stackTrace = tostring(customDimensions.alStackTrace)\n, extensionId = tostring(customDimensions.extensionId)\n, extensionPublisher = tostring(customDimensions.extensionPublisher)\n, extensionName = trim('GMK',tostring(customDimensions.extensionName))\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n| extend operationType = case(\n  sqlStatement startswith \"UPDATE\", \"UPDATE\"\n, sqlStatement startswith \"DELETE\", \"DELETE\"\n, sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n, sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n, sqlStatement startswith \"SELECT\", \"SELECT\"\n, sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n, sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n, sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n, sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n, sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n, sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n, sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n, sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n, sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n, sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n, \"UNKNOWN\"\n)\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(executionTimeInMS),0) by extensionId, extensionPublisher, extensionName, alObjectType, alObjectId, alObjectName, operationType, sqlStatement, stackTrace, clientType, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.extensionId == $right.extensionId,\n$left.extensionPublisher == $right.extensionPublisher,\n$left.extensionName == $right.extensionName,\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.clientType == $right.clientType,\n$left.operationType == $right.operationType,\n$left.sqlStatement == $right.sqlStatement,\n$left.stackTrace == $right.stackTrace\n| project-away extensionId, extensionId1, extensionPublisher1, extensionName1, alObjectType1, alObjectId1, alObjectName1, operationType1, sqlStatement1, stackTrace1, clientType1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc \n",
      "id": "600c2b98-4c78-49bf-97bb-40dec1d04879",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\ntraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0008' \n| where toupper(customDimensions.category) == \"API\"\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| extend endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n| project timestamp\n, endpoint = endpoint\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, processingTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, processingTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0008' \n| where toupper(customDimensions.category) == \"API\"\n| extend endpoint = strcat(\"WS/\", customDimensions.alObjectType,'/', customDimensions.alObjectId, '(',tostring(customDimensions.endpoint),')')\n| extend processingTimeMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000\n, endpoint = endpoint\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, processingTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(processingTimeInMS),0) by alObjectType, alObjectId, alObjectName, endpoint, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.endpoint == $right.endpoint\n| project-away alObjectType1, alObjectId1, alObjectName1, endpoint1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc \n",
      "id": "8a33ec02-e75c-4168-b24d-00634cad3bcb",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 \n| where hour between (6 .. 17)\n| summarize round(avg(executionTimeInMS),0) by bin(timestamp, 7d)\n",
      "id": "be57c4be-8649-474b-a03d-e4b1e2527e1a",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName == _environmentName\n| where customDimensions.extensionId == '6ead7645-95ce-45a2-aa6f-7df9064b6965'\n| where customDimensions.eventId == 'ALEOS053-0001'\n| where message contains \"CalculateHistoryQtyAmount-End\"\n| extend eventId = tostring(customDimensions.eventId)\n  , periodCode = tostring(customDimensions.alPeriodCode)\n  , item = tostring(customDimensions.alItem)\n| project timestamp, eventId, session_Id, periodCode, item\n| join kind=fullouter    \n(\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentName == _environmentName\n| where customDimensions.extensionId == '6ead7645-95ce-45a2-aa6f-7df9064b6965'\n| where customDimensions.eventId == 'ALEOS053-0001'\n| where message contains \"CalculateHistoryQtyAmount-Start\"\n| extend eventId = tostring(customDimensions.eventId)\n  , periodCode = tostring(customDimensions.alPeriodCode)\n  , item = tostring(customDimensions.alItem)\n| project timestamp, eventId, session_Id, periodCode, item\n) on session_Id, eventId, periodCode, item\n| extend eventDuration = timestamp - timestamp1\n| extend eventDurationInSec = round(eventDuration / 1s)\n| project timestamp1, session_Id1, periodCode1, item1, eventDuration, eventDurationInSec\n| order by timestamp1 desc ",
      "id": "46280d6f-8c46-4e8d-83aa-5eb06ad7d56d",
      "usedVariables": ["_endTime", "_environmentName", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 \n| where hour between (6 .. 17)\n| summarize round(avg(executionTimeInMS),0) by bin(timestamp, 7d)\n",
      "id": "a24ff253-0525-42e3-9509-3be19107d983",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n| project timestamp, \n    [\"Session ID\"] = session_Id, \n    [\"Client Type\"] = clientType, \n    [\"AL Object Info\"] = strcat(alObjectType, ' ', alObjectId, ' - ', alObjectName), \n    [\"Extension Info\"] = extensionInfo, \n    [\"AL Stack Trace\"] =  stackTrace, \n    [\"SQL Statement\"] = sqlStatement,\n    [\"Locked Table\"] = tablename,\n    [\"SQL Session Holding Lock\"] = sqlServerSessionId,\n    [\"Snapshot ID\"] =  snapshotId\n| summarize count() by ['Locked Table']\n| sort by count_ desc ",
      "id": "e9054f59-6bf7-443f-ab37-8b167c72d1ed",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let lockedTables = \ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0013'\n| distinct tostring(customDimensions.snapshotId), tostring(customDimensions.sqlTableName)\n;\nlet timeouts =\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n;\ntimeouts\n| join kind=leftouter lockedTables on \n  $left.snapshotId == $right.customDimensions_snapshotId\n| project timestamp, \n    [\"Session ID\"] = session_Id, \n    [\"Client Type\"] = clientType, \n    [\"AL Object Info\"] = strcat(alObjectType, ' ', alObjectId, ' - ', alObjectName), \n    [\"Extension Info\"] = extensionInfo, \n    [\"AL Stack Trace\"] =  stackTrace, \n    [\"SQL Statement\"] = sqlStatement,\n    [\"Locked Table\"] = customDimensions_sqlTableName,\n    [\"SQL Session Holding Lock\"] = sqlServerSessionId,\n    [\"Snapshot ID\"] =  snapshotId\n| summarize count() by ['AL Object Info']\n",
      "id": "58f5c91a-ef9c-4170-a84c-42e9f81c2387",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxCount = 10;\ntraces\n| where timestamp  between(_startTime .. _endTime)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0005' \n| where customDimensions.alObjectId > 0 // filter out internal server calls\n| extend alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend alObjectInfo = strcat(tostring(customDimensions.alObjectType), ' ', tostring(customDimensions.alObjectId), ' - ',alObjectName)\n| extend sqlStatement = tostring(customDimensions.sqlStatement)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , \"OTHERS\"\n)\n, withUPDLOCK = iff(customDimensions.sqlStatement has 'UPDLOCK','Yes', 'No')\n| extend isLocking = iff(withUPDLOCK == 'Yes', 'Yes', \n     iff(operationType in (\"UPDATE\",\"DELETE\",\"INSERT\"), 'Yes', 'No'))\n| where isLocking == \"Yes\"\n| extend duration = toreal(totimespan(customDimensions.executionTime))/10000\n| summarize sum(duration) by alObjectInfo\n| sort by sum_duration\n| limit _maxCount ",
      "id": "a5e10f64-ea56-4f0c-8d9a-764b5c3fa3d8",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let TableDeadlocked = (\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0012'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend TenantId = strcat(customDimensions.aadTenantId)\n    , ExtensionId = tostring(customDimensions.extensionId)\n    , ExtensionName = tostring(customDimensions.extensionName)\n    , ExtensionVersion = tostring(customDimensions.extensionVersion)\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n    , clientType = tostring(customDimensions.clientType)\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablenamewithjoins: string \"\\\\$\" space: string\n| parse kind=regex tablenamewithjoins with tablenaamenojoins: string \"\\\\$\" newspace : string \n| parse kind=regex tablenaamenojoins with space2: string \"\\\\$\" onlytablenamenojoins: string \n//| parse kind=regex tablenamewithjoins with stringtoeliminate: string \"\\\\$\" tablenamewithoutjoins: string\n| extend tablename = case(\n    tablenamewithjoins contains \"$\", onlytablenamenojoins\n    , tablenamewithjoins \n)\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n//| where tablename <> \"\"\n| summarize Count = count() by tablename, clientType\n);\nTableDeadlocked\n| extend Percentage = round(Count *100 / toscalar(TableDeadlocked | summarize sum(Count)),2)\n| sort by Count desc \n",
      "id": "45b3b9b3-4735-4afe-9138-cf92726c851b",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let ObjectNameAndClientLRQCount= ( \ntraces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 0 \n| where customDimensions.alObjectId !in (\"18122317\",\"18122310\")\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| extend alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n| extend eventId = customDimensions.eventId \n, environmentName = customDimensions.environmentName\n, companyName = tostring(customDimensions.companyName)\n, extensionId = customDimensions.extensionId\n, extensionInfo = strcat(customDimensions.extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n, alObjectInfo = strcat(customDimensions.alObjectType, ' ', customDimensions.alObjectId, ' - ', customDimensions.alObjectName)\n, alStackTrace = tostring(customDimensions.alStackTrace)\n, clientType = tostring(customDimensions.clientType)\n, alObjectId = customDimensions.alObjectId\n, alObjectType = customDimensions.alObjectType\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n, method = tostring(customDimensions.alMethod)\n| sort by executionTimeInMS desc \n| project timestamp, \n    [\"Environment Name\"] = environmentName,\n    [\"Client Type\"] = tostring(clientType), \n    [\"AL Object ID\"] = tostring(alObjectId),\n    [\"AL Object Type\"] = tostring(alObjectType),\n    [\"AL Object Name\"] = tostring(alObjectName),\n    [\"AL method\"] = method,\n    [\"Duration\"] = executionTimeInMS, \n    [\"Company Name\"] = companyName, \n    [\"AL Object Information\"] = alObjectInfo, \n    [\"AL Stack Trace\"] = alStackTrace,\n    [\"Extension Information\"] = extensionInfo,\n    [\"User Telemetry ID\"] = user_Id,\n    [\"Session Id\"] = session_Id\n| summarize count(), round(avg(Duration),0), round(sum(Duration),0) by ['AL Object ID'], ['AL Object Type'], ['AL Object Name'], ['AL method'], ['Client Type'], ['AL Stack Trace']\n| sort by count_ desc \n);\nObjectNameAndClientLRQCount\n| extend Percentage = round(sum_Duration *100 / toscalar(ObjectNameAndClientLRQCount | summarize sum(sum_Duration)),0)\n| sort by sum_Duration desc\n// | extend Percentage = round(count_ *100 / toscalar(ObjectNameAndClientLRQCount | summarize sum(count_)),0)\n// | sort by count_ desc",
      "id": "b7d00ecd-4082-4631-a1d3-126be83ec144",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet LRQ = (traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n);\nLRQ\n| make-series Count = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "0a8e63dd-2e75-48a7-913a-95b30ae79efd",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet LRAM = (traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n| where customDimensions.alObjectId <> \"18122317\"\n);\nLRAM\n| make-series Count = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "bc52cdab-441a-42a1-9e39-917160c30520",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet DEADLOCKS = (traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n);\nDEADLOCKS\n| make-series Count = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)\n| render timechart with(title='LRAM Decomposition')",
      "id": "0183a88f-5d88-4728-b203-93f2bef1fa37",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet LOCKTIMEOUTS = (traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.eventId == 'RT0012'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| project timestamp\n, componentVersion = customDimensions.componentVersion\n, environmentType = customDimensions.environmentType\n, environmentName = customDimensions.environmentName\n, aadTenantId = customDimensions.aadTenantId\n, alObjectId = customDimensions.alObjectId\n, companyName = customDimensions.companyName\n, clientType = tostring(customDimensions.clientType)\n);\nLOCKTIMEOUTS\n| make-series LockCount = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(LockCount, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)\n| render timechart",
      "id": "1529790d-d43d-4726-b5da-202e52915ccb",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 1d;\nlet INCOMING = (traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where operation_Name == \"Web Services Call\" // do note that in a later version of the schema, this field will not be used \n     or customDimensions.eventId == \"RT0008\" // starting from version 16.1, the eventId is used to identity signal types\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n);     \nINCOMING\n| make-series Count = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "8c20c311-77f2-4e06-a243-38d5e6b99e92",
      "usedVariables": [
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 7d;\nlet LRQWEEKLY = (traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n);\nLRQWEEKLY\n| make-series Count = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "8a82a5f1-630f-4a89-bb5b-481a22cfbe61",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 7d;\nlet LRAMWEEKLY = (traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n);\nLRAMWEEKLY\n| make-series Count = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "8c7217dc-2b09-419f-996d-e9c8c0063a96",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 7d;\nlet DEADLOCKSWEEKLY = (traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n);\nDEADLOCKSWEEKLY\n| make-series Count = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)",
      "id": "9f514152-85c6-46c8-8138-100d3d3512af",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _interval = 7d;\nlet LOCKTIMEOUTSWEEKLY = (traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.eventId == 'RT0012'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| project timestamp\n, componentVersion = customDimensions.componentVersion\n, environmentType = customDimensions.environmentType\n, environmentName = customDimensions.environmentName\n, aadTenantId = customDimensions.aadTenantId\n, alObjectId = customDimensions.alObjectId\n, companyName = customDimensions.companyName\n, clientType = tostring(customDimensions.clientType)\n, alObjectType = customDimensions.alObjectType\n, alObjectName = customDimensions.alObjectName\n, extensionVersion = customDimensions.extensionVersion\n, extensionName = customDimensions.extensionName\n, extensionId = customDimensions.extensionId\n, alStackTrace = customDimensions.alStackTrace\n// use the KQL snippet parseStackTrace to get bottom of the stack trace details\n, sqlStatement = customDimensions.sqlStatement\n, sqlServerSessionId = customDimensions.sqlServerSessionId\n, snapshotId = customDimensions.snapshotId\n, sessionId = customDimensions.sessionId\n, usertelemetryId = case(\n  // user telemetry id was introduced in the platform in version 20.0\n  toint( substring(customDimensions.componentVersion,0,2)) >= 20, user_Id\n, 'N/A'\n)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n);\nLOCKTIMEOUTSWEEKLY\n| make-series Count = count() on timestamp from _startTime_Ingestion to _endTime_ingestion step _interval \n| extend (baseline, seasonal, trend, residual) = series_decompose(Count, -1, 'linefit')  //  decomposition of a set of time series to seasonal, trend, residual, and baseline (seasonal+trend)\n",
      "id": "bf1eb507-0b1d-4417-9920-122154e39b5a",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n    and customDimensions.eventId == 'RT0005'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n| extend executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n| summarize Duration = sum(executionTimeInMS) by bin(timestamp, 1d), clientType\n",
      "id": "8c945b18-3df0-4aa5-ab81-673d02ca6131",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where 1==1 \n    and timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms)\n    and customDimensions.eventId == 'RT0018'\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n| extend executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000  \n| summarize Duration = sum(executionTimeInMS) by bin(timestamp, 1d), clientType\n",
      "id": "bf4a01e3-183d-45d8-811d-c7b8333e5755",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _now = now();\nlet TableCount = (\ntraces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.aadTenantId has_any (_aadTenantId)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0005' \n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n| where hour between (6 .. 17)\n| project timestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Count)\") \n| project-away timestamp, signalsBin, executionTimeInMS\n| sort by signals asc \n| evaluate pivot(signals, count())\n);\nTableCount\n| join\n(traces\n| where timestamp between (_previousUpdateStartTime .. _now)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == 'RT0005' \n| project timestamp\n, sqlStatement = tostring(customDimensions.sqlStatement)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = trim('GMK',tostring(customDimensions.alObjectName))\n, alObjectType = tostring(customDimensions.alObjectType)\n, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan \n// this part of the query derives various insights from the SQL statement\n, signalsBin = iff(timestamp < _updateStartTime,'Previous Update', 'New Update')\n| extend signals = strcat(signalsBin,\" (Avg)\") \n| project-away timestamp, signalsBin\n| summarize Average = round(avg(executionTimeInMS),0) by alObjectType, alObjectId, alObjectName, sqlStatement, signals\n| sort by signals asc \n| evaluate pivot(signals,sum(Average))\n)\non\n$left.alObjectType == $right.alObjectType,\n$left.alObjectId == $right.alObjectId,\n$left.alObjectName == $right.alObjectName,\n$left.sqlStatement == $right.sqlStatement\n| project-away alObjectType1, alObjectId1, alObjectName1, sqlStatement1\n| where [\"New Update (Count)\"] > _countLimit\n| extend isNew = tostring(iif([\"Previous Update (Count)\"] < 1, \"Yes\",\"\"))\n| where isNew == \"\"\n| extend delta = iif(isNew == \"Yes\", 0.0, [\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) \n    , deltaPerc = iif(isNew == \"Yes\", 0.0, round(([\"Previous Update (Avg)\"] - [\"New Update (Avg)\"]) * 100 / [\"Previous Update (Avg)\"],0))\n| sort by [\"New Update (Count)\"] desc ",
      "id": "8d795823-de4a-48d1-bb05-4f4590653e49",
      "usedVariables": [
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_aadTenantId",
        "_countLimit",
        "_environmentName",
        "_previousUpdateStartTime",
        "_updateStartTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "// Any CalcSum that we can find in Telemetry that is locking\ntraces\n| where timestamp between (_startTime .. _endTime) // adjust as needed. The value 30 comes from the app configuration\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // only interested in parts in the code we can change\n| where customDimensions.eventId == \"RT0005\"\n//| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT COUNT\" //It's an intentional SUM\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| where customDimensions.clientType has_any (_ClientType)\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n| parse kind=regex sqlStatement with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , TenantId = strcat(customDimensions.aadTenantId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , clientType = tostring(customDimensions.clientType)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project extensionPublisher, extensionName, numberOfColumnsSelected, tablename, executionTimeInMS, ObjectType, ObjectId, alObjectName, stackTrace, eventId, clientType, sqlStatement, extensionIdsFromJOIN",
      "id": "3a2350bd-c19e-481e-9c8c-c784af95fc5f",
      "usedVariables": ["_ClientType", "_endTime", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == 'RT0012'\n| extend sqlStatement = replace_string(tostring(customDimensions.sqlStatement),'GMK','')\n    , stackTrace = replace_string(tostring(customDimensions.alStackTrace),'GMK','')\n    , alObjectName = replace_string(tostring(customDimensions.alObjectName),'GMK','')\n    , extensionName = replace_string(tostring(customDimensions.extensionName),'GMK','')\n    , method = tostring(customDimensions.alExecutingMethodScope)\n| extend tablename = tostring( extract_all(\"\\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| extend\n   alObjectId = customDimensions.alObjectId\n  , companyName = tostring(customDimensions.companyName)\n  , clientType = tostring(customDimensions.clientType)\n  , alObjectType = customDimensions.alObjectType\n  , extensionVersion = customDimensions.extensionVersion\n  , extensionInfo = strcat(extensionName, ' ', customDimensions.extensionVersion, \n    (iff(isnotempty(tostring(customDimensions.extensionPublisher)), strcat(' - ', tostring(customDimensions.extensionPublisher)), '')))\n  , extensionId = customDimensions.extensionId\n  , sqlServerSessionId = customDimensions.sqlServerSessionId\n  , snapshotId = tostring(customDimensions.snapshotId)\n| project timestamp, \n    [\"Session ID\"] = session_Id, \n    [\"Client Type\"] = clientType, \n    [\"Extension Info\"] = extensionInfo, \n    [\"AL Object Info\"] = strcat(alObjectType, ' ', alObjectId, ' - ', alObjectName), \n    [\"AL Stack Trace\"] =  stackTrace, \n    [\"AL Method\"] = method,\n    [\"SQL Statement\"] = sqlStatement,\n    [\"Locked Table\"] = tablename,\n    [\"SQL Session Holding Lock\"] = sqlServerSessionId,\n    [\"Snapshot ID\"] =  snapshotId\n| summarize Occurrance = count() by ['AL Stack Trace'], ['SQL Statement'], ['Locked Table']\n| sort by Occurrance desc ",
      "id": "b298f8c7-6b2a-45bf-9f7e-130aa84fb1bc",
      "usedVariables": [
        "_ClientType",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 30d;\nlet _currentDuration = _endTime - _startTime;\nlet _duration = iff(_currentDuration > _maxDuration , _maxDuration, _currentDuration);\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == \"RT0008\" // starting from version 16.1, the eventId is used to identity signal types\n| project timestamp\n, alPublisher = tostring(customDimensions.alPublisher)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, category = tostring(customDimensions.category)\n, endpoint = tostring(customDimensions.endpoint)\n, httpStatusCode = tostring(customDimensions.httpStatusCode) // httpStatusCode available from 16.3\n, httpHeaders = tostring(customDimensions.httpHeaders)       // httpHeaders available from 16.3\n, httpMethod = tostring(customDimensions.httpMethod) // httpMethod available from 16.3\n, diagnosticsMessage = tostring(customDimensions.diagnosticsMessage) // Only logged in case of an error in a OData/API call. diagnosticsMessage available from 22.0\n, failureReason = tostring(customDimensions.failureReason) // Only logged in case of an error in a OData/API call. failureReason available from 22.0\n, executionTime = customDimensions.serverExecutionTime\n, requestQueueTime = customDimensions.requestQueueTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.0.\n// the datatype for executionTime and requestQueueTime is timespan so need to convert to milliseconds\n, requestQueueTimeMS = toreal(totimespan(customDimensions.requestQueueTime))/10000\n, executionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 \n, requestTotalTimeMS = ( toreal(totimespan(customDimensions.totalTime))+toreal(totimespan(customDimensions.requestQueueTime)) )/10000\n, sqlExecutes = toint(customDimensions.sqlExecutes)\n, sqlRowsRead = toint(customDimensions.sqlRowsRead)\n// these lines illustrate how to extract data from the httpHeaders dimension\n| extend httpHeadersTmp =  tostring( httpHeaders)\n| extend httpHeadersJSON = parse_json(httpHeadersTmp)\n| extend msUserAgent = tostring( httpHeadersJSON.['ms-dyn-useragent'] )\n| extend httpAuthorization = tostring( httpHeadersJSON.['Authorization'] ) // Authorization header (truncated) available from 17.3\n| extend isAdminCafe = iif(endpoint startswith \"MS/api/eos/acGroup/v2.0/companies()/ac\",true,false)\n//| where isAdminCafe == \"false\"\n//| summarize count(), avg(executionTimeInMS), avg(requestQueueTimeMS), avg(requestTotalTimeMS) by alObjectType, alObjectId, alObjectName, category, endpoint,httpMethod, isAdminCafe\n//| sort by count_ desc \n| summarize count() by bin(timestamp, 1min), endpoint\n| render timechart\n",
      "id": "172d5e06-05b2-42a6-9133-4368cdc1c5d0",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "let _maxDuration = 30d;\nlet _currentDuration = _endTime - _startTime;\nlet _duration = iff(_currentDuration > _maxDuration , _maxDuration, _currentDuration);\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.eventId == \"RT0008\" // starting from version 16.1, the eventId is used to identity signal types\n| project timestamp\n, alPublisher = tostring(customDimensions.alPublisher)\n, alObjectId = tostring(customDimensions.alObjectId)\n, alObjectName = tostring(customDimensions.alObjectName)\n, alObjectType = tostring(customDimensions.alObjectType)\n, category = tostring(customDimensions.category)\n, endpoint = tostring(customDimensions.endpoint)\n, httpStatusCode = tostring(customDimensions.httpStatusCode) // httpStatusCode available from 16.3\n, httpHeaders = tostring(customDimensions.httpHeaders)       // httpHeaders available from 16.3\n, httpMethod = tostring(customDimensions.httpMethod) // httpMethod available from 16.3\n, diagnosticsMessage = tostring(customDimensions.diagnosticsMessage) // Only logged in case of an error in a OData/API call. diagnosticsMessage available from 22.0\n, failureReason = tostring(customDimensions.failureReason) // Only logged in case of an error in a OData/API call. failureReason available from 22.0\n, executionTime = customDimensions.serverExecutionTime\n, requestQueueTime = customDimensions.requestQueueTime // This dimension was introduced in Business Central 2023 release wave 1, version 22.0.\n// the datatype for executionTime and requestQueueTime is timespan so need to convert to milliseconds\n, requestQueueTimeMS = toreal(totimespan(customDimensions.requestQueueTime))/10000\n, executionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 \n, requestTotalTimeMS = ( toreal(totimespan(customDimensions.totalTime))+toreal(totimespan(customDimensions.requestQueueTime)) )/10000\n, sqlExecutes = toint(customDimensions.sqlExecutes)\n, sqlRowsRead = toint(customDimensions.sqlRowsRead)\n// these lines illustrate how to extract data from the httpHeaders dimension\n| extend httpHeadersTmp =  tostring( httpHeaders)\n| extend httpHeadersJSON = parse_json(httpHeadersTmp)\n| extend msUserAgent = tostring( httpHeadersJSON.['ms-dyn-useragent'] )\n| extend httpAuthorization = tostring( httpHeadersJSON.['Authorization'] ) // Authorization header (truncated) available from 17.3\n| extend isAdminCafe = iif(endpoint startswith \"MS/api/eos/acGroup/v2.0/companies()/ac\",true,false)\n//| where isAdminCafe == \"false\"\n//| summarize count(), avg(executionTimeInMS), avg(requestQueueTimeMS), avg(requestTotalTimeMS) by alObjectType, alObjectId, alObjectName, category, endpoint,httpMethod, isAdminCafe\n//| sort by count_ desc \n| summarize duration = round(sum(requestTotalTimeMS),0) by bin(timestamp, 1min), endpoint\n| render timechart\n",
      "id": "aa52e77c-5e36-4653-b23c-9ea0e6a8a973",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp >= todatetime(_startTime_Ingestion)\n    and timestamp <= todatetime(_endTime_ingestion) + totimespan(24h) - totimespan(1ms) \n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.extensionName contains \"Accruals\"\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend  hour = iif(_OnlyWorkingHours == true, hourofday(timestamp), 12)\n    , clientType = tostring(customDimensions.clientType)\n| where hour between (6 .. 17)\n| summarize count() by bin(timestamp, 1d), clientType\n| order by timestamp asc",
      "id": "0e973bd3-b77b-4e89-b135-575771203f36",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_OnlyWorkingHours",
        "_endTime_ingestion",
        "_environmentName",
        "_publisher",
        "_startTime_Ingestion"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == \"RT0030\"\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.failureReason has_any (_FailureReason)\n| project timestamp\n    , message\n    , objectId = tostring(customDimensions.alObjectId)\n    , objectType = tostring(customDimensions.alObjectType)\n    , objectName = tostring(customDimensions.alObjectName)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , clientType = tostring(customDimensions.clientType)\n    , companyName = tostring(customDimensions.companyName)\n    , errorMessage = tostring(customDimensions.alErrorMessage)\n    , detailedErrorMessage = tostring(customDimensions.alDetailedErrorMessage)\n    , failureReason = tostring(customDimensions.failureReason)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , extensionId = tostring(customDimensions.extensionId)\n    , extensionVersion = tostring(customDimensions.extensionVersion)\n    , extensionName = tostring(customDimensions.extensionName)\n| summarize count() by failureReason\n| sort by count_ desc \n\n",
      "id": "ca42e9cd-4d89-4cab-a6b5-dbda8e8a866c",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_FailureReason",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == \"RT0030\"\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.failureReason has_any (_FailureReason)\n| project timestamp\n    , message\n    , objectId = tostring(customDimensions.alObjectId)\n    , objectType = tostring(customDimensions.alObjectType)\n    , objectName = tostring(customDimensions.alObjectName)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , clientType = tostring(customDimensions.clientType)\n    , companyName = tostring(customDimensions.companyName)\n    , errorMessage = tostring(customDimensions.alErrorMessage)\n    , detailedErrorMessage = tostring(customDimensions.alDetailedErrorMessage)\n    , failureReason = tostring(customDimensions.failureReason)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , extensionId = tostring(customDimensions.extensionId)\n    , extensionVersion = tostring(customDimensions.extensionVersion)\n    , extensionName = tostring(customDimensions.extensionName)\n| summarize count() by failureReason\n| sort by count_ desc \n\n",
      "id": "8c6ae020-5066-4475-9c58-53316570c913",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_FailureReason",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == \"RT0030\"\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.failureReason has_any (_FailureReason)\n| project timestamp\n    , message = tostring(message)\n    , objectId = tostring(customDimensions.alObjectId)\n    , objectType = tostring(customDimensions.alObjectType)\n    , objectName = tostring(customDimensions.alObjectName)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , clientType = tostring(customDimensions.clientType)\n    , companyName = tostring(customDimensions.companyName)\n    , errorMessage = tostring(customDimensions.alErrorMessage)\n    , detailedErrorMessage = tostring(customDimensions.alDetailedErrorMessage)\n    , failureReason = tostring(customDimensions.failureReason)\n    , componentVersion = tostring(customDimensions.componentVersion)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , extensionId = tostring(customDimensions.extensionId)\n    , extensionVersion = tostring(customDimensions.extensionVersion)\n    , extensionName = tostring(customDimensions.extensionName)\n    , operation_Id\n    , session_Id\n    , user_Id\n| sort by timestamp desc \n\n\n\n",
      "id": "4f7784ab-7a14-483e-af17-cda9da696f11",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_FailureReason",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)// adjust as needed\n| where customDimensions.eventId == \"RT0030\"\n| where customDimensions.companyName has_any (_CompanyName)\n| where customDimensions.extensionPublisher has_any (_publisher)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.clientType has_any (_ClientType)\n| where customDimensions.failureReason has_any (_FailureReason)\n| project timestamp\n    , message = tostring(message)\n    , operation_Id\n    , objectId = tostring(customDimensions.alObjectId)\n    , objectType = tostring(customDimensions.alObjectType)\n    , objectName = tostring(customDimensions.alObjectName)\n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , clientType = tostring(customDimensions.clientType)\n    , companyName = tostring(customDimensions.companyName)\n    , errorMessage = tostring(customDimensions.alErrorMessage)\n    , detailedErrorMessage = tostring(customDimensions.alDetailedErrorMessage)\n    , failureReason = tostring(customDimensions.failureReason)\n    , componentVersion = tostring(customDimensions.componentVersion)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , extensionId = tostring(customDimensions.extensionId)\n    , extensionVersion = tostring(customDimensions.extensionVersion)\n    , extensionName = tostring(customDimensions.extensionName)\n| sort by timestamp desc\n| summarize count() by bin(timestamp,1d), failureReason \n\n\n\n",
      "id": "b9a28fb4-7ef1-4237-8de5-8e65926d2d61",
      "usedVariables": [
        "_ClientType",
        "_CompanyName",
        "_EnvironmentType",
        "_FailureReason",
        "_endTime",
        "_environmentName",
        "_publisher",
        "_startTime"
      ]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp  between (_startTime .. _endTime)\n| sort by timestamp desc\n| summarize arg_max(timestamp,*) by tostring(customDimensions.clientType)\n| where isnotempty( customDimensions.clientType)\n| project [\"Client Type\"] = tostring(customDimensions.clientType)\n| sort by ['Client Type'] asc ",
      "id": "d3d963f9-86e2-440a-bc79-99311228027f",
      "usedVariables": ["_endTime", "_startTime"]
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where customDimensions.companyName <> ''\n| project CompanyName = tostring(customDimensions.companyName)\n| distinct CompanyName\n\n\n\n",
      "id": "3039f4ce-508b-48e0-9aa1-48345396e464",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where customDimensions.extensionPublisher <> ''\n| project _publisher = tostring(customDimensions.extensionPublisher)\n| distinct _publisher",
      "id": "9a100508-c1a2-4244-8372-37598bb700c5",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| summarize arg_max(timestamp,*) by tostring(customDimensions.environmentType)\n| where isnotempty( customDimensions.environmentType)\n| project [\"Environment Type\"] = tostring(customDimensions.environmentType)\n| sort by [\"Environment Type\"] asc ",
      "id": "037fae30-bdbf-42d7-8d2c-b96032a57f5f",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| summarize arg_max(timestamp,*) by tostring(customDimensions.environmentType), \n                                    tostring(customDimensions.environmentName)\n| where isnotempty( customDimensions.environmentName)\n| project [\"Environment Name\"] = tostring(customDimensions.environmentName)\n| sort by ['Environment Name'] asc ",
      "id": "a639f2a6-893c-4746-b6e8-7a684dc7258c",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where customDimensions.eventId == 'RT0018' \n| where customDimensions.alObjectId > 50000\n| project [\"AL Object ID\"] = toreal(customDimensions.alObjectId)\n| distinct [\"AL Object ID\"]\n| order by [\"AL Object ID\"] asc",
      "id": "70f33fd3-c6cf-4e9f-a352-43a4850e455c",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where customDimensions.eventId == 'RT0018' \n| project [\"Session ID\"] = session_Id\n| distinct [\"Session ID\"]\n\n",
      "id": "056d13ec-2982-428d-aaad-f56517e1dc3e",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| summarize arg_max(timestamp,*) by tostring(customDimensions.aadTenantId)\n| where isnotempty(customDimensions.aadTenantId)\n| project [\"Tenant Id\"] = tostring(customDimensions.aadTenantId)\n| sort by ['Tenant Id'] asc ",
      "id": "0cc8d042-2478-46de-949d-e48b12dca22e",
      "usedVariables": []
    },
    {
      "dataSource": {
        "kind": "inline",
        "dataSourceId": "99a3b70c-8819-4cce-844b-3c83734afb29"
      },
      "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions.environmentType has_any (_EnvironmentType)\n| where customDimensions.environmentName has_any (_environmentName)\n| where customDimensions.eventId == \"RT0030\"\n| distinct failureReason = tostring(customDimensions.failureReason)\n| sort by failureReason asc \n\n",
      "id": "e1052e76-cc7e-4b44-bc04-baa9c2ae5314",
      "usedVariables": [
        "_EnvironmentType",
        "_endTime",
        "_environmentName",
        "_startTime"
      ]
    }
  ]
}
